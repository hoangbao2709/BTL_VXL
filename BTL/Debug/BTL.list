
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e8  080048e8  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  080048e8  080048e8  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e8  080048e8  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  080048f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000108  080049f8  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  080049f8  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001345a  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e4  00000000  00000000  0003358b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00035f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00036fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fd3  00000000  00000000  00037ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001428c  00000000  00000000  00050e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da29  00000000  00000000  00065127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2b50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000460c  00000000  00000000  000f2ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000108 	.word	0x20000108
 8000128:	00000000 	.word	0x00000000
 800012c:	08004798 	.word	0x08004798

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000010c 	.word	0x2000010c
 8000148:	08004798 	.word	0x08004798

0800014c <subKeyProcess>:
int KeyReg2[ARRAY_SIZE] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int KeyReg3[ARRAY_SIZE] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress[ARRAY_SIZE] = {2000, 2000, 2000, 2000};

void subKeyProcess(int i){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for(int j = 0; j < ARRAY_SIZE; j++){
 8000154:	2300      	movs	r3, #0
 8000156:	61fb      	str	r3, [r7, #28]
 8000158:	e007      	b.n	800016a <subKeyProcess+0x1e>
		button_flag[j] = 0;
 800015a:	4a12      	ldr	r2, [pc, #72]	; (80001a4 <subKeyProcess+0x58>)
 800015c:	69fb      	ldr	r3, [r7, #28]
 800015e:	2100      	movs	r1, #0
 8000160:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int j = 0; j < ARRAY_SIZE; j++){
 8000164:	69fb      	ldr	r3, [r7, #28]
 8000166:	3301      	adds	r3, #1
 8000168:	61fb      	str	r3, [r7, #28]
 800016a:	69fb      	ldr	r3, [r7, #28]
 800016c:	2b03      	cmp	r3, #3
 800016e:	ddf4      	ble.n	800015a <subKeyProcess+0xe>
	}
	char buffer[20];
	sprintf(buffer, "%d", i + 1);
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1c5a      	adds	r2, r3, #1
 8000174:	f107 0308 	add.w	r3, r7, #8
 8000178:	490b      	ldr	r1, [pc, #44]	; (80001a8 <subKeyProcess+0x5c>)
 800017a:	4618      	mov	r0, r3
 800017c:	f003 fed2 	bl	8003f24 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8000180:	f107 0108 	add.w	r1, r7, #8
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	2214      	movs	r2, #20
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <subKeyProcess+0x60>)
 800018c:	f003 fcc4 	bl	8003b18 <HAL_UART_Transmit>
	button_flag[i] = 1;
 8000190:	4a04      	ldr	r2, [pc, #16]	; (80001a4 <subKeyProcess+0x58>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2101      	movs	r1, #1
 8000196:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800019a:	bf00      	nop
 800019c:	3720      	adds	r7, #32
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	20000124 	.word	0x20000124
 80001a8:	080047b0 	.word	0x080047b0
 80001ac:	200001fc 	.word	0x200001fc

080001b0 <subKeyProcess0>:

void subKeyProcess0(){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	PRESSED_STATE_0 = 1;
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <subKeyProcess0+0x14>)
 80001b6:	2201      	movs	r2, #1
 80001b8:	601a      	str	r2, [r3, #0]
}
 80001ba:	bf00      	nop
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	20000134 	.word	0x20000134

080001c8 <getKeyInput>:

void getKeyInput(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	KeyReg0[0] = KeyReg1[0];
 80001ce:	4b57      	ldr	r3, [pc, #348]	; (800032c <getKeyInput+0x164>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a57      	ldr	r2, [pc, #348]	; (8000330 <getKeyInput+0x168>)
 80001d4:	6013      	str	r3, [r2, #0]
	KeyReg1[0] = KeyReg2[0];
 80001d6:	4b57      	ldr	r3, [pc, #348]	; (8000334 <getKeyInput+0x16c>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a54      	ldr	r2, [pc, #336]	; (800032c <getKeyInput+0x164>)
 80001dc:	6013      	str	r3, [r2, #0]
	KeyReg2[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001de:	2101      	movs	r1, #1
 80001e0:	4855      	ldr	r0, [pc, #340]	; (8000338 <getKeyInput+0x170>)
 80001e2:	f001 ff7d 	bl	80020e0 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b52      	ldr	r3, [pc, #328]	; (8000334 <getKeyInput+0x16c>)
 80001ec:	601a      	str	r2, [r3, #0]

	KeyReg0[1] = KeyReg1[1];
 80001ee:	4b4f      	ldr	r3, [pc, #316]	; (800032c <getKeyInput+0x164>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	4a4f      	ldr	r2, [pc, #316]	; (8000330 <getKeyInput+0x168>)
 80001f4:	6053      	str	r3, [r2, #4]
	KeyReg1[1] = KeyReg2[1];
 80001f6:	4b4f      	ldr	r3, [pc, #316]	; (8000334 <getKeyInput+0x16c>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	4a4c      	ldr	r2, [pc, #304]	; (800032c <getKeyInput+0x164>)
 80001fc:	6053      	str	r3, [r2, #4]
	KeyReg2[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80001fe:	2102      	movs	r1, #2
 8000200:	484d      	ldr	r0, [pc, #308]	; (8000338 <getKeyInput+0x170>)
 8000202:	f001 ff6d 	bl	80020e0 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	461a      	mov	r2, r3
 800020a:	4b4a      	ldr	r3, [pc, #296]	; (8000334 <getKeyInput+0x16c>)
 800020c:	605a      	str	r2, [r3, #4]

	KeyReg0[2] = KeyReg1[2];
 800020e:	4b47      	ldr	r3, [pc, #284]	; (800032c <getKeyInput+0x164>)
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	4a47      	ldr	r2, [pc, #284]	; (8000330 <getKeyInput+0x168>)
 8000214:	6093      	str	r3, [r2, #8]
	KeyReg1[2] = KeyReg2[2];
 8000216:	4b47      	ldr	r3, [pc, #284]	; (8000334 <getKeyInput+0x16c>)
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	4a44      	ldr	r2, [pc, #272]	; (800032c <getKeyInput+0x164>)
 800021c:	6093      	str	r3, [r2, #8]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 800021e:	2110      	movs	r1, #16
 8000220:	4845      	ldr	r0, [pc, #276]	; (8000338 <getKeyInput+0x170>)
 8000222:	f001 ff5d 	bl	80020e0 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	461a      	mov	r2, r3
 800022a:	4b42      	ldr	r3, [pc, #264]	; (8000334 <getKeyInput+0x16c>)
 800022c:	609a      	str	r2, [r3, #8]

	KeyReg0[3] = KeyReg1[3];
 800022e:	4b3f      	ldr	r3, [pc, #252]	; (800032c <getKeyInput+0x164>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4a3f      	ldr	r2, [pc, #252]	; (8000330 <getKeyInput+0x168>)
 8000234:	60d3      	str	r3, [r2, #12]
	KeyReg1[3] = KeyReg2[3];
 8000236:	4b3f      	ldr	r3, [pc, #252]	; (8000334 <getKeyInput+0x16c>)
 8000238:	68db      	ldr	r3, [r3, #12]
 800023a:	4a3c      	ldr	r2, [pc, #240]	; (800032c <getKeyInput+0x164>)
 800023c:	60d3      	str	r3, [r2, #12]
	KeyReg2[3] = HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 800023e:	2101      	movs	r1, #1
 8000240:	483e      	ldr	r0, [pc, #248]	; (800033c <getKeyInput+0x174>)
 8000242:	f001 ff4d 	bl	80020e0 <HAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	461a      	mov	r2, r3
 800024a:	4b3a      	ldr	r3, [pc, #232]	; (8000334 <getKeyInput+0x16c>)
 800024c:	60da      	str	r2, [r3, #12]

	for(int i = 0; i < ARRAY_SIZE; i++){
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	e063      	b.n	800031c <getKeyInput+0x154>
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000254:	4a36      	ldr	r2, [pc, #216]	; (8000330 <getKeyInput+0x168>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	4933      	ldr	r1, [pc, #204]	; (800032c <getKeyInput+0x164>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000264:	429a      	cmp	r2, r3
 8000266:	d156      	bne.n	8000316 <getKeyInput+0x14e>
 8000268:	4a30      	ldr	r2, [pc, #192]	; (800032c <getKeyInput+0x164>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	4930      	ldr	r1, [pc, #192]	; (8000334 <getKeyInput+0x16c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000278:	429a      	cmp	r2, r3
 800027a:	d14c      	bne.n	8000316 <getKeyInput+0x14e>
			if(KeyReg3[i] != KeyReg2[i]){
 800027c:	4a30      	ldr	r2, [pc, #192]	; (8000340 <getKeyInput+0x178>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000284:	492b      	ldr	r1, [pc, #172]	; (8000334 <getKeyInput+0x16c>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028c:	429a      	cmp	r2, r3
 800028e:	d017      	beq.n	80002c0 <getKeyInput+0xf8>
				KeyReg3[i] = KeyReg2[i];
 8000290:	4a28      	ldr	r2, [pc, #160]	; (8000334 <getKeyInput+0x16c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000298:	4929      	ldr	r1, [pc, #164]	; (8000340 <getKeyInput+0x178>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 80002a0:	4a24      	ldr	r2, [pc, #144]	; (8000334 <getKeyInput+0x16c>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d134      	bne.n	8000316 <getKeyInput+0x14e>
					subKeyProcess(i);
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f7ff ff4d 	bl	800014c <subKeyProcess>
					TimerForKeyPress[i] = 2000;
 80002b2:	4a24      	ldr	r2, [pc, #144]	; (8000344 <getKeyInput+0x17c>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80002ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002be:	e02a      	b.n	8000316 <getKeyInput+0x14e>
				}
			}else{
				TimerForKeyPress[i]--;
 80002c0:	4a20      	ldr	r2, [pc, #128]	; (8000344 <getKeyInput+0x17c>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c8:	1e5a      	subs	r2, r3, #1
 80002ca:	491e      	ldr	r1, [pc, #120]	; (8000344 <getKeyInput+0x17c>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0){
 80002d2:	4a1c      	ldr	r2, [pc, #112]	; (8000344 <getKeyInput+0x17c>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d11b      	bne.n	8000316 <getKeyInput+0x14e>
					if(i == 0 && KeyReg2[0] == PRESSED_STATE){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d106      	bne.n	80002f2 <getKeyInput+0x12a>
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <getKeyInput+0x16c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d102      	bne.n	80002f2 <getKeyInput+0x12a>
						subKeyProcess0();
 80002ec:	f7ff ff60 	bl	80001b0 <subKeyProcess0>
 80002f0:	e00b      	b.n	800030a <getKeyInput+0x142>
					}
					else if(i != 0 && KeyReg2[i] == PRESSED_STATE){
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d008      	beq.n	800030a <getKeyInput+0x142>
 80002f8:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <getKeyInput+0x16c>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d102      	bne.n	800030a <getKeyInput+0x142>
						subKeyProcess(i);
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f7ff ff21 	bl	800014c <subKeyProcess>
					}
					TimerForKeyPress[i] = 2000;
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <getKeyInput+0x17c>)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000312:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < ARRAY_SIZE; i++){
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3301      	adds	r3, #1
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b03      	cmp	r3, #3
 8000320:	dd98      	ble.n	8000254 <getKeyInput+0x8c>
				}
			}
		}
	}
}
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000010 	.word	0x20000010
 8000330:	20000000 	.word	0x20000000
 8000334:	20000020 	.word	0x20000020
 8000338:	40010800 	.word	0x40010800
 800033c:	40010c00 	.word	0x40010c00
 8000340:	20000030 	.word	0x20000030
 8000344:	20000040 	.word	0x20000040

08000348 <print>:

#include "fsm_automatic.h"
#include "global.h"
#include "i2c-lcd.h"

void print(){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	lcd_goto_XY(0, 0);
 800034c:	2100      	movs	r1, #0
 800034e:	2000      	movs	r0, #0
 8000350:	f000 fd12 	bl	8000d78 <lcd_goto_XY>
	lcd_send_string(buffer1);
 8000354:	4805      	ldr	r0, [pc, #20]	; (800036c <print+0x24>)
 8000356:	f000 fcf3 	bl	8000d40 <lcd_send_string>
	lcd_goto_XY(1, 0);
 800035a:	2100      	movs	r1, #0
 800035c:	2001      	movs	r0, #1
 800035e:	f000 fd0b 	bl	8000d78 <lcd_goto_XY>
	lcd_send_string(buffer2);
 8000362:	4803      	ldr	r0, [pc, #12]	; (8000370 <print+0x28>)
 8000364:	f000 fcec 	bl	8000d40 <lcd_send_string>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	2000025c 	.word	0x2000025c
 8000370:	20000248 	.word	0x20000248

08000374 <Reset>:

void Reset(){
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	en0 = 1; en1 = 0; en2 = 1; en3 = 0;
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <Reset+0x80>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <Reset+0x84>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <Reset+0x88>)
 8000386:	2201      	movs	r2, #1
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <Reset+0x8c>)
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
	i_1 = max_Red;
 8000390:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <Reset+0x90>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <Reset+0x94>)
 8000396:	6013      	str	r3, [r2, #0]
	j_1 = max_Yellow;
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <Reset+0x98>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <Reset+0x9c>)
 800039e:	6013      	str	r3, [r2, #0]
	t_1 = max_Green;
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <Reset+0xa0>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <Reset+0xa4>)
 80003a6:	6013      	str	r3, [r2, #0]
	i_2 = max_Red;
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <Reset+0x90>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a1b      	ldr	r2, [pc, #108]	; (800041c <Reset+0xa8>)
 80003ae:	6013      	str	r3, [r2, #0]
	j_2 = max_Yellow;
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <Reset+0x98>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <Reset+0xac>)
 80003b6:	6013      	str	r3, [r2, #0]
	t_2 = max_Green;
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <Reset+0xa0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a19      	ldr	r2, [pc, #100]	; (8000424 <Reset+0xb0>)
 80003be:	6013      	str	r3, [r2, #0]
	test = 1; r = 1; dem = 2;
 80003c0:	4b19      	ldr	r3, [pc, #100]	; (8000428 <Reset+0xb4>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	4b19      	ldr	r3, [pc, #100]	; (800042c <Reset+0xb8>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <Reset+0xbc>)
 80003ce:	2202      	movs	r2, #2
 80003d0:	601a      	str	r2, [r3, #0]
	turn = 0;
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <Reset+0xc0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
	counter = 0, counter2 = 1;
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <Reset+0xc4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <Reset+0xc8>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	601a      	str	r2, [r3, #0]
	bool = 0;
 80003e4:	4b16      	ldr	r3, [pc, #88]	; (8000440 <Reset+0xcc>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	20000050 	.word	0x20000050
 80003f8:	20000140 	.word	0x20000140
 80003fc:	20000054 	.word	0x20000054
 8000400:	20000144 	.word	0x20000144
 8000404:	20000080 	.word	0x20000080
 8000408:	2000005c 	.word	0x2000005c
 800040c:	20000084 	.word	0x20000084
 8000410:	20000060 	.word	0x20000060
 8000414:	20000088 	.word	0x20000088
 8000418:	20000064 	.word	0x20000064
 800041c:	20000068 	.word	0x20000068
 8000420:	2000006c 	.word	0x2000006c
 8000424:	20000070 	.word	0x20000070
 8000428:	20000074 	.word	0x20000074
 800042c:	20000078 	.word	0x20000078
 8000430:	2000007c 	.word	0x2000007c
 8000434:	20000150 	.word	0x20000150
 8000438:	2000014c 	.word	0x2000014c
 800043c:	20000058 	.word	0x20000058
 8000440:	20000148 	.word	0x20000148

08000444 <case1>:

void case1() {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	switch(counter){
 8000448:	4b8e      	ldr	r3, [pc, #568]	; (8000684 <case1+0x240>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b02      	cmp	r3, #2
 800044e:	d05b      	beq.n	8000508 <case1+0xc4>
 8000450:	2b02      	cmp	r3, #2
 8000452:	f300 8086 	bgt.w	8000562 <case1+0x11e>
 8000456:	2b00      	cmp	r3, #0
 8000458:	d002      	beq.n	8000460 <case1+0x1c>
 800045a:	2b01      	cmp	r3, #1
 800045c:	d02a      	beq.n	80004b4 <case1+0x70>
 800045e:	e080      	b.n	8000562 <case1+0x11e>
	case 0:
		LED_RED_1();
 8000460:	f000 fcac 	bl	8000dbc <LED_RED_1>
		LED_RED_3();
 8000464:	f000 fd10 	bl	8000e88 <LED_RED_3>
		if(i_1 <= 9){
 8000468:	4b87      	ldr	r3, [pc, #540]	; (8000688 <case1+0x244>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b09      	cmp	r3, #9
 800046e:	dc07      	bgt.n	8000480 <case1+0x3c>
			sprintf(buffer1, "Traffic 1: %d ", i_1);
 8000470:	4b85      	ldr	r3, [pc, #532]	; (8000688 <case1+0x244>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	4985      	ldr	r1, [pc, #532]	; (800068c <case1+0x248>)
 8000478:	4885      	ldr	r0, [pc, #532]	; (8000690 <case1+0x24c>)
 800047a:	f003 fd53 	bl	8003f24 <siprintf>
 800047e:	e006      	b.n	800048e <case1+0x4a>
		}else{
			sprintf(buffer1, "Traffic 1: %d", i_1);
 8000480:	4b81      	ldr	r3, [pc, #516]	; (8000688 <case1+0x244>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	461a      	mov	r2, r3
 8000486:	4983      	ldr	r1, [pc, #524]	; (8000694 <case1+0x250>)
 8000488:	4881      	ldr	r0, [pc, #516]	; (8000690 <case1+0x24c>)
 800048a:	f003 fd4b 	bl	8003f24 <siprintf>
		}

		i_1--;
 800048e:	4b7e      	ldr	r3, [pc, #504]	; (8000688 <case1+0x244>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	3b01      	subs	r3, #1
 8000494:	4a7c      	ldr	r2, [pc, #496]	; (8000688 <case1+0x244>)
 8000496:	6013      	str	r3, [r2, #0]
		if(i_1 == 0) {
 8000498:	4b7b      	ldr	r3, [pc, #492]	; (8000688 <case1+0x244>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d15b      	bne.n	8000558 <case1+0x114>
			i_1 = max_Red;
 80004a0:	4b7d      	ldr	r3, [pc, #500]	; (8000698 <case1+0x254>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a78      	ldr	r2, [pc, #480]	; (8000688 <case1+0x244>)
 80004a6:	6013      	str	r3, [r2, #0]
			counter++;
 80004a8:	4b76      	ldr	r3, [pc, #472]	; (8000684 <case1+0x240>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	3301      	adds	r3, #1
 80004ae:	4a75      	ldr	r2, [pc, #468]	; (8000684 <case1+0x240>)
 80004b0:	6013      	str	r3, [r2, #0]
		}
		break;
 80004b2:	e051      	b.n	8000558 <case1+0x114>
	case 1:
		LED_GREEN_1();
 80004b4:	f000 fc92 	bl	8000ddc <LED_GREEN_1>
		LED_GREEN_3();
 80004b8:	f000 fcf8 	bl	8000eac <LED_GREEN_3>
		if(t_1 <= 9){
 80004bc:	4b77      	ldr	r3, [pc, #476]	; (800069c <case1+0x258>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b09      	cmp	r3, #9
 80004c2:	dc07      	bgt.n	80004d4 <case1+0x90>
			sprintf(buffer1, "Traffic 1: %d ", t_1);
 80004c4:	4b75      	ldr	r3, [pc, #468]	; (800069c <case1+0x258>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	461a      	mov	r2, r3
 80004ca:	4970      	ldr	r1, [pc, #448]	; (800068c <case1+0x248>)
 80004cc:	4870      	ldr	r0, [pc, #448]	; (8000690 <case1+0x24c>)
 80004ce:	f003 fd29 	bl	8003f24 <siprintf>
 80004d2:	e006      	b.n	80004e2 <case1+0x9e>
		}else{
			sprintf(buffer1, "Traffic 1: %d", t_1);
 80004d4:	4b71      	ldr	r3, [pc, #452]	; (800069c <case1+0x258>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	496e      	ldr	r1, [pc, #440]	; (8000694 <case1+0x250>)
 80004dc:	486c      	ldr	r0, [pc, #432]	; (8000690 <case1+0x24c>)
 80004de:	f003 fd21 	bl	8003f24 <siprintf>
		}
		t_1--;
 80004e2:	4b6e      	ldr	r3, [pc, #440]	; (800069c <case1+0x258>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	4a6c      	ldr	r2, [pc, #432]	; (800069c <case1+0x258>)
 80004ea:	6013      	str	r3, [r2, #0]
		if(t_1 == 0) {
 80004ec:	4b6b      	ldr	r3, [pc, #428]	; (800069c <case1+0x258>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d133      	bne.n	800055c <case1+0x118>
			t_1 = max_Green;
 80004f4:	4b6a      	ldr	r3, [pc, #424]	; (80006a0 <case1+0x25c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a68      	ldr	r2, [pc, #416]	; (800069c <case1+0x258>)
 80004fa:	6013      	str	r3, [r2, #0]
			counter++;
 80004fc:	4b61      	ldr	r3, [pc, #388]	; (8000684 <case1+0x240>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3301      	adds	r3, #1
 8000502:	4a60      	ldr	r2, [pc, #384]	; (8000684 <case1+0x240>)
 8000504:	6013      	str	r3, [r2, #0]
		}
		break;
 8000506:	e029      	b.n	800055c <case1+0x118>
	 case 2:
		LED_YELLOW_1();
 8000508:	f000 fc78 	bl	8000dfc <LED_YELLOW_1>
		LED_YELLOW_3();
 800050c:	f000 fce0 	bl	8000ed0 <LED_YELLOW_3>
		if(j_1 <= 9){
 8000510:	4b64      	ldr	r3, [pc, #400]	; (80006a4 <case1+0x260>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b09      	cmp	r3, #9
 8000516:	dc07      	bgt.n	8000528 <case1+0xe4>
			sprintf(buffer1, "Traffic 1: %d ", j_1);
 8000518:	4b62      	ldr	r3, [pc, #392]	; (80006a4 <case1+0x260>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	495b      	ldr	r1, [pc, #364]	; (800068c <case1+0x248>)
 8000520:	485b      	ldr	r0, [pc, #364]	; (8000690 <case1+0x24c>)
 8000522:	f003 fcff 	bl	8003f24 <siprintf>
 8000526:	e006      	b.n	8000536 <case1+0xf2>
		}else{
			sprintf(buffer1, "Traffic 1: %d", j_1);
 8000528:	4b5e      	ldr	r3, [pc, #376]	; (80006a4 <case1+0x260>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4959      	ldr	r1, [pc, #356]	; (8000694 <case1+0x250>)
 8000530:	4857      	ldr	r0, [pc, #348]	; (8000690 <case1+0x24c>)
 8000532:	f003 fcf7 	bl	8003f24 <siprintf>
		}
		j_1--;
 8000536:	4b5b      	ldr	r3, [pc, #364]	; (80006a4 <case1+0x260>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3b01      	subs	r3, #1
 800053c:	4a59      	ldr	r2, [pc, #356]	; (80006a4 <case1+0x260>)
 800053e:	6013      	str	r3, [r2, #0]
		if(j_1 == 0) {
 8000540:	4b58      	ldr	r3, [pc, #352]	; (80006a4 <case1+0x260>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d10b      	bne.n	8000560 <case1+0x11c>
			j_1 = max_Yellow;
 8000548:	4b57      	ldr	r3, [pc, #348]	; (80006a8 <case1+0x264>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a55      	ldr	r2, [pc, #340]	; (80006a4 <case1+0x260>)
 800054e:	6013      	str	r3, [r2, #0]
			counter = 0;
 8000550:	4b4c      	ldr	r3, [pc, #304]	; (8000684 <case1+0x240>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
		}
		break;
 8000556:	e003      	b.n	8000560 <case1+0x11c>
		break;
 8000558:	bf00      	nop
 800055a:	e002      	b.n	8000562 <case1+0x11e>
		break;
 800055c:	bf00      	nop
 800055e:	e000      	b.n	8000562 <case1+0x11e>
		break;
 8000560:	bf00      	nop
	}

	switch(counter2){
 8000562:	4b52      	ldr	r3, [pc, #328]	; (80006ac <case1+0x268>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b02      	cmp	r3, #2
 8000568:	d05b      	beq.n	8000622 <case1+0x1de>
 800056a:	2b02      	cmp	r3, #2
 800056c:	f300 8086 	bgt.w	800067c <case1+0x238>
 8000570:	2b00      	cmp	r3, #0
 8000572:	d002      	beq.n	800057a <case1+0x136>
 8000574:	2b01      	cmp	r3, #1
 8000576:	d02a      	beq.n	80005ce <case1+0x18a>
 8000578:	e080      	b.n	800067c <case1+0x238>
	case 0:
		LED_RED_2();
 800057a:	f000 fc4f 	bl	8000e1c <LED_RED_2>
		LED_RED_4();
 800057e:	f000 fcb9 	bl	8000ef4 <LED_RED_4>
		if(i_2 <= 9){
 8000582:	4b4b      	ldr	r3, [pc, #300]	; (80006b0 <case1+0x26c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b09      	cmp	r3, #9
 8000588:	dc07      	bgt.n	800059a <case1+0x156>
			sprintf(buffer2, "Traffic 2: %d ", i_2);
 800058a:	4b49      	ldr	r3, [pc, #292]	; (80006b0 <case1+0x26c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	4948      	ldr	r1, [pc, #288]	; (80006b4 <case1+0x270>)
 8000592:	4849      	ldr	r0, [pc, #292]	; (80006b8 <case1+0x274>)
 8000594:	f003 fcc6 	bl	8003f24 <siprintf>
 8000598:	e006      	b.n	80005a8 <case1+0x164>
		}else{
			sprintf(buffer2, "Traffic 2: %d", i_2);
 800059a:	4b45      	ldr	r3, [pc, #276]	; (80006b0 <case1+0x26c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	4946      	ldr	r1, [pc, #280]	; (80006bc <case1+0x278>)
 80005a2:	4845      	ldr	r0, [pc, #276]	; (80006b8 <case1+0x274>)
 80005a4:	f003 fcbe 	bl	8003f24 <siprintf>
		}
		i_2--;
 80005a8:	4b41      	ldr	r3, [pc, #260]	; (80006b0 <case1+0x26c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	4a40      	ldr	r2, [pc, #256]	; (80006b0 <case1+0x26c>)
 80005b0:	6013      	str	r3, [r2, #0]
		if(i_2 == 0) {
 80005b2:	4b3f      	ldr	r3, [pc, #252]	; (80006b0 <case1+0x26c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d15b      	bne.n	8000672 <case1+0x22e>
			i_2 = max_Red;
 80005ba:	4b37      	ldr	r3, [pc, #220]	; (8000698 <case1+0x254>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a3c      	ldr	r2, [pc, #240]	; (80006b0 <case1+0x26c>)
 80005c0:	6013      	str	r3, [r2, #0]
			counter2++;
 80005c2:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <case1+0x268>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a38      	ldr	r2, [pc, #224]	; (80006ac <case1+0x268>)
 80005ca:	6013      	str	r3, [r2, #0]
		}
		break;
 80005cc:	e051      	b.n	8000672 <case1+0x22e>
	case 1:
		LED_GREEN_2();
 80005ce:	f000 fc37 	bl	8000e40 <LED_GREEN_2>
		LED_GREEN_4();
 80005d2:	f000 fca1 	bl	8000f18 <LED_GREEN_4>
		if(t_2 <= 9){
 80005d6:	4b3a      	ldr	r3, [pc, #232]	; (80006c0 <case1+0x27c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b09      	cmp	r3, #9
 80005dc:	dc07      	bgt.n	80005ee <case1+0x1aa>
			sprintf(buffer2, "Traffic 2: %d ", t_2);
 80005de:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <case1+0x27c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4933      	ldr	r1, [pc, #204]	; (80006b4 <case1+0x270>)
 80005e6:	4834      	ldr	r0, [pc, #208]	; (80006b8 <case1+0x274>)
 80005e8:	f003 fc9c 	bl	8003f24 <siprintf>
 80005ec:	e006      	b.n	80005fc <case1+0x1b8>
		}else{
			sprintf(buffer2, "Traffic 2: %d", t_2);
 80005ee:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <case1+0x27c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	4931      	ldr	r1, [pc, #196]	; (80006bc <case1+0x278>)
 80005f6:	4830      	ldr	r0, [pc, #192]	; (80006b8 <case1+0x274>)
 80005f8:	f003 fc94 	bl	8003f24 <siprintf>
		}
		t_2--;
 80005fc:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <case1+0x27c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3b01      	subs	r3, #1
 8000602:	4a2f      	ldr	r2, [pc, #188]	; (80006c0 <case1+0x27c>)
 8000604:	6013      	str	r3, [r2, #0]
		if(t_2 == 0) {
 8000606:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <case1+0x27c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d133      	bne.n	8000676 <case1+0x232>
			t_2 = max_Green;
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <case1+0x25c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a2b      	ldr	r2, [pc, #172]	; (80006c0 <case1+0x27c>)
 8000614:	6013      	str	r3, [r2, #0]
			counter2++;
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <case1+0x268>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	4a23      	ldr	r2, [pc, #140]	; (80006ac <case1+0x268>)
 800061e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000620:	e029      	b.n	8000676 <case1+0x232>
	case 2:
		LED_YELLOW_2();
 8000622:	f000 fc1f 	bl	8000e64 <LED_YELLOW_2>
		LED_YELLOW_4();
 8000626:	f000 fc89 	bl	8000f3c <LED_YELLOW_4>
		if(j_2 <= 9){
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <case1+0x280>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b09      	cmp	r3, #9
 8000630:	dc07      	bgt.n	8000642 <case1+0x1fe>
			sprintf(buffer2, "Traffic 2: %d ", j_2);
 8000632:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <case1+0x280>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	491e      	ldr	r1, [pc, #120]	; (80006b4 <case1+0x270>)
 800063a:	481f      	ldr	r0, [pc, #124]	; (80006b8 <case1+0x274>)
 800063c:	f003 fc72 	bl	8003f24 <siprintf>
 8000640:	e006      	b.n	8000650 <case1+0x20c>
		}else{
			sprintf(buffer2, "Traffic 2: %d", j_2);
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <case1+0x280>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	491c      	ldr	r1, [pc, #112]	; (80006bc <case1+0x278>)
 800064a:	481b      	ldr	r0, [pc, #108]	; (80006b8 <case1+0x274>)
 800064c:	f003 fc6a 	bl	8003f24 <siprintf>
		}
		j_2--;
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <case1+0x280>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3b01      	subs	r3, #1
 8000656:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <case1+0x280>)
 8000658:	6013      	str	r3, [r2, #0]
		if(j_2 == 0) {
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <case1+0x280>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d10b      	bne.n	800067a <case1+0x236>
			j_2 = max_Yellow;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <case1+0x264>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <case1+0x280>)
 8000668:	6013      	str	r3, [r2, #0]
			counter2 = 0;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <case1+0x268>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000670:	e003      	b.n	800067a <case1+0x236>
		break;
 8000672:	bf00      	nop
 8000674:	e002      	b.n	800067c <case1+0x238>
		break;
 8000676:	bf00      	nop
 8000678:	e000      	b.n	800067c <case1+0x238>
		break;
 800067a:	bf00      	nop
	}
	print();
 800067c:	f7ff fe64 	bl	8000348 <print>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000014c 	.word	0x2000014c
 8000688:	2000005c 	.word	0x2000005c
 800068c:	080047b4 	.word	0x080047b4
 8000690:	2000025c 	.word	0x2000025c
 8000694:	080047c4 	.word	0x080047c4
 8000698:	20000080 	.word	0x20000080
 800069c:	20000064 	.word	0x20000064
 80006a0:	20000088 	.word	0x20000088
 80006a4:	20000060 	.word	0x20000060
 80006a8:	20000084 	.word	0x20000084
 80006ac:	20000058 	.word	0x20000058
 80006b0:	20000068 	.word	0x20000068
 80006b4:	080047d4 	.word	0x080047d4
 80006b8:	20000248 	.word	0x20000248
 80006bc:	080047e4 	.word	0x080047e4
 80006c0:	20000070 	.word	0x20000070
 80006c4:	2000006c 	.word	0x2000006c

080006c8 <case3>:

void case3() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	switch(counter){
 80006cc:	4b3c      	ldr	r3, [pc, #240]	; (80007c0 <case3+0xf8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d028      	beq.n	8000726 <case3+0x5e>
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	dc35      	bgt.n	8000744 <case3+0x7c>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <case3+0x1a>
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d011      	beq.n	8000704 <case3+0x3c>
 80006e0:	e030      	b.n	8000744 <case3+0x7c>
	case 0:
		LED_RED_1();
 80006e2:	f000 fb6b 	bl	8000dbc <LED_RED_1>
		LED_RED_3();
 80006e6:	f000 fbcf 	bl	8000e88 <LED_RED_3>
		sprintf(buffer1, "Den 1: %d", i_1);
 80006ea:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <case3+0xfc>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4935      	ldr	r1, [pc, #212]	; (80007c8 <case3+0x100>)
 80006f2:	4836      	ldr	r0, [pc, #216]	; (80007cc <case3+0x104>)
 80006f4:	f003 fc16 	bl	8003f24 <siprintf>
		counter++;
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <case3+0xf8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <case3+0xf8>)
 8000700:	6013      	str	r3, [r2, #0]
		break;
 8000702:	e01f      	b.n	8000744 <case3+0x7c>
	case 1:
		LED_GREEN_1();
 8000704:	f000 fb6a 	bl	8000ddc <LED_GREEN_1>
		LED_GREEN_3();
 8000708:	f000 fbd0 	bl	8000eac <LED_GREEN_3>
		sprintf(buffer1, "Den 1: %d", t_1);
 800070c:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <case3+0x108>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	492d      	ldr	r1, [pc, #180]	; (80007c8 <case3+0x100>)
 8000714:	482d      	ldr	r0, [pc, #180]	; (80007cc <case3+0x104>)
 8000716:	f003 fc05 	bl	8003f24 <siprintf>
		counter++;
 800071a:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <case3+0xf8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <case3+0xf8>)
 8000722:	6013      	str	r3, [r2, #0]
		break;
 8000724:	e00e      	b.n	8000744 <case3+0x7c>
	 case 2:
		LED_YELLOW_1();
 8000726:	f000 fb69 	bl	8000dfc <LED_YELLOW_1>
		LED_YELLOW_3();
 800072a:	f000 fbd1 	bl	8000ed0 <LED_YELLOW_3>
		sprintf(buffer1, "Den 1: %d", j_1);
 800072e:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <case3+0x10c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	4924      	ldr	r1, [pc, #144]	; (80007c8 <case3+0x100>)
 8000736:	4825      	ldr	r0, [pc, #148]	; (80007cc <case3+0x104>)
 8000738:	f003 fbf4 	bl	8003f24 <siprintf>
		counter = 0;
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <case3+0xf8>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
		break;
 8000742:	bf00      	nop
	}

	switch(counter2){
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <case3+0x110>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d028      	beq.n	800079e <case3+0xd6>
 800074c:	2b02      	cmp	r3, #2
 800074e:	dc35      	bgt.n	80007bc <case3+0xf4>
 8000750:	2b00      	cmp	r3, #0
 8000752:	d002      	beq.n	800075a <case3+0x92>
 8000754:	2b01      	cmp	r3, #1
 8000756:	d011      	beq.n	800077c <case3+0xb4>
		LED_YELLOW_4();
		sprintf(buffer2, "Den 2: %d", j_2);
		counter2 = 0;
		break;
	}
}
 8000758:	e030      	b.n	80007bc <case3+0xf4>
		LED_RED_2();
 800075a:	f000 fb5f 	bl	8000e1c <LED_RED_2>
		LED_RED_4();
 800075e:	f000 fbc9 	bl	8000ef4 <LED_RED_4>
		sprintf(buffer2, "Den 2: %d", i_2);
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <case3+0x114>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	491d      	ldr	r1, [pc, #116]	; (80007e0 <case3+0x118>)
 800076a:	481e      	ldr	r0, [pc, #120]	; (80007e4 <case3+0x11c>)
 800076c:	f003 fbda 	bl	8003f24 <siprintf>
		counter2++;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <case3+0x110>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <case3+0x110>)
 8000778:	6013      	str	r3, [r2, #0]
		break;
 800077a:	e01f      	b.n	80007bc <case3+0xf4>
		LED_GREEN_2();
 800077c:	f000 fb60 	bl	8000e40 <LED_GREEN_2>
		LED_GREEN_4();
 8000780:	f000 fbca 	bl	8000f18 <LED_GREEN_4>
		sprintf(buffer2, "Den 2: %d", t_2);
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <case3+0x120>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4915      	ldr	r1, [pc, #84]	; (80007e0 <case3+0x118>)
 800078c:	4815      	ldr	r0, [pc, #84]	; (80007e4 <case3+0x11c>)
 800078e:	f003 fbc9 	bl	8003f24 <siprintf>
		counter2++;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <case3+0x110>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <case3+0x110>)
 800079a:	6013      	str	r3, [r2, #0]
		break;
 800079c:	e00e      	b.n	80007bc <case3+0xf4>
		LED_YELLOW_2();
 800079e:	f000 fb61 	bl	8000e64 <LED_YELLOW_2>
		LED_YELLOW_4();
 80007a2:	f000 fbcb 	bl	8000f3c <LED_YELLOW_4>
		sprintf(buffer2, "Den 2: %d", j_2);
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <case3+0x124>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	490c      	ldr	r1, [pc, #48]	; (80007e0 <case3+0x118>)
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <case3+0x11c>)
 80007b0:	f003 fbb8 	bl	8003f24 <siprintf>
		counter2 = 0;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <case3+0x110>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
		break;
 80007ba:	bf00      	nop
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000014c 	.word	0x2000014c
 80007c4:	2000005c 	.word	0x2000005c
 80007c8:	080047f4 	.word	0x080047f4
 80007cc:	2000025c 	.word	0x2000025c
 80007d0:	20000064 	.word	0x20000064
 80007d4:	20000060 	.word	0x20000060
 80007d8:	20000058 	.word	0x20000058
 80007dc:	20000068 	.word	0x20000068
 80007e0:	08004800 	.word	0x08004800
 80007e4:	20000248 	.word	0x20000248
 80007e8:	20000070 	.word	0x20000070
 80007ec:	2000006c 	.word	0x2000006c

080007f0 <case2>:
#include <stdio.h>
#include <stdlib.h>

int temp, test_1 = 0;

int case2(int mode,int a){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	if(en0 == 1)
 80007fa:	4b5d      	ldr	r3, [pc, #372]	; (8000970 <case2+0x180>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d127      	bne.n	8000852 <case2+0x62>
		switch(mode){
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d01b      	beq.n	8000840 <case2+0x50>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b03      	cmp	r3, #3
 800080c:	dc23      	bgt.n	8000856 <case2+0x66>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d003      	beq.n	800081c <case2+0x2c>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d009      	beq.n	800082e <case2+0x3e>
 800081a:	e01c      	b.n	8000856 <case2+0x66>
		case 1:
			LED_RED_1();
 800081c:	f000 face 	bl	8000dbc <LED_RED_1>
			LED_RED_2();
 8000820:	f000 fafc 	bl	8000e1c <LED_RED_2>
			LED_RED_3();
 8000824:	f000 fb30 	bl	8000e88 <LED_RED_3>
			LED_RED_4();
 8000828:	f000 fb64 	bl	8000ef4 <LED_RED_4>
			break;
 800082c:	e013      	b.n	8000856 <case2+0x66>
		case 2:
			LED_YELLOW_1();
 800082e:	f000 fae5 	bl	8000dfc <LED_YELLOW_1>
			LED_YELLOW_2();
 8000832:	f000 fb17 	bl	8000e64 <LED_YELLOW_2>
			LED_YELLOW_3();
 8000836:	f000 fb4b 	bl	8000ed0 <LED_YELLOW_3>
			LED_YELLOW_4();
 800083a:	f000 fb7f 	bl	8000f3c <LED_YELLOW_4>
			break;
 800083e:	e00a      	b.n	8000856 <case2+0x66>
		case 3:
			LED_GREEN_1();
 8000840:	f000 facc 	bl	8000ddc <LED_GREEN_1>
			LED_GREEN_2();
 8000844:	f000 fafc 	bl	8000e40 <LED_GREEN_2>
			LED_GREEN_3();
 8000848:	f000 fb30 	bl	8000eac <LED_GREEN_3>
			LED_GREEN_4();
 800084c:	f000 fb64 	bl	8000f18 <LED_GREEN_4>
			break;
 8000850:	e001      	b.n	8000856 <case2+0x66>
		}
	else{
		off_LED();
 8000852:	f000 fb85 	bl	8000f60 <off_LED>
	}

	if(button_flag[1] == 1){
 8000856:	4b47      	ldr	r3, [pc, #284]	; (8000974 <case2+0x184>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d10b      	bne.n	8000876 <case2+0x86>
	  button_flag[1] = 0;
 800085e:	4b45      	ldr	r3, [pc, #276]	; (8000974 <case2+0x184>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
	  if(a == 99){
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b63      	cmp	r3, #99	; 0x63
 8000868:	d102      	bne.n	8000870 <case2+0x80>
		  a = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	e002      	b.n	8000876 <case2+0x86>
	  }else
		  a++;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	603b      	str	r3, [r7, #0]
	}
	if(button_flag[3] == 1){
 8000876:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <case2+0x184>)
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d105      	bne.n	800088a <case2+0x9a>
	  button_flag[3] = 0;
 800087e:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <case2+0x184>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
	  a--;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3b01      	subs	r3, #1
 8000888:	603b      	str	r3, [r7, #0]
	}
	if(a == 0){
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <case2+0xa4>
	  a = 99;
 8000890:	2363      	movs	r3, #99	; 0x63
 8000892:	603b      	str	r3, [r7, #0]
	}
	if(button_flag[2] == 1){
 8000894:	4b37      	ldr	r3, [pc, #220]	; (8000974 <case2+0x184>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d11b      	bne.n	80008d4 <case2+0xe4>
	  button_flag[2] = 0;
 800089c:	4b35      	ldr	r3, [pc, #212]	; (8000974 <case2+0x184>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
	  switch(mode){
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d011      	beq.n	80008cc <case2+0xdc>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	dc13      	bgt.n	80008d6 <case2+0xe6>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d003      	beq.n	80008bc <case2+0xcc>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d004      	beq.n	80008c4 <case2+0xd4>
 80008ba:	e00c      	b.n	80008d6 <case2+0xe6>
	  case 1:
		  prev_max_Red = a;
 80008bc:	4a2e      	ldr	r2, [pc, #184]	; (8000978 <case2+0x188>)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	6013      	str	r3, [r2, #0]
		  break;
 80008c2:	e008      	b.n	80008d6 <case2+0xe6>
	  case 2:
		  prev_max_Yellow = a;
 80008c4:	4a2d      	ldr	r2, [pc, #180]	; (800097c <case2+0x18c>)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	6013      	str	r3, [r2, #0]
		  break;
 80008ca:	e004      	b.n	80008d6 <case2+0xe6>
	  case 3:
		  prev_max_Green = a;
 80008cc:	4a2c      	ldr	r2, [pc, #176]	; (8000980 <case2+0x190>)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	6013      	str	r3, [r2, #0]
		  break;
 80008d2:	e000      	b.n	80008d6 <case2+0xe6>
	  }
	}
 80008d4:	bf00      	nop
	lcd_goto_XY(0, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 fa4d 	bl	8000d78 <lcd_goto_XY>
	char buffer[20];
	if(mode == 1){
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d111      	bne.n	8000908 <case2+0x118>
		if(a <= 9){
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	2b09      	cmp	r3, #9
 80008e8:	dc07      	bgt.n	80008fa <case2+0x10a>
			sprintf(buffer, "Time Red: %d ", a);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	4924      	ldr	r1, [pc, #144]	; (8000984 <case2+0x194>)
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fb16 	bl	8003f24 <siprintf>
 80008f8:	e006      	b.n	8000908 <case2+0x118>
		}else{
			sprintf(buffer, "Time Red: %d", a);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	4921      	ldr	r1, [pc, #132]	; (8000988 <case2+0x198>)
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fb0e 	bl	8003f24 <siprintf>
		}
	}

	if(mode == 2){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d111      	bne.n	8000932 <case2+0x142>
		if(a <= 9){
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	2b09      	cmp	r3, #9
 8000912:	dc07      	bgt.n	8000924 <case2+0x134>
			sprintf(buffer, "Time Yellow: %d ", a);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	491c      	ldr	r1, [pc, #112]	; (800098c <case2+0x19c>)
 800091c:	4618      	mov	r0, r3
 800091e:	f003 fb01 	bl	8003f24 <siprintf>
 8000922:	e006      	b.n	8000932 <case2+0x142>
		}else{
			sprintf(buffer, "Time Yellow: %d", a);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	4919      	ldr	r1, [pc, #100]	; (8000990 <case2+0x1a0>)
 800092c:	4618      	mov	r0, r3
 800092e:	f003 faf9 	bl	8003f24 <siprintf>
		}
	}

	if(mode == 3){
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b03      	cmp	r3, #3
 8000936:	d111      	bne.n	800095c <case2+0x16c>
		if(a <= 9){
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	2b09      	cmp	r3, #9
 800093c:	dc07      	bgt.n	800094e <case2+0x15e>
			sprintf(buffer, "Time Green: %d ", a);
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	4913      	ldr	r1, [pc, #76]	; (8000994 <case2+0x1a4>)
 8000946:	4618      	mov	r0, r3
 8000948:	f003 faec 	bl	8003f24 <siprintf>
 800094c:	e006      	b.n	800095c <case2+0x16c>
		}else{
			sprintf(buffer, "Time Green: %d", a);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	4910      	ldr	r1, [pc, #64]	; (8000998 <case2+0x1a8>)
 8000956:	4618      	mov	r0, r3
 8000958:	f003 fae4 	bl	8003f24 <siprintf>
		}
	}
	lcd_send_string(buffer);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f9ed 	bl	8000d40 <lcd_send_string>
	return a;
 8000966:	683b      	ldr	r3, [r7, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000050 	.word	0x20000050
 8000974:	20000124 	.word	0x20000124
 8000978:	2000008c 	.word	0x2000008c
 800097c:	20000090 	.word	0x20000090
 8000980:	20000094 	.word	0x20000094
 8000984:	0800480c 	.word	0x0800480c
 8000988:	0800481c 	.word	0x0800481c
 800098c:	0800482c 	.word	0x0800482c
 8000990:	08004840 	.word	0x08004840
 8000994:	08004850 	.word	0x08004850
 8000998:	08004860 	.word	0x08004860

0800099c <fsm_manual>:


void fsm_manual(){
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
	if(button_flag[0] == 1){
 80009a2:	4b85      	ldr	r3, [pc, #532]	; (8000bb8 <fsm_manual+0x21c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d157      	bne.n	8000a5a <fsm_manual+0xbe>
		lcd_clear_display();
 80009aa:	f000 f9de 	bl	8000d6a <lcd_clear_display>
		button_flag[0] = 0;
 80009ae:	4b82      	ldr	r3, [pc, #520]	; (8000bb8 <fsm_manual+0x21c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
		mode++;
 80009b4:	4b81      	ldr	r3, [pc, #516]	; (8000bbc <fsm_manual+0x220>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a80      	ldr	r2, [pc, #512]	; (8000bbc <fsm_manual+0x220>)
 80009bc:	6013      	str	r3, [r2, #0]
		test_1 = 1;
 80009be:	4b80      	ldr	r3, [pc, #512]	; (8000bc0 <fsm_manual+0x224>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
		if(mode == 4 || mode == 6) {
 80009c4:	4b7d      	ldr	r3, [pc, #500]	; (8000bbc <fsm_manual+0x220>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d003      	beq.n	80009d4 <fsm_manual+0x38>
 80009cc:	4b7b      	ldr	r3, [pc, #492]	; (8000bbc <fsm_manual+0x220>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d139      	bne.n	8000a48 <fsm_manual+0xac>
			SCH_Delete_Task(2);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 fdd7 	bl	8001588 <SCH_Delete_Task>
			lcd_clear_display();
 80009da:	f000 f9c6 	bl	8000d6a <lcd_clear_display>
			if(prev_max_Red == prev_max_Green + prev_max_Yellow){
 80009de:	4b79      	ldr	r3, [pc, #484]	; (8000bc4 <fsm_manual+0x228>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b79      	ldr	r3, [pc, #484]	; (8000bc8 <fsm_manual+0x22c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	441a      	add	r2, r3
 80009e8:	4b78      	ldr	r3, [pc, #480]	; (8000bcc <fsm_manual+0x230>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d10c      	bne.n	8000a0a <fsm_manual+0x6e>
				max_Red = prev_max_Red;
 80009f0:	4b76      	ldr	r3, [pc, #472]	; (8000bcc <fsm_manual+0x230>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a76      	ldr	r2, [pc, #472]	; (8000bd0 <fsm_manual+0x234>)
 80009f6:	6013      	str	r3, [r2, #0]
				max_Green = prev_max_Green;
 80009f8:	4b72      	ldr	r3, [pc, #456]	; (8000bc4 <fsm_manual+0x228>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a75      	ldr	r2, [pc, #468]	; (8000bd4 <fsm_manual+0x238>)
 80009fe:	6013      	str	r3, [r2, #0]
				max_Yellow = prev_max_Yellow;
 8000a00:	4b71      	ldr	r3, [pc, #452]	; (8000bc8 <fsm_manual+0x22c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a74      	ldr	r2, [pc, #464]	; (8000bd8 <fsm_manual+0x23c>)
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	e018      	b.n	8000a3c <fsm_manual+0xa0>
			}else if(prev_max_Red > prev_max_Yellow){
 8000a0a:	4b70      	ldr	r3, [pc, #448]	; (8000bcc <fsm_manual+0x230>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b6e      	ldr	r3, [pc, #440]	; (8000bc8 <fsm_manual+0x22c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	dd12      	ble.n	8000a3c <fsm_manual+0xa0>
				prev_max_Green = prev_max_Red - prev_max_Yellow;
 8000a16:	4b6d      	ldr	r3, [pc, #436]	; (8000bcc <fsm_manual+0x230>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b6b      	ldr	r3, [pc, #428]	; (8000bc8 <fsm_manual+0x22c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	4a68      	ldr	r2, [pc, #416]	; (8000bc4 <fsm_manual+0x228>)
 8000a22:	6013      	str	r3, [r2, #0]
				max_Red = prev_max_Red;
 8000a24:	4b69      	ldr	r3, [pc, #420]	; (8000bcc <fsm_manual+0x230>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a69      	ldr	r2, [pc, #420]	; (8000bd0 <fsm_manual+0x234>)
 8000a2a:	6013      	str	r3, [r2, #0]
				max_Green = prev_max_Green;
 8000a2c:	4b65      	ldr	r3, [pc, #404]	; (8000bc4 <fsm_manual+0x228>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a68      	ldr	r2, [pc, #416]	; (8000bd4 <fsm_manual+0x238>)
 8000a32:	6013      	str	r3, [r2, #0]
				max_Yellow = prev_max_Yellow;
 8000a34:	4b64      	ldr	r3, [pc, #400]	; (8000bc8 <fsm_manual+0x22c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a67      	ldr	r2, [pc, #412]	; (8000bd8 <fsm_manual+0x23c>)
 8000a3a:	6013      	str	r3, [r2, #0]
			}
			Reset();
 8000a3c:	f7ff fc9a 	bl	8000374 <Reset>
			mode = 0;
 8000a40:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <fsm_manual+0x220>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
		if(mode == 4 || mode == 6) {
 8000a46:	e008      	b.n	8000a5a <fsm_manual+0xbe>
		}
		else if(mode == 1){
 8000a48:	4b5c      	ldr	r3, [pc, #368]	; (8000bbc <fsm_manual+0x220>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d104      	bne.n	8000a5a <fsm_manual+0xbe>
			SCH_Add_Task(setup_Led7SEG, 0, 50);
 8000a50:	2232      	movs	r2, #50	; 0x32
 8000a52:	2100      	movs	r1, #0
 8000a54:	4861      	ldr	r0, [pc, #388]	; (8000bdc <fsm_manual+0x240>)
 8000a56:	f000 fc8f 	bl	8001378 <SCH_Add_Task>
		}
	}
	if(mode != 0 && mode != 6){
 8000a5a:	4b58      	ldr	r3, [pc, #352]	; (8000bbc <fsm_manual+0x220>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d016      	beq.n	8000a90 <fsm_manual+0xf4>
 8000a62:	4b56      	ldr	r3, [pc, #344]	; (8000bbc <fsm_manual+0x220>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d012      	beq.n	8000a90 <fsm_manual+0xf4>
		lcd_goto_XY(1, 0);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f000 f983 	bl	8000d78 <lcd_goto_XY>
		char buffer[20];
		sprintf(buffer, "Mode: %d", mode + 1);
 8000a72:	4b52      	ldr	r3, [pc, #328]	; (8000bbc <fsm_manual+0x220>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4958      	ldr	r1, [pc, #352]	; (8000be0 <fsm_manual+0x244>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 fa50 	bl	8003f24 <siprintf>
		lcd_send_string(buffer);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f959 	bl	8000d40 <lcd_send_string>
	if(mode != 0 && mode != 6){
 8000a8e:	e010      	b.n	8000ab2 <fsm_manual+0x116>
	}else if(mode == 6){
 8000a90:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <fsm_manual+0x220>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b06      	cmp	r3, #6
 8000a96:	d10c      	bne.n	8000ab2 <fsm_manual+0x116>
		lcd_goto_XY(1, 0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f96c 	bl	8000d78 <lcd_goto_XY>
		char buffer[20];
		sprintf(buffer, "Mode manual");
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4950      	ldr	r1, [pc, #320]	; (8000be4 <fsm_manual+0x248>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fa3d 	bl	8003f24 <siprintf>
		lcd_send_string(buffer);
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f947 	bl	8000d40 <lcd_send_string>
	}
	switch(mode){
 8000ab2:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <fsm_manual+0x220>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d85c      	bhi.n	8000b74 <fsm_manual+0x1d8>
 8000aba:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <fsm_manual+0x124>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000ad1 	.word	0x08000ad1
 8000ac4:	08000ae9 	.word	0x08000ae9
 8000ac8:	08000b17 	.word	0x08000b17
 8000acc:	08000b45 	.word	0x08000b45
	case 0:
	  if(timer_flag[0] == 1){
 8000ad0:	4b45      	ldr	r3, [pc, #276]	; (8000be8 <fsm_manual+0x24c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d14c      	bne.n	8000b72 <fsm_manual+0x1d6>
		  case1();
 8000ad8:	f7ff fcb4 	bl	8000444 <case1>
		  setTimer(0, 1000);
 8000adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f000 fdaf 	bl	8001644 <setTimer>
	  }
	  break;
 8000ae6:	e044      	b.n	8000b72 <fsm_manual+0x1d6>
	case 1:
		if(test_1 == 1){
 8000ae8:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <fsm_manual+0x224>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d106      	bne.n	8000afe <fsm_manual+0x162>
			temp = max_Red;
 8000af0:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <fsm_manual+0x234>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a3d      	ldr	r2, [pc, #244]	; (8000bec <fsm_manual+0x250>)
 8000af6:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 8000af8:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <fsm_manual+0x224>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp);
 8000afe:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <fsm_manual+0x220>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a3a      	ldr	r2, [pc, #232]	; (8000bec <fsm_manual+0x250>)
 8000b04:	6812      	ldr	r2, [r2, #0]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe71 	bl	80007f0 <case2>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a36      	ldr	r2, [pc, #216]	; (8000bec <fsm_manual+0x250>)
 8000b12:	6013      	str	r3, [r2, #0]
		break;
 8000b14:	e02e      	b.n	8000b74 <fsm_manual+0x1d8>
	case 2:
		if(test_1 == 1){
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <fsm_manual+0x224>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d106      	bne.n	8000b2c <fsm_manual+0x190>
			temp = max_Yellow;
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <fsm_manual+0x23c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a32      	ldr	r2, [pc, #200]	; (8000bec <fsm_manual+0x250>)
 8000b24:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <fsm_manual+0x224>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp);
 8000b2c:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <fsm_manual+0x220>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a2e      	ldr	r2, [pc, #184]	; (8000bec <fsm_manual+0x250>)
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fe5a 	bl	80007f0 <case2>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a2b      	ldr	r2, [pc, #172]	; (8000bec <fsm_manual+0x250>)
 8000b40:	6013      	str	r3, [r2, #0]
		break;
 8000b42:	e017      	b.n	8000b74 <fsm_manual+0x1d8>
	case 3:
		if(test_1 == 1){
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <fsm_manual+0x224>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d106      	bne.n	8000b5a <fsm_manual+0x1be>
			temp = max_Green;
 8000b4c:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <fsm_manual+0x238>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <fsm_manual+0x250>)
 8000b52:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <fsm_manual+0x224>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp);
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <fsm_manual+0x220>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a23      	ldr	r2, [pc, #140]	; (8000bec <fsm_manual+0x250>)
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe43 	bl	80007f0 <case2>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <fsm_manual+0x250>)
 8000b6e:	6013      	str	r3, [r2, #0]
		break;
 8000b70:	e000      	b.n	8000b74 <fsm_manual+0x1d8>
	  break;
 8000b72:	bf00      	nop
	}
	if(PRESSED_STATE_0 == 1){
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <fsm_manual+0x254>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d109      	bne.n	8000b90 <fsm_manual+0x1f4>
		lcd_clear_display();
 8000b7c:	f000 f8f5 	bl	8000d6a <lcd_clear_display>
		case3();
 8000b80:	f7ff fda2 	bl	80006c8 <case3>
		mode = 5;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <fsm_manual+0x220>)
 8000b86:	2205      	movs	r2, #5
 8000b88:	601a      	str	r2, [r3, #0]
		PRESSED_STATE_0 = 0;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <fsm_manual+0x254>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
	}
	if(mode == 5){
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <fsm_manual+0x220>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b05      	cmp	r3, #5
 8000b96:	d10a      	bne.n	8000bae <fsm_manual+0x212>
		if(button_flag[1] == 1){
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <fsm_manual+0x21c>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d106      	bne.n	8000bae <fsm_manual+0x212>
			lcd_clear_display();
 8000ba0:	f000 f8e3 	bl	8000d6a <lcd_clear_display>
			case3();
 8000ba4:	f7ff fd90 	bl	80006c8 <case3>
			button_flag[1] = 0;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <fsm_manual+0x21c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
		}
	}
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000124 	.word	0x20000124
 8000bbc:	2000013c 	.word	0x2000013c
 8000bc0:	20000138 	.word	0x20000138
 8000bc4:	20000094 	.word	0x20000094
 8000bc8:	20000090 	.word	0x20000090
 8000bcc:	2000008c 	.word	0x2000008c
 8000bd0:	20000080 	.word	0x20000080
 8000bd4:	20000088 	.word	0x20000088
 8000bd8:	20000084 	.word	0x20000084
 8000bdc:	08000bf5 	.word	0x08000bf5
 8000be0:	08004870 	.word	0x08004870
 8000be4:	0800487c 	.word	0x0800487c
 8000be8:	20000180 	.word	0x20000180
 8000bec:	20000244 	.word	0x20000244
 8000bf0:	20000134 	.word	0x20000134

08000bf4 <setup_Led7SEG>:

#include "fsm_setting.h"

int mode = 0, en0 = 1, en1 = 0, en2 = 1, en3 = 0;

void setup_Led7SEG(){
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
	switch(en0){
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <setup_Led7SEG+0x2c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <setup_Led7SEG+0x12>
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d004      	beq.n	8000c0e <setup_Led7SEG+0x1a>
		break;
	case 1:
		en0 = 0;
		break;
	}
}
 8000c04:	e007      	b.n	8000c16 <setup_Led7SEG+0x22>
		en0 = 1;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <setup_Led7SEG+0x2c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]
		break;
 8000c0c:	e003      	b.n	8000c16 <setup_Led7SEG+0x22>
		en0 = 0;
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <setup_Led7SEG+0x2c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
		break;
 8000c14:	bf00      	nop
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000050 	.word	0x20000050

08000c24 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f023 030f 	bic.w	r3, r3, #15
 8000c34:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	f043 030c 	orr.w	r3, r3, #12
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	f043 030c 	orr.w	r3, r3, #12
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c5a:	7bbb      	ldrb	r3, [r7, #14]
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c64:	f107 0208 	add.w	r2, r7, #8
 8000c68:	2364      	movs	r3, #100	; 0x64
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	2142      	movs	r1, #66	; 0x42
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <lcd_send_cmd+0x5c>)
 8000c72:	f001 fba9 	bl	80023c8 <HAL_I2C_Master_Transmit>
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000270 	.word	0x20000270

08000c84 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f023 030f 	bic.w	r3, r3, #15
 8000c94:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	f043 030d 	orr.w	r3, r3, #13
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	f043 0309 	orr.w	r3, r3, #9
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000cb0:	7bbb      	ldrb	r3, [r7, #14]
 8000cb2:	f043 030d 	orr.w	r3, r3, #13
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
 8000cbc:	f043 0309 	orr.w	r3, r3, #9
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cc4:	f107 0208 	add.w	r2, r7, #8
 8000cc8:	2364      	movs	r3, #100	; 0x64
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	2304      	movs	r3, #4
 8000cce:	2142      	movs	r1, #66	; 0x42
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <lcd_send_data+0x5c>)
 8000cd2:	f001 fb79 	bl	80023c8 <HAL_I2C_Master_Transmit>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000270 	.word	0x20000270

08000ce4 <lcd_init>:

void lcd_init (void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000ce8:	2033      	movs	r0, #51	; 0x33
 8000cea:	f7ff ff9b 	bl	8000c24 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000cee:	2032      	movs	r0, #50	; 0x32
 8000cf0:	f7ff ff98 	bl	8000c24 <lcd_send_cmd>
	HAL_Delay(50);
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f000 ff3d 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000cfa:	2028      	movs	r0, #40	; 0x28
 8000cfc:	f7ff ff92 	bl	8000c24 <lcd_send_cmd>
	HAL_Delay(50);
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f000 ff37 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff ff8c 	bl	8000c24 <lcd_send_cmd>
	HAL_Delay(50);
 8000d0c:	2032      	movs	r0, #50	; 0x32
 8000d0e:	f000 ff31 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000d12:	2006      	movs	r0, #6
 8000d14:	f7ff ff86 	bl	8000c24 <lcd_send_cmd>
	HAL_Delay(50);
 8000d18:	2032      	movs	r0, #50	; 0x32
 8000d1a:	f000 ff2b 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000d1e:	200c      	movs	r0, #12
 8000d20:	f7ff ff80 	bl	8000c24 <lcd_send_cmd>
	HAL_Delay(50);
 8000d24:	2032      	movs	r0, #50	; 0x32
 8000d26:	f000 ff25 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f7ff ff7a 	bl	8000c24 <lcd_send_cmd>
	HAL_Delay(50);
 8000d30:	2032      	movs	r0, #50	; 0x32
 8000d32:	f000 ff1f 	bl	8001b74 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000d36:	2080      	movs	r0, #128	; 0x80
 8000d38:	f7ff ff74 	bl	8000c24 <lcd_send_cmd>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d48:	e006      	b.n	8000d58 <lcd_send_string+0x18>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff96 	bl	8000c84 <lcd_send_data>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1f4      	bne.n	8000d4a <lcd_send_string+0xa>
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff ff58 	bl	8000c24 <lcd_send_cmd>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d108      	bne.n	8000d9a <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	337f      	adds	r3, #127	; 0x7f
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e008      	b.n	8000dac <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3340      	adds	r3, #64	; 0x40
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff38 	bl	8000c24 <lcd_send_cmd>
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <LED_RED_1>:
 */

#include "led_traffic.h"


void LED_RED_1(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <LED_RED_1+0x1c>)
 8000dc6:	f001 f9a2 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2120      	movs	r1, #32
 8000dce:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <LED_RED_1+0x1c>)
 8000dd0:	f001 f99d 	bl	800210e <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <LED_GREEN_1>:

void LED_GREEN_1(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2108      	movs	r1, #8
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <LED_GREEN_1+0x1c>)
 8000de6:	f001 f992 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2120      	movs	r1, #32
 8000dee:	4802      	ldr	r0, [pc, #8]	; (8000df8 <LED_GREEN_1+0x1c>)
 8000df0:	f001 f98d 	bl	800210e <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40010c00 	.word	0x40010c00

08000dfc <LED_YELLOW_1>:

void LED_YELLOW_1(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2108      	movs	r1, #8
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <LED_YELLOW_1+0x1c>)
 8000e06:	f001 f982 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	4802      	ldr	r0, [pc, #8]	; (8000e18 <LED_YELLOW_1+0x1c>)
 8000e10:	f001 f97d 	bl	800210e <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <LED_RED_2>:

void LED_RED_2(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2110      	movs	r1, #16
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <LED_RED_2+0x20>)
 8000e26:	f001 f972 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <LED_RED_2+0x20>)
 8000e32:	f001 f96c 	bl	800210e <HAL_GPIO_WritePin>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40010c00 	.word	0x40010c00

08000e40 <LED_GREEN_2>:

void LED_GREEN_2(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2110      	movs	r1, #16
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <LED_GREEN_2+0x20>)
 8000e4a:	f001 f960 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <LED_GREEN_2+0x20>)
 8000e56:	f001 f95a 	bl	800210e <HAL_GPIO_WritePin>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40010c00 	.word	0x40010c00

08000e64 <LED_YELLOW_2>:

void LED_YELLOW_2(void){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <LED_YELLOW_2+0x20>)
 8000e6e:	f001 f94e 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <LED_YELLOW_2+0x20>)
 8000e7a:	f001 f948 	bl	800210e <HAL_GPIO_WritePin>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40010c00 	.word	0x40010c00

08000e88 <LED_RED_3>:

void LED_RED_3(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <LED_RED_3+0x20>)
 8000e94:	f001 f93b 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9e:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <LED_RED_3+0x20>)
 8000ea0:	f001 f935 	bl	800210e <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40010800 	.word	0x40010800

08000eac <LED_GREEN_3>:

void LED_GREEN_3(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <LED_GREEN_3+0x20>)
 8000eb8:	f001 f929 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec2:	4802      	ldr	r0, [pc, #8]	; (8000ecc <LED_GREEN_3+0x20>)
 8000ec4:	f001 f923 	bl	800210e <HAL_GPIO_WritePin>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <LED_YELLOW_3>:

void LED_YELLOW_3(void){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <LED_YELLOW_3+0x20>)
 8000edc:	f001 f917 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <LED_YELLOW_3+0x20>)
 8000ee8:	f001 f911 	bl	800210e <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <LED_RED_4>:

void LED_RED_4(void) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <LED_RED_4+0x1c>)
 8000efe:	f001 f906 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_GPIO_Port, h_Pin, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <LED_RED_4+0x20>)
 8000f08:	f001 f901 	bl	800210e <HAL_GPIO_WritePin>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40010c00 	.word	0x40010c00

08000f18 <LED_GREEN_4>:

void LED_GREEN_4(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <LED_GREEN_4+0x1c>)
 8000f22:	f001 f8f4 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_GPIO_Port, h_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2140      	movs	r1, #64	; 0x40
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <LED_GREEN_4+0x20>)
 8000f2c:	f001 f8ef 	bl	800210e <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40011000 	.word	0x40011000
 8000f38:	40010c00 	.word	0x40010c00

08000f3c <LED_YELLOW_4>:

void LED_YELLOW_4(void){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <LED_YELLOW_4+0x1c>)
 8000f46:	f001 f8e2 	bl	800210e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_GPIO_Port, h_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <LED_YELLOW_4+0x20>)
 8000f50:	f001 f8dd 	bl	800210e <HAL_GPIO_WritePin>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	40010c00 	.word	0x40010c00

08000f60 <off_LED>:


void off_LED(void){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2108      	movs	r1, #8
 8000f68:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <off_LED+0x60>)
 8000f6a:	f001 f8d0 	bl	800210e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <off_LED+0x60>)
 8000f74:	f001 f8cb 	bl	800210e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <off_LED+0x60>)
 8000f7e:	f001 f8c6 	bl	800210e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <off_LED+0x60>)
 8000f8a:	f001 f8c0 	bl	800210e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <off_LED+0x64>)
 8000f96:	f001 f8ba 	bl	800210e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <off_LED+0x64>)
 8000fa2:	f001 f8b4 	bl	800210e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <off_LED+0x68>)
 8000fac:	f001 f8af 	bl	800210e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(h_GPIO_Port, h_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2140      	movs	r1, #64	; 0x40
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <off_LED+0x60>)
 8000fb6:	f001 f8aa 	bl	800210e <HAL_GPIO_WritePin>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40010c00 	.word	0x40010c00
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40011000 	.word	0x40011000

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f000 fd6e 	bl	8001ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f81c 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 f92a 	bl	8001230 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fdc:	f000 f888 	bl	80010f0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000fe0:	f000 f858 	bl	8001094 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000fe4:	f000 f8d0 	bl	8001188 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fe8:	f000 f8f8 	bl	80011dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000fec:	f7ff fe7a 	bl	8000ce4 <lcd_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <main+0x3c>)
 8000ff2:	f002 f99f 	bl	8003334 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(fsm_manual, 0, 50);
 8000ff6:	2232      	movs	r2, #50	; 0x32
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <main+0x40>)
 8000ffc:	f000 f9bc 	bl	8001378 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispath_Tasks();
 8001000:	f000 fa70 	bl	80014e4 <SCH_Dispath_Tasks>
 8001004:	e7fc      	b.n	8001000 <main+0x34>
 8001006:	bf00      	nop
 8001008:	200002d0 	.word	0x200002d0
 800100c:	0800099d 	.word	0x0800099d

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b090      	sub	sp, #64	; 0x40
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	2228      	movs	r2, #40	; 0x28
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f002 ff78 	bl	8003f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001036:	2301      	movs	r3, #1
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103a:	2310      	movs	r3, #16
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103e:	2302      	movs	r3, #2
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001042:	2300      	movs	r3, #0
 8001044:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001046:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fd11 	bl	8002a78 <HAL_RCC_OscConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800105c:	f000 f986 	bl	800136c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001060:	230f      	movs	r3, #15
 8001062:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001064:	2302      	movs	r3, #2
 8001066:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001070:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2102      	movs	r1, #2
 800107a:	4618      	mov	r0, r3
 800107c:	f001 ff7c 	bl	8002f78 <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001086:	f000 f971 	bl	800136c <Error_Handler>
  }
}
 800108a:	bf00      	nop
 800108c:	3740      	adds	r7, #64	; 0x40
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x50>)
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <MX_I2C1_Init+0x54>)
 800109c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <MX_I2C1_Init+0x58>)
 80010a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010d2:	f001 f835 	bl	8002140 <HAL_I2C_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010dc:	f000 f946 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000270 	.word	0x20000270
 80010e8:	40005400 	.word	0x40005400
 80010ec:	000186a0 	.word	0x000186a0

080010f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_TIM2_Init+0x94>)
 800110e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MX_TIM2_Init+0x94>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_TIM2_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <MX_TIM2_Init+0x94>)
 8001122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001126:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_TIM2_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <MX_TIM2_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001134:	4813      	ldr	r0, [pc, #76]	; (8001184 <MX_TIM2_Init+0x94>)
 8001136:	f002 f8ad 	bl	8003294 <HAL_TIM_Base_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001140:	f000 f914 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001148:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	4619      	mov	r1, r3
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <MX_TIM2_Init+0x94>)
 8001152:	f002 fa31 	bl	80035b8 <HAL_TIM_ConfigClockSource>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800115c:	f000 f906 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_TIM2_Init+0x94>)
 800116e:	f002 fc13 	bl	8003998 <HAL_TIMEx_MasterConfigSynchronization>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001178:	f000 f8f8 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200002d0 	.word	0x200002d0

08001188 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <MX_USART2_UART_Init+0x50>)
 8001190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 8001194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f002 fc5a 	bl	8003a78 <HAL_UART_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ca:	f000 f8cf 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200001fc 	.word	0x200001fc
 80011d8:	40004400 	.word	0x40004400

080011dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_USART3_UART_Init+0x50>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 8001214:	f002 fc30 	bl	8003a78 <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800121e:	f000 f8a5 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200001b4 	.word	0x200001b4
 800122c:	40004800 	.word	0x40004800

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <MX_GPIO_Init+0x110>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a3d      	ldr	r2, [pc, #244]	; (8001340 <MX_GPIO_Init+0x110>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <MX_GPIO_Init+0x110>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b38      	ldr	r3, [pc, #224]	; (8001340 <MX_GPIO_Init+0x110>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a37      	ldr	r2, [pc, #220]	; (8001340 <MX_GPIO_Init+0x110>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <MX_GPIO_Init+0x110>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <MX_GPIO_Init+0x110>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a31      	ldr	r2, [pc, #196]	; (8001340 <MX_GPIO_Init+0x110>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <MX_GPIO_Init+0x110>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|e_Pin|f_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001292:	482c      	ldr	r0, [pc, #176]	; (8001344 <MX_GPIO_Init+0x114>)
 8001294:	f000 ff3b 	bl	800210e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, d_Pin|a_Pin|c_Pin|b_Pin
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 800129e:	482a      	ldr	r0, [pc, #168]	; (8001348 <MX_GPIO_Init+0x118>)
 80012a0:	f000 ff35 	bl	800210e <HAL_GPIO_WritePin>
                          |h_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	4828      	ldr	r0, [pc, #160]	; (800134c <MX_GPIO_Init+0x11c>)
 80012aa:	f000 ff30 	bl	800210e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80012ae:	2313      	movs	r3, #19
 80012b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4619      	mov	r1, r3
 80012c0:	4820      	ldr	r0, [pc, #128]	; (8001344 <MX_GPIO_Init+0x114>)
 80012c2:	f000 fd89 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin e_Pin f_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|e_Pin|f_Pin;
 80012c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80012ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4619      	mov	r1, r3
 80012de:	4819      	ldr	r0, [pc, #100]	; (8001344 <MX_GPIO_Init+0x114>)
 80012e0:	f000 fd7a 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button4_Pin */
  GPIO_InitStruct.Pin = Button4_Pin;
 80012e4:	2301      	movs	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button4_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4619      	mov	r1, r3
 80012f6:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_GPIO_Init+0x118>)
 80012f8:	f000 fd6e 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : d_Pin a_Pin c_Pin b_Pin
                           h_Pin PB7 */
  GPIO_InitStruct.Pin = d_Pin|a_Pin|c_Pin|b_Pin
 80012fc:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8001300:	613b      	str	r3, [r7, #16]
                          |h_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <MX_GPIO_Init+0x118>)
 8001316:	f000 fd5f 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : g_Pin */
  GPIO_InitStruct.Pin = g_Pin;
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(g_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_GPIO_Init+0x11c>)
 8001332:	f000 fd51 	bl	8001dd8 <HAL_GPIO_Init>

}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00
 800134c:	40011000 	.word	0x40011000

08001350 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	timerRun();
 8001358:	f000 f9b4 	bl	80016c4 <timerRun>
	getKeyInput();
 800135c:	f7fe ff34 	bl	80001c8 <getKeyInput>
	SCH_Update();
 8001360:	f000 f860 	bl	8001424 <SCH_Update>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>
	...

08001378 <SCH_Add_Task>:

void SCH_Init(void){
	current_index_task = 0;
}

void SCH_Add_Task(void(*pFuntion)(), uint32_t DELAY, uint32_t PERIOD){
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <SCH_Add_Task+0xa4>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b27      	cmp	r3, #39	; 0x27
 800138a:	d842      	bhi.n	8001412 <SCH_Add_Task+0x9a>
		SCH_Tasks_G[current_index_task].pTask = pFuntion;
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <SCH_Add_Task+0xa4>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	4a23      	ldr	r2, [pc, #140]	; (8001420 <SCH_Add_Task+0xa8>)
 8001394:	460b      	mov	r3, r1
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[current_index_task].Delay = DELAY;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <SCH_Add_Task+0xa4>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <SCH_Add_Task+0xa8>)
 80013aa:	460b      	mov	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3304      	adds	r3, #4
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[current_index_task].Period = PERIOD;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <SCH_Add_Task+0xa4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <SCH_Add_Task+0xa8>)
 80013c2:	460b      	mov	r3, r1
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3308      	adds	r3, #8
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[current_index_task].RunMe = 0;
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <SCH_Add_Task+0xa4>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <SCH_Add_Task+0xa8>)
 80013da:	460b      	mov	r3, r1
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	330c      	adds	r3, #12
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]

		SCH_Tasks_G[current_index_task].TaskID = current_index_task;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <SCH_Add_Task+0xa4>)
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <SCH_Add_Task+0xa4>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	4610      	mov	r0, r2
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SCH_Add_Task+0xa8>)
 80013f8:	460b      	mov	r3, r1
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3310      	adds	r3, #16
 8001404:	6018      	str	r0, [r3, #0]
		current_index_task++;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <SCH_Add_Task+0xa4>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b03      	ldr	r3, [pc, #12]	; (800141c <SCH_Add_Task+0xa4>)
 8001410:	701a      	strb	r2, [r3, #0]
	}
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	20000154 	.word	0x20000154
 8001420:	2000031c 	.word	0x2000031c

08001424 <SCH_Update>:

void SCH_Update(void){
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task;i++){
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	e048      	b.n	80014c2 <SCH_Update+0x9e>
		if(SCH_Tasks_G[i].Delay > 0){
 8001430:	492a      	ldr	r1, [pc, #168]	; (80014dc <SCH_Update+0xb8>)
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	3304      	adds	r3, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d013      	beq.n	800146e <SCH_Update+0x4a>
			SCH_Tasks_G[i].Delay--;
 8001446:	4925      	ldr	r1, [pc, #148]	; (80014dc <SCH_Update+0xb8>)
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	3304      	adds	r3, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	1e59      	subs	r1, r3, #1
 800145a:	4820      	ldr	r0, [pc, #128]	; (80014dc <SCH_Update+0xb8>)
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4403      	add	r3, r0
 8001468:	3304      	adds	r3, #4
 800146a:	6019      	str	r1, [r3, #0]
 800146c:	e026      	b.n	80014bc <SCH_Update+0x98>
		}else{
			SCH_Tasks_G[i].Delay = SCH_Tasks_G[i].Period;
 800146e:	491b      	ldr	r1, [pc, #108]	; (80014dc <SCH_Update+0xb8>)
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	3308      	adds	r3, #8
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	4816      	ldr	r0, [pc, #88]	; (80014dc <SCH_Update+0xb8>)
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4403      	add	r3, r0
 800148e:	3304      	adds	r3, #4
 8001490:	6019      	str	r1, [r3, #0]
			SCH_Tasks_G[i].RunMe += 1;
 8001492:	4912      	ldr	r1, [pc, #72]	; (80014dc <SCH_Update+0xb8>)
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	330c      	adds	r3, #12
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b2d8      	uxtb	r0, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <SCH_Update+0xb8>)
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	330c      	adds	r3, #12
 80014b8:	4602      	mov	r2, r0
 80014ba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task;i++){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <SCH_Update+0xbc>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4293      	cmp	r3, r2
 80014cc:	dbb0      	blt.n	8001430 <SCH_Update+0xc>
		}
	}
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000031c 	.word	0x2000031c
 80014e0:	20000154 	.word	0x20000154

080014e4 <SCH_Dispath_Tasks>:

void SCH_Dispath_Tasks(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	e03a      	b.n	8001566 <SCH_Dispath_Tasks+0x82>
		if(SCH_Tasks_G[i].RunMe > 0){
 80014f0:	4923      	ldr	r1, [pc, #140]	; (8001580 <SCH_Dispath_Tasks+0x9c>)
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	330c      	adds	r3, #12
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d02c      	beq.n	8001560 <SCH_Dispath_Tasks+0x7c>
			SCH_Tasks_G[i].RunMe--;
 8001506:	491e      	ldr	r1, [pc, #120]	; (8001580 <SCH_Dispath_Tasks+0x9c>)
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	330c      	adds	r3, #12
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	3b01      	subs	r3, #1
 800151a:	b2d8      	uxtb	r0, r3
 800151c:	4918      	ldr	r1, [pc, #96]	; (8001580 <SCH_Dispath_Tasks+0x9c>)
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	330c      	adds	r3, #12
 800152c:	4602      	mov	r2, r0
 800152e:	701a      	strb	r2, [r3, #0]
			(*SCH_Tasks_G[i].pTask)();
 8001530:	4913      	ldr	r1, [pc, #76]	; (8001580 <SCH_Dispath_Tasks+0x9c>)
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4798      	blx	r3
			if( SCH_Tasks_G[i].Period == 0){
 8001542:	490f      	ldr	r1, [pc, #60]	; (8001580 <SCH_Dispath_Tasks+0x9c>)
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3308      	adds	r3, #8
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d103      	bne.n	8001560 <SCH_Dispath_Tasks+0x7c>
				SCH_Delete_Task(i) ;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f814 	bl	8001588 <SCH_Delete_Task>
	for(int i = 0; i < current_index_task; i++){
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3301      	adds	r3, #1
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <SCH_Dispath_Tasks+0xa0>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4293      	cmp	r3, r2
 8001570:	dbbe      	blt.n	80014f0 <SCH_Dispath_Tasks+0xc>
			}
		}
	}

	SCH_Report_Status();
 8001572:	f000 f861 	bl	8001638 <SCH_Report_Status>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000031c 	.word	0x2000031c
 8001584:	20000154 	.word	0x20000154

08001588 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t Task_ID){
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	unsigned char Return_code;
	if( SCH_Tasks_G[Task_ID].pTask == 0) {
 8001590:	4923      	ldr	r1, [pc, #140]	; (8001620 <SCH_Delete_Task+0x98>)
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d107      	bne.n	80015b4 <SCH_Delete_Task+0x2c>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <SCH_Delete_Task+0x9c>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <SCH_Delete_Task+0xa0>)
 80015aa:	701a      	strb	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <SCH_Delete_Task+0xa4>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e002      	b.n	80015ba <SCH_Delete_Task+0x32>
	} else {
		Return_code = RETURN_NORMAL;
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <SCH_Delete_Task+0xa8>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	73fb      	strb	r3, [r7, #15]
	}
	SCH_Tasks_G[Task_ID].pTask = 0x0000 ;
 80015ba:	4919      	ldr	r1, [pc, #100]	; (8001620 <SCH_Delete_Task+0x98>)
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
	SCH_Tasks_G[Task_ID].Delay = 0;
 80015cc:	4914      	ldr	r1, [pc, #80]	; (8001620 <SCH_Delete_Task+0x98>)
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3304      	adds	r3, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
	SCH_Tasks_G[Task_ID].Period = 0;
 80015e0:	490f      	ldr	r1, [pc, #60]	; (8001620 <SCH_Delete_Task+0x98>)
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3308      	adds	r3, #8
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
	SCH_Tasks_G[Task_ID].RunMe = 0;
 80015f4:	490a      	ldr	r1, [pc, #40]	; (8001620 <SCH_Delete_Task+0x98>)
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	330c      	adds	r3, #12
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
	current_index_task--;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <SCH_Delete_Task+0xac>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <SCH_Delete_Task+0xac>)
 8001612:	701a      	strb	r2, [r3, #0]
	return Return_code ; // return status
 8001614:	7bfb      	ldrb	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	2000031c 	.word	0x2000031c
 8001624:	200002c6 	.word	0x200002c6
 8001628:	20000155 	.word	0x20000155
 800162c:	200002c4 	.word	0x200002c4
 8001630:	200002c7 	.word	0x200002c7
 8001634:	20000154 	.word	0x20000154

08001638 <SCH_Report_Status>:

void SCH_Report_Status( void ) {
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
				Error_code_G = 0;
			}
		}
	}
	#endif
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};
int TICK = 10;
void setTimer(int i, int duration){
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	timer_flag[i] = 0;
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <setTimer+0x28>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2100      	movs	r1, #0
 8001654:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[i] = duration ;
 8001658:	4905      	ldr	r1, [pc, #20]	; (8001670 <setTimer+0x2c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	20000180 	.word	0x20000180
 8001670:	20000158 	.word	0x20000158

08001674 <timer_run>:

void timer_run(int i){
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if(timer_counter[i] > 0){
 800167c:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <timer_run+0x48>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	2b00      	cmp	r3, #0
 8001686:	dd13      	ble.n	80016b0 <timer_run+0x3c>
		timer_counter[i]--;
 8001688:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <timer_run+0x48>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	1e5a      	subs	r2, r3, #1
 8001692:	490a      	ldr	r1, [pc, #40]	; (80016bc <timer_run+0x48>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0) timer_flag[i] = 1;
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <timer_run+0x48>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	dc04      	bgt.n	80016b0 <timer_run+0x3c>
 80016a6:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <timer_run+0x4c>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2101      	movs	r1, #1
 80016ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000158 	.word	0x20000158
 80016c0:	20000180 	.word	0x20000180

080016c4 <timerRun>:

void timerRun(){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	timer_run(0);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff ffd3 	bl	8001674 <timer_run>
	timer_run(1);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff ffd0 	bl	8001674 <timer_run>
	timer_run(2);
 80016d4:	2002      	movs	r0, #2
 80016d6:	f7ff ffcd 	bl	8001674 <timer_run>
	timer_run(3);
 80016da:	2003      	movs	r0, #3
 80016dc:	f7ff ffca 	bl	8001674 <timer_run>
	timer_run(4);
 80016e0:	2004      	movs	r0, #4
 80016e2:	f7ff ffc7 	bl	8001674 <timer_run>
	timer_run(5);
 80016e6:	2005      	movs	r0, #5
 80016e8:	f7ff ffc4 	bl	8001674 <timer_run>
	timer_run(6);
 80016ec:	2006      	movs	r0, #6
 80016ee:	f7ff ffc1 	bl	8001674 <timer_run>
	timer_run(7);
 80016f2:	2007      	movs	r0, #7
 80016f4:	f7ff ffbe 	bl	8001674 <timer_run>
	timer_run(8);
 80016f8:	2008      	movs	r0, #8
 80016fa:	f7ff ffbb 	bl	8001674 <timer_run>
	timer_run(9);
 80016fe:	2009      	movs	r0, #9
 8001700:	f7ff ffb8 	bl	8001674 <timer_run>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_MspInit+0x5c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4a14      	ldr	r2, [pc, #80]	; (8001764 <HAL_MspInit+0x5c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6193      	str	r3, [r2, #24]
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_MspInit+0x5c>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_MspInit+0x5c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HAL_MspInit+0x5c>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	61d3      	str	r3, [r2, #28]
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_MspInit+0x5c>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_MspInit+0x60>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_MspInit+0x60>)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000

0800176c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <HAL_I2C_MspInit+0x90>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d132      	bne.n	80017f2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_I2C_MspInit+0x94>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_I2C_MspInit+0x94>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_I2C_MspInit+0x94>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017aa:	2312      	movs	r3, #18
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4812      	ldr	r0, [pc, #72]	; (8001804 <HAL_I2C_MspInit+0x98>)
 80017ba:	f000 fb0d 	bl	8001dd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_I2C_MspInit+0x9c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
 80017d4:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <HAL_I2C_MspInit+0x9c>)
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_I2C_MspInit+0x94>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_I2C_MspInit+0x94>)
 80017e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e4:	61d3      	str	r3, [r2, #28]
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_I2C_MspInit+0x94>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40005400 	.word	0x40005400
 8001800:	40021000 	.word	0x40021000
 8001804:	40010c00 	.word	0x40010c00
 8001808:	40010000 	.word	0x40010000

0800180c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181c:	d113      	bne.n	8001846 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_TIM_Base_MspInit+0x44>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_TIM_Base_MspInit+0x44>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_TIM_Base_MspInit+0x44>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	201c      	movs	r0, #28
 800183c:	f000 fa95 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001840:	201c      	movs	r0, #28
 8001842:	f000 faae 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a40      	ldr	r2, [pc, #256]	; (8001970 <HAL_UART_MspInit+0x11c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d130      	bne.n	80018d6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001874:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_UART_MspInit+0x120>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	4a3e      	ldr	r2, [pc, #248]	; (8001974 <HAL_UART_MspInit+0x120>)
 800187a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187e:	61d3      	str	r3, [r2, #28]
 8001880:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <HAL_UART_MspInit+0x120>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_UART_MspInit+0x120>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a38      	ldr	r2, [pc, #224]	; (8001974 <HAL_UART_MspInit+0x120>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b36      	ldr	r3, [pc, #216]	; (8001974 <HAL_UART_MspInit+0x120>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018a4:	2304      	movs	r3, #4
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	4830      	ldr	r0, [pc, #192]	; (8001978 <HAL_UART_MspInit+0x124>)
 80018b8:	f000 fa8e 	bl	8001dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018bc:	2308      	movs	r3, #8
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	482a      	ldr	r0, [pc, #168]	; (8001978 <HAL_UART_MspInit+0x124>)
 80018d0:	f000 fa82 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018d4:	e048      	b.n	8001968 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a28      	ldr	r2, [pc, #160]	; (800197c <HAL_UART_MspInit+0x128>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d143      	bne.n	8001968 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_UART_MspInit+0x120>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	4a23      	ldr	r2, [pc, #140]	; (8001974 <HAL_UART_MspInit+0x120>)
 80018e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ea:	61d3      	str	r3, [r2, #28]
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <HAL_UART_MspInit+0x120>)
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <HAL_UART_MspInit+0x120>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <HAL_UART_MspInit+0x120>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <HAL_UART_MspInit+0x120>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	4816      	ldr	r0, [pc, #88]	; (8001980 <HAL_UART_MspInit+0x12c>)
 8001926:	f000 fa57 	bl	8001dd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800192a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <HAL_UART_MspInit+0x12c>)
 8001940:	f000 fa4a 	bl	8001dd8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_UART_MspInit+0x130>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_UART_MspInit+0x130>)
 8001964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001966:	6053      	str	r3, [r2, #4]
}
 8001968:	bf00      	nop
 800196a:	3730      	adds	r7, #48	; 0x30
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40004400 	.word	0x40004400
 8001974:	40021000 	.word	0x40021000
 8001978:	40010800 	.word	0x40010800
 800197c:	40004800 	.word	0x40004800
 8001980:	40011000 	.word	0x40011000
 8001984:	40010000 	.word	0x40010000

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ce:	f000 f8b5 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM2_IRQHandler+0x10>)
 80019de:	f001 fcfb 	bl	80033d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200002d0 	.word	0x200002d0

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f002 fa50 	bl	8003ec0 <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20005000 	.word	0x20005000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	200001a8 	.word	0x200001a8
 8001a54:	20000650 	.word	0x20000650

08001a58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a64:	f7ff fff8 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a68:	480b      	ldr	r0, [pc, #44]	; (8001a98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a6a:	490c      	ldr	r1, [pc, #48]	; (8001a9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a6c:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a80:	4c09      	ldr	r4, [pc, #36]	; (8001aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f002 fa1d 	bl	8003ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a92:	f7ff fa9b 	bl	8000fcc <main>
  bx lr
 8001a96:	4770      	bx	lr
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001aa0:	080048f0 	.word	0x080048f0
  ldr r2, =_sbss
 8001aa4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001aa8:	20000650 	.word	0x20000650

08001aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC1_2_IRQHandler>
	...

08001ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_Init+0x28>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_Init+0x28>)
 8001aba:	f043 0310 	orr.w	r3, r3, #16
 8001abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 f947 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac6:	200f      	movs	r0, #15
 8001ac8:	f000 f808 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001acc:	f7ff fe1c 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x54>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x58>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f95f 	bl	8001dbe <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00e      	b.n	8001b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d80a      	bhi.n	8001b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f000 f927 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_InitTick+0x5c>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000098 	.word	0x20000098
 8001b34:	200000a0 	.word	0x200000a0
 8001b38:	2000009c 	.word	0x2000009c

08001b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_IncTick+0x1c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_IncTick+0x20>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <HAL_IncTick+0x20>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	200000a0 	.word	0x200000a0
 8001b5c:	2000063c 	.word	0x2000063c

08001b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;
 8001b64:	4b02      	ldr	r3, [pc, #8]	; (8001b70 <HAL_GetTick+0x10>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	2000063c 	.word	0x2000063c

08001b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff fff0 	bl	8001b60 <HAL_GetTick>
 8001b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d005      	beq.n	8001b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_Delay+0x44>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b9a:	bf00      	nop
 8001b9c:	f7ff ffe0 	bl	8001b60 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d8f7      	bhi.n	8001b9c <HAL_Delay+0x28>
  {
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200000a0 	.word	0x200000a0

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4906      	ldr	r1, [pc, #24]	; (8001c54 <__NVIC_EnableIRQ+0x34>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff90 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff2d 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff42 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff90 	bl	8001cac <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5f 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff35 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa2 	bl	8001d10 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b08b      	sub	sp, #44	; 0x2c
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dea:	e169      	b.n	80020c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dec:	2201      	movs	r2, #1
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	f040 8158 	bne.w	80020ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4a9a      	ldr	r2, [pc, #616]	; (8002078 <HAL_GPIO_Init+0x2a0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d05e      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e14:	4a98      	ldr	r2, [pc, #608]	; (8002078 <HAL_GPIO_Init+0x2a0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d875      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e1a:	4a98      	ldr	r2, [pc, #608]	; (800207c <HAL_GPIO_Init+0x2a4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d058      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e20:	4a96      	ldr	r2, [pc, #600]	; (800207c <HAL_GPIO_Init+0x2a4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d86f      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e26:	4a96      	ldr	r2, [pc, #600]	; (8002080 <HAL_GPIO_Init+0x2a8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d052      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e2c:	4a94      	ldr	r2, [pc, #592]	; (8002080 <HAL_GPIO_Init+0x2a8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d869      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e32:	4a94      	ldr	r2, [pc, #592]	; (8002084 <HAL_GPIO_Init+0x2ac>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d04c      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e38:	4a92      	ldr	r2, [pc, #584]	; (8002084 <HAL_GPIO_Init+0x2ac>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d863      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e3e:	4a92      	ldr	r2, [pc, #584]	; (8002088 <HAL_GPIO_Init+0x2b0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d046      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e44:	4a90      	ldr	r2, [pc, #576]	; (8002088 <HAL_GPIO_Init+0x2b0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d85d      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d82a      	bhi.n	8001ea4 <HAL_GPIO_Init+0xcc>
 8001e4e:	2b12      	cmp	r3, #18
 8001e50:	d859      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e52:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <HAL_GPIO_Init+0x80>)
 8001e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e58:	08001ed3 	.word	0x08001ed3
 8001e5c:	08001ead 	.word	0x08001ead
 8001e60:	08001ebf 	.word	0x08001ebf
 8001e64:	08001f01 	.word	0x08001f01
 8001e68:	08001f07 	.word	0x08001f07
 8001e6c:	08001f07 	.word	0x08001f07
 8001e70:	08001f07 	.word	0x08001f07
 8001e74:	08001f07 	.word	0x08001f07
 8001e78:	08001f07 	.word	0x08001f07
 8001e7c:	08001f07 	.word	0x08001f07
 8001e80:	08001f07 	.word	0x08001f07
 8001e84:	08001f07 	.word	0x08001f07
 8001e88:	08001f07 	.word	0x08001f07
 8001e8c:	08001f07 	.word	0x08001f07
 8001e90:	08001f07 	.word	0x08001f07
 8001e94:	08001f07 	.word	0x08001f07
 8001e98:	08001f07 	.word	0x08001f07
 8001e9c:	08001eb5 	.word	0x08001eb5
 8001ea0:	08001ec9 	.word	0x08001ec9
 8001ea4:	4a79      	ldr	r2, [pc, #484]	; (800208c <HAL_GPIO_Init+0x2b4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eaa:	e02c      	b.n	8001f06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e029      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	623b      	str	r3, [r7, #32]
          break;
 8001ebc:	e024      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	623b      	str	r3, [r7, #32]
          break;
 8001ec6:	e01f      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	330c      	adds	r3, #12
 8001ece:	623b      	str	r3, [r7, #32]
          break;
 8001ed0:	e01a      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eda:	2304      	movs	r3, #4
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e013      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	611a      	str	r2, [r3, #16]
          break;
 8001ef2:	e009      	b.n	8001f08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	615a      	str	r2, [r3, #20]
          break;
 8001efe:	e003      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
          break;
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          break;
 8001f06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d801      	bhi.n	8001f12 <HAL_GPIO_Init+0x13a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	e001      	b.n	8001f16 <HAL_GPIO_Init+0x13e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2bff      	cmp	r3, #255	; 0xff
 8001f1c:	d802      	bhi.n	8001f24 <HAL_GPIO_Init+0x14c>
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x152>
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	3b08      	subs	r3, #8
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	210f      	movs	r1, #15
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	6a39      	ldr	r1, [r7, #32]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80b1 	beq.w	80020ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f58:	4b4d      	ldr	r3, [pc, #308]	; (8002090 <HAL_GPIO_Init+0x2b8>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	; (8002090 <HAL_GPIO_Init+0x2b8>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <HAL_GPIO_Init+0x2b8>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f70:	4a48      	ldr	r2, [pc, #288]	; (8002094 <HAL_GPIO_Init+0x2bc>)
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a40      	ldr	r2, [pc, #256]	; (8002098 <HAL_GPIO_Init+0x2c0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_GPIO_Init+0x1ec>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3f      	ldr	r2, [pc, #252]	; (800209c <HAL_GPIO_Init+0x2c4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_GPIO_Init+0x1e8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3e      	ldr	r2, [pc, #248]	; (80020a0 <HAL_GPIO_Init+0x2c8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <HAL_GPIO_Init+0x1e4>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3d      	ldr	r2, [pc, #244]	; (80020a4 <HAL_GPIO_Init+0x2cc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_GPIO_Init+0x1e0>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e006      	b.n	8001fc6 <HAL_GPIO_Init+0x1ee>
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e004      	b.n	8001fc6 <HAL_GPIO_Init+0x1ee>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e002      	b.n	8001fc6 <HAL_GPIO_Init+0x1ee>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_GPIO_Init+0x1ee>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc8:	f002 0203 	and.w	r2, r2, #3
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fd6:	492f      	ldr	r1, [pc, #188]	; (8002094 <HAL_GPIO_Init+0x2bc>)
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	492c      	ldr	r1, [pc, #176]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	4928      	ldr	r1, [pc, #160]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002008:	4013      	ands	r3, r2
 800200a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002018:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	4922      	ldr	r1, [pc, #136]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	60cb      	str	r3, [r1, #12]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	491e      	ldr	r1, [pc, #120]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002030:	4013      	ands	r3, r2
 8002032:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4918      	ldr	r1, [pc, #96]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	43db      	mvns	r3, r3
 8002056:	4914      	ldr	r1, [pc, #80]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8002058:	4013      	ands	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d021      	beq.n	80020ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]
 8002074:	e021      	b.n	80020ba <HAL_GPIO_Init+0x2e2>
 8002076:	bf00      	nop
 8002078:	10320000 	.word	0x10320000
 800207c:	10310000 	.word	0x10310000
 8002080:	10220000 	.word	0x10220000
 8002084:	10210000 	.word	0x10210000
 8002088:	10120000 	.word	0x10120000
 800208c:	10110000 	.word	0x10110000
 8002090:	40021000 	.word	0x40021000
 8002094:	40010000 	.word	0x40010000
 8002098:	40010800 	.word	0x40010800
 800209c:	40010c00 	.word	0x40010c00
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40011400 	.word	0x40011400
 80020a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_GPIO_Init+0x304>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	4909      	ldr	r1, [pc, #36]	; (80020dc <HAL_GPIO_Init+0x304>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	3301      	adds	r3, #1
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f47f ae8e 	bne.w	8001dec <HAL_GPIO_Init+0x14>
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	372c      	adds	r7, #44	; 0x2c
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	40010400 	.word	0x40010400

080020e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e001      	b.n	8002102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr

0800210e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	807b      	strh	r3, [r7, #2]
 800211a:	4613      	mov	r3, r2
 800211c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800211e:	787b      	ldrb	r3, [r7, #1]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002124:	887a      	ldrh	r2, [r7, #2]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800212a:	e003      	b.n	8002134 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	041a      	lsls	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	611a      	str	r2, [r3, #16]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
	...

08002140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e12b      	b.n	80023aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fb00 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	; 0x24
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a4:	f001 f830 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80021a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4a81      	ldr	r2, [pc, #516]	; (80023b4 <HAL_I2C_Init+0x274>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d807      	bhi.n	80021c4 <HAL_I2C_Init+0x84>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a80      	ldr	r2, [pc, #512]	; (80023b8 <HAL_I2C_Init+0x278>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e006      	b.n	80021d2 <HAL_I2C_Init+0x92>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a7d      	ldr	r2, [pc, #500]	; (80023bc <HAL_I2C_Init+0x27c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bf94      	ite	ls
 80021cc:	2301      	movls	r3, #1
 80021ce:	2300      	movhi	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0e7      	b.n	80023aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a78      	ldr	r2, [pc, #480]	; (80023c0 <HAL_I2C_Init+0x280>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0c9b      	lsrs	r3, r3, #18
 80021e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a6a      	ldr	r2, [pc, #424]	; (80023b4 <HAL_I2C_Init+0x274>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d802      	bhi.n	8002214 <HAL_I2C_Init+0xd4>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	e009      	b.n	8002228 <HAL_I2C_Init+0xe8>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	4a69      	ldr	r2, [pc, #420]	; (80023c4 <HAL_I2C_Init+0x284>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	3301      	adds	r3, #1
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	430b      	orrs	r3, r1
 800222e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800223a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	495c      	ldr	r1, [pc, #368]	; (80023b4 <HAL_I2C_Init+0x274>)
 8002244:	428b      	cmp	r3, r1
 8002246:	d819      	bhi.n	800227c <HAL_I2C_Init+0x13c>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e59      	subs	r1, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fbb1 f3f3 	udiv	r3, r1, r3
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	f640 73fc 	movw	r3, #4092	; 0xffc
 800225c:	400b      	ands	r3, r1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_I2C_Init+0x138>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1e59      	subs	r1, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002276:	e051      	b.n	800231c <HAL_I2C_Init+0x1dc>
 8002278:	2304      	movs	r3, #4
 800227a:	e04f      	b.n	800231c <HAL_I2C_Init+0x1dc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d111      	bne.n	80022a8 <HAL_I2C_Init+0x168>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1e58      	subs	r0, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	440b      	add	r3, r1
 8002292:	fbb0 f3f3 	udiv	r3, r0, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e012      	b.n	80022ce <HAL_I2C_Init+0x18e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	0099      	lsls	r1, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Init+0x196>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e022      	b.n	800231c <HAL_I2C_Init+0x1dc>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10e      	bne.n	80022fc <HAL_I2C_Init+0x1bc>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e58      	subs	r0, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	440b      	add	r3, r1
 80022ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Init+0x1dc>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	0099      	lsls	r1, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	6809      	ldr	r1, [r1, #0]
 8002320:	4313      	orrs	r3, r2
 8002322:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800234a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6911      	ldr	r1, [r2, #16]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68d2      	ldr	r2, [r2, #12]
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	000186a0 	.word	0x000186a0
 80023b8:	001e847f 	.word	0x001e847f
 80023bc:	003d08ff 	.word	0x003d08ff
 80023c0:	431bde83 	.word	0x431bde83
 80023c4:	10624dd3 	.word	0x10624dd3

080023c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	461a      	mov	r2, r3
 80023d4:	460b      	mov	r3, r1
 80023d6:	817b      	strh	r3, [r7, #10]
 80023d8:	4613      	mov	r3, r2
 80023da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff fbc0 	bl	8001b60 <HAL_GetTick>
 80023e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	f040 80e0 	bne.w	80025b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2319      	movs	r3, #25
 80023f6:	2201      	movs	r2, #1
 80023f8:	4970      	ldr	r1, [pc, #448]	; (80025bc <HAL_I2C_Master_Transmit+0x1f4>)
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f964 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
 8002408:	e0d3      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_I2C_Master_Transmit+0x50>
 8002414:	2302      	movs	r3, #2
 8002416:	e0cc      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d007      	beq.n	800243e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2221      	movs	r2, #33	; 0x21
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2210      	movs	r2, #16
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	893a      	ldrh	r2, [r7, #8]
 800246e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4a50      	ldr	r2, [pc, #320]	; (80025c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f89c 	bl	80025c4 <I2C_MasterRequestWrite>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e08d      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024ac:	e066      	b.n	800257c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	6a39      	ldr	r1, [r7, #32]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fa22 	bl	80028fc <I2C_WaitOnTXEFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d107      	bne.n	80024d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e06b      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b04      	cmp	r3, #4
 8002516:	d11b      	bne.n	8002550 <HAL_I2C_Master_Transmit+0x188>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251c:	2b00      	cmp	r3, #0
 800251e:	d017      	beq.n	8002550 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	6a39      	ldr	r1, [r7, #32]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fa19 	bl	800298c <I2C_WaitOnBTFFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00d      	beq.n	800257c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	2b04      	cmp	r3, #4
 8002566:	d107      	bne.n	8002578 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002576:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e01a      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	d194      	bne.n	80024ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	00100002 	.word	0x00100002
 80025c0:	ffff0000 	.word	0xffff0000

080025c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	460b      	mov	r3, r1
 80025d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d006      	beq.n	80025ee <I2C_MasterRequestWrite+0x2a>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d003      	beq.n	80025ee <I2C_MasterRequestWrite+0x2a>
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025ec:	d108      	bne.n	8002600 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e00b      	b.n	8002618 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	2b12      	cmp	r3, #18
 8002606:	d107      	bne.n	8002618 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002616:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f84f 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00d      	beq.n	800264c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263e:	d103      	bne.n	8002648 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e035      	b.n	80026b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002654:	d108      	bne.n	8002668 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002656:	897b      	ldrh	r3, [r7, #10]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002664:	611a      	str	r2, [r3, #16]
 8002666:	e01b      	b.n	80026a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002668:	897b      	ldrh	r3, [r7, #10]
 800266a:	11db      	asrs	r3, r3, #7
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 0306 	and.w	r3, r3, #6
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f063 030f 	orn	r3, r3, #15
 8002678:	b2da      	uxtb	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	490e      	ldr	r1, [pc, #56]	; (80026c0 <I2C_MasterRequestWrite+0xfc>)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f898 	bl	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e010      	b.n	80026b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002696:	897b      	ldrh	r3, [r7, #10]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4907      	ldr	r1, [pc, #28]	; (80026c4 <I2C_MasterRequestWrite+0x100>)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f888 	bl	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	00010008 	.word	0x00010008
 80026c4:	00010002 	.word	0x00010002

080026c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d8:	e048      	b.n	800276c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d044      	beq.n	800276c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7ff fa3d 	bl	8001b60 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d139      	bne.n	800276c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	0c1b      	lsrs	r3, r3, #16
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10d      	bne.n	800271e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	43da      	mvns	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4013      	ands	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	e00c      	b.n	8002738 <I2C_WaitOnFlagUntilTimeout+0x70>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	43da      	mvns	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4013      	ands	r3, r2
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	429a      	cmp	r2, r3
 800273c:	d116      	bne.n	800276c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e023      	b.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	0c1b      	lsrs	r3, r3, #16
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10d      	bne.n	8002792 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	43da      	mvns	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4013      	ands	r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	e00c      	b.n	80027ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	43da      	mvns	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d093      	beq.n	80026da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ca:	e071      	b.n	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027da:	d123      	bne.n	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f043 0204 	orr.w	r2, r3, #4
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e067      	b.n	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282a:	d041      	beq.n	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282c:	f7ff f998 	bl	8001b60 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d302      	bcc.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d136      	bne.n	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d10c      	bne.n	8002866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4013      	ands	r3, r2
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf14      	ite	ne
 800285e:	2301      	movne	r3, #1
 8002860:	2300      	moveq	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	e00b      	b.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	43da      	mvns	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e021      	b.n	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	0c1b      	lsrs	r3, r3, #16
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d10c      	bne.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	43da      	mvns	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4013      	ands	r3, r2
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e00b      	b.n	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4013      	ands	r3, r2
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f af6d 	bne.w	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002908:	e034      	b.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f886 	bl	8002a1c <I2C_IsAcknowledgeFailed>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e034      	b.n	8002984 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d028      	beq.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002922:	f7ff f91d 	bl	8001b60 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d11d      	bne.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d016      	beq.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e007      	b.n	8002984 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d1c3      	bne.n	800290a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002998:	e034      	b.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f83e 	bl	8002a1c <I2C_IsAcknowledgeFailed>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e034      	b.n	8002a14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d028      	beq.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7ff f8d5 	bl	8001b60 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d11d      	bne.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d016      	beq.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f043 0220 	orr.w	r2, r3, #32
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e007      	b.n	8002a14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d1c3      	bne.n	800299a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a32:	d11b      	bne.n	8002a6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0204 	orr.w	r2, r3, #4
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e26c      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8087 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a98:	4b92      	ldr	r3, [pc, #584]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d00c      	beq.n	8002abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa4:	4b8f      	ldr	r3, [pc, #572]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d112      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x5e>
 8002ab0:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abc:	d10b      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abe:	4b89      	ldr	r3, [pc, #548]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d06c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x12c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d168      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e246      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x76>
 8002ae0:	4b80      	ldr	r3, [pc, #512]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a7f      	ldr	r2, [pc, #508]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e02e      	b.n	8002b4c <HAL_RCC_OscConfig+0xd4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x98>
 8002af6:	4b7b      	ldr	r3, [pc, #492]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7a      	ldr	r2, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b78      	ldr	r3, [pc, #480]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a77      	ldr	r2, [pc, #476]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e01d      	b.n	8002b4c <HAL_RCC_OscConfig+0xd4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0xbc>
 8002b1a:	4b72      	ldr	r3, [pc, #456]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a71      	ldr	r2, [pc, #452]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6e      	ldr	r2, [pc, #440]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0xd4>
 8002b34:	4b6b      	ldr	r3, [pc, #428]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a6a      	ldr	r2, [pc, #424]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a67      	ldr	r2, [pc, #412]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7ff f804 	bl	8001b60 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7ff f800 	bl	8001b60 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e1fa      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0xe4>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fff0 	bl	8001b60 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7fe ffec 	bl	8001b60 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e1e6      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	4b53      	ldr	r3, [pc, #332]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x10c>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d063      	beq.n	8002c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb2:	4b4c      	ldr	r3, [pc, #304]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bbe:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d11c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x18c>
 8002bca:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d116      	bne.n	8002c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd6:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_RCC_OscConfig+0x176>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e1ba      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4939      	ldr	r1, [pc, #228]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	e03a      	b.n	8002c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0c:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe ffa5 	bl	8001b60 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7fe ffa1 	bl	8001b60 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e19b      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4927      	ldr	r1, [pc, #156]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
 8002c4c:	e015      	b.n	8002c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4e:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_RCC_OscConfig+0x270>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe ff84 	bl	8001b60 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5c:	f7fe ff80 	bl	8001b60 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e17a      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d03a      	beq.n	8002cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d019      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <HAL_RCC_OscConfig+0x274>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe ff64 	bl	8001b60 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7fe ff60 	bl	8001b60 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e15a      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f000 facc 	bl	8003258 <RCC_Delay>
 8002cc0:	e01c      	b.n	8002cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCC_OscConfig+0x274>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7fe ff4a 	bl	8001b60 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cce:	e00f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fe ff46 	bl	8001b60 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d908      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e140      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	42420000 	.word	0x42420000
 8002cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf0:	4b9e      	ldr	r3, [pc, #632]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e9      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80a6 	beq.w	8002e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0e:	4b97      	ldr	r3, [pc, #604]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b94      	ldr	r3, [pc, #592]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a93      	ldr	r2, [pc, #588]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	61d3      	str	r3, [r2, #28]
 8002d26:	4b91      	ldr	r3, [pc, #580]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b8e      	ldr	r3, [pc, #568]	; (8002f70 <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b8b      	ldr	r3, [pc, #556]	; (8002f70 <HAL_RCC_OscConfig+0x4f8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a8a      	ldr	r2, [pc, #552]	; (8002f70 <HAL_RCC_OscConfig+0x4f8>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe ff07 	bl	8001b60 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe ff03 	bl	8001b60 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b64      	cmp	r3, #100	; 0x64
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e0fd      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4b81      	ldr	r3, [pc, #516]	; (8002f70 <HAL_RCC_OscConfig+0x4f8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x312>
 8002d7c:	4b7b      	ldr	r3, [pc, #492]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a7a      	ldr	r2, [pc, #488]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	e02d      	b.n	8002de6 <HAL_RCC_OscConfig+0x36e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x334>
 8002d92:	4b76      	ldr	r3, [pc, #472]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a75      	ldr	r2, [pc, #468]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a72      	ldr	r2, [pc, #456]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	e01c      	b.n	8002de6 <HAL_RCC_OscConfig+0x36e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d10c      	bne.n	8002dce <HAL_RCC_OscConfig+0x356>
 8002db4:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4a6c      	ldr	r2, [pc, #432]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	6213      	str	r3, [r2, #32]
 8002dc0:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a69      	ldr	r2, [pc, #420]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	e00b      	b.n	8002de6 <HAL_RCC_OscConfig+0x36e>
 8002dce:	4b67      	ldr	r3, [pc, #412]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a66      	ldr	r2, [pc, #408]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6213      	str	r3, [r2, #32]
 8002dda:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a63      	ldr	r2, [pc, #396]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d015      	beq.n	8002e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7fe feb7 	bl	8001b60 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fe feb3 	bl	8001b60 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0ab      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ee      	beq.n	8002df6 <HAL_RCC_OscConfig+0x37e>
 8002e18:	e014      	b.n	8002e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fea1 	bl	8001b60 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe fe9d 	bl	8001b60 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e095      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ee      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d105      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4a:	4b48      	ldr	r3, [pc, #288]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4a47      	ldr	r2, [pc, #284]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8081 	beq.w	8002f62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e60:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d061      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d146      	bne.n	8002f02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_RCC_OscConfig+0x4fc>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fe71 	bl	8001b60 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe fe6d 	bl	8001b60 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e067      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e94:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea8:	d108      	bne.n	8002ebc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eaa:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	492d      	ldr	r1, [pc, #180]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a19      	ldr	r1, [r3, #32]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	4927      	ldr	r1, [pc, #156]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <HAL_RCC_OscConfig+0x4fc>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eda:	f7fe fe41 	bl	8001b60 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7fe fe3d 	bl	8001b60 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e037      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x46a>
 8002f00:	e02f      	b.n	8002f62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_RCC_OscConfig+0x4fc>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe fe2a 	bl	8001b60 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe fe26 	bl	8001b60 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e020      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x498>
 8002f2e:	e018      	b.n	8002f62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e013      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40007000 	.word	0x40007000
 8002f74:	42420060 	.word	0x42420060

08002f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0d0      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d910      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0207 	bic.w	r2, r3, #7
 8002fa2:	4965      	ldr	r1, [pc, #404]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b8      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd4:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	494d      	ldr	r1, [pc, #308]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d040      	beq.n	8003098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d115      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e07f      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e073      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e06b      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f023 0203 	bic.w	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4936      	ldr	r1, [pc, #216]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003068:	f7fe fd7a 	bl	8001b60 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	e00a      	b.n	8003086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7fe fd76 	bl	8001b60 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e053      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 020c 	and.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	429a      	cmp	r2, r3
 8003096:	d1eb      	bne.n	8003070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d210      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4922      	ldr	r1, [pc, #136]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e032      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4916      	ldr	r1, [pc, #88]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490e      	ldr	r1, [pc, #56]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003106:	f000 f821 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800310a:	4602      	mov	r2, r0
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	490a      	ldr	r1, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1cc>)
 8003120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1d0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fcd8 	bl	8001adc <HAL_InitTick>

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40022000 	.word	0x40022000
 800313c:	40021000 	.word	0x40021000
 8003140:	08004888 	.word	0x08004888
 8003144:	20000098 	.word	0x20000098
 8003148:	2000009c 	.word	0x2000009c

0800314c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003166:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b04      	cmp	r3, #4
 8003174:	d002      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x30>
 8003176:	2b08      	cmp	r3, #8
 8003178:	d003      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x36>
 800317a:	e027      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	613b      	str	r3, [r7, #16]
      break;
 8003180:	e027      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	0c9b      	lsrs	r3, r3, #18
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
 800318e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0c5b      	lsrs	r3, r3, #17
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ae:	fb02 f203 	mul.w	r2, r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e004      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	613b      	str	r3, [r7, #16]
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ce:	613b      	str	r3, [r7, #16]
      break;
 80031d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d2:	693b      	ldr	r3, [r7, #16]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	007a1200 	.word	0x007a1200
 80031e8:	080048a0 	.word	0x080048a0
 80031ec:	080048b0 	.word	0x080048b0
 80031f0:	003d0900 	.word	0x003d0900

080031f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f8:	4b02      	ldr	r3, [pc, #8]	; (8003204 <HAL_RCC_GetHCLKFreq+0x10>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	20000098 	.word	0x20000098

08003208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800320c:	f7ff fff2 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4903      	ldr	r1, [pc, #12]	; (800322c <HAL_RCC_GetPCLK1Freq+0x24>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	08004898 	.word	0x08004898

08003230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003234:	f7ff ffde 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	0adb      	lsrs	r3, r3, #11
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4903      	ldr	r1, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	08004898 	.word	0x08004898

08003258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <RCC_Delay+0x34>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <RCC_Delay+0x38>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0a5b      	lsrs	r3, r3, #9
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003274:	bf00      	nop
  }
  while (Delay --);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1e5a      	subs	r2, r3, #1
 800327a:	60fa      	str	r2, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f9      	bne.n	8003274 <RCC_Delay+0x1c>
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	20000098 	.word	0x20000098
 8003290:	10624dd3 	.word	0x10624dd3

08003294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e041      	b.n	800332a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe faa6 	bl	800180c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f000 fa5c 	bl	8003790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d001      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e03a      	b.n	80033c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_TIM_Base_Start_IT+0x98>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00e      	beq.n	800338c <HAL_TIM_Base_Start_IT+0x58>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d009      	beq.n	800338c <HAL_TIM_Base_Start_IT+0x58>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_TIM_Base_Start_IT+0x58>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d111      	bne.n	80033b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b06      	cmp	r3, #6
 800339c:	d010      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ae:	e007      	b.n	80033c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800

080033d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d020      	beq.n	800343c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01b      	beq.n	800343c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0202 	mvn.w	r2, #2
 800340c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f998 	bl	8003758 <HAL_TIM_IC_CaptureCallback>
 8003428:	e005      	b.n	8003436 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f98b 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f99a 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d020      	beq.n	8003488 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01b      	beq.n	8003488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0204 	mvn.w	r2, #4
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f972 	bl	8003758 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f965 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f974 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d020      	beq.n	80034d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01b      	beq.n	80034d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0208 	mvn.w	r2, #8
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2204      	movs	r2, #4
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f94c 	bl	8003758 <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f93f 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f94e 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d020      	beq.n	8003520 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01b      	beq.n	8003520 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0210 	mvn.w	r2, #16
 80034f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2208      	movs	r2, #8
 80034f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f926 	bl	8003758 <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f919 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f928 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00c      	beq.n	8003544 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0201 	mvn.w	r2, #1
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd ff06 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00c      	beq.n	8003568 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fa7f 	bl	8003a66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00c      	beq.n	800358c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8f8 	bl	800377c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0220 	mvn.w	r2, #32
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fa52 	bl	8003a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_TIM_ConfigClockSource+0x1c>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e0b4      	b.n	800373e <HAL_TIM_ConfigClockSource+0x186>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360c:	d03e      	beq.n	800368c <HAL_TIM_ConfigClockSource+0xd4>
 800360e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003612:	f200 8087 	bhi.w	8003724 <HAL_TIM_ConfigClockSource+0x16c>
 8003616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361a:	f000 8086 	beq.w	800372a <HAL_TIM_ConfigClockSource+0x172>
 800361e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003622:	d87f      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b70      	cmp	r3, #112	; 0x70
 8003626:	d01a      	beq.n	800365e <HAL_TIM_ConfigClockSource+0xa6>
 8003628:	2b70      	cmp	r3, #112	; 0x70
 800362a:	d87b      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x16c>
 800362c:	2b60      	cmp	r3, #96	; 0x60
 800362e:	d050      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x11a>
 8003630:	2b60      	cmp	r3, #96	; 0x60
 8003632:	d877      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x16c>
 8003634:	2b50      	cmp	r3, #80	; 0x50
 8003636:	d03c      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0xfa>
 8003638:	2b50      	cmp	r3, #80	; 0x50
 800363a:	d873      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x16c>
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d058      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x13a>
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d86f      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x16c>
 8003644:	2b30      	cmp	r3, #48	; 0x30
 8003646:	d064      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x15a>
 8003648:	2b30      	cmp	r3, #48	; 0x30
 800364a:	d86b      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x16c>
 800364c:	2b20      	cmp	r3, #32
 800364e:	d060      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x15a>
 8003650:	2b20      	cmp	r3, #32
 8003652:	d867      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x16c>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d05c      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x15a>
 8003658:	2b10      	cmp	r3, #16
 800365a:	d05a      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x15a>
 800365c:	e062      	b.n	8003724 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f000 f974 	bl	800395a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003680:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	609a      	str	r2, [r3, #8]
      break;
 800368a:	e04f      	b.n	800372c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f000 f95d 	bl	800395a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ae:	609a      	str	r2, [r3, #8]
      break;
 80036b0:	e03c      	b.n	800372c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	461a      	mov	r2, r3
 80036c0:	f000 f8d4 	bl	800386c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2150      	movs	r1, #80	; 0x50
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f92b 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80036d0:	e02c      	b.n	800372c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	461a      	mov	r2, r3
 80036e0:	f000 f8f2 	bl	80038c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2160      	movs	r1, #96	; 0x60
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f91b 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80036f0:	e01c      	b.n	800372c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	461a      	mov	r2, r3
 8003700:	f000 f8b4 	bl	800386c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2140      	movs	r1, #64	; 0x40
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f90b 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003710:	e00c      	b.n	800372c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	4610      	mov	r0, r2
 800371e:	f000 f902 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003722:	e003      	b.n	800372c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      break;
 8003728:	e000      	b.n	800372c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800372a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
	...

08003790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a2f      	ldr	r2, [pc, #188]	; (8003860 <TIM_Base_SetConfig+0xd0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ae:	d007      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a2c      	ldr	r2, [pc, #176]	; (8003864 <TIM_Base_SetConfig+0xd4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <TIM_Base_SetConfig+0xd8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d108      	bne.n	80037d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a22      	ldr	r2, [pc, #136]	; (8003860 <TIM_Base_SetConfig+0xd0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d007      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <TIM_Base_SetConfig+0xd4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <TIM_Base_SetConfig+0xd8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d108      	bne.n	8003804 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <TIM_Base_SetConfig+0xd0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d103      	bne.n	8003838 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f023 0201 	bic.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	611a      	str	r2, [r3, #16]
  }
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800

0800386c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 030a 	bic.w	r3, r3, #10
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0210 	bic.w	r2, r3, #16
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003904:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	f043 0307 	orr.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800395a:	b480      	push	{r7}
 800395c:	b087      	sub	sp, #28
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	021a      	lsls	r2, r3, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	431a      	orrs	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	609a      	str	r2, [r3, #8]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e046      	b.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a16      	ldr	r2, [pc, #88]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fc:	d009      	beq.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a10      	ldr	r2, [pc, #64]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d10c      	bne.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800

08003a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e042      	b.n	8003b10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fed8 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f971 	bl	8003da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d175      	bne.n	8003c24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_UART_Transmit+0x2c>
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e06e      	b.n	8003c26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2221      	movs	r2, #33	; 0x21
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b56:	f7fe f803 	bl	8001b60 <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b70:	d108      	bne.n	8003b84 <HAL_UART_Transmit+0x6c>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e003      	b.n	8003b8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b8c:	e02e      	b.n	8003bec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f848 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e03a      	b.n	8003c26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	3302      	adds	r3, #2
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	e007      	b.n	8003bde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1cb      	bne.n	8003b8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2140      	movs	r1, #64	; 0x40
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f814 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e006      	b.n	8003c26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3e:	e03b      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d037      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c48:	f7fd ff8a 	bl	8001b60 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	6a3a      	ldr	r2, [r7, #32]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d302      	bcc.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e03a      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d023      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d020      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d01d      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d116      	bne.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f81d 	bl	8003ce0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e00f      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d0b4      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b095      	sub	sp, #84	; 0x54
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	e853 3f00 	ldrex	r3, [r3]
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d08:	643a      	str	r2, [r7, #64]	; 0x40
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e5      	bne.n	8003ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d119      	bne.n	8003d8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d78:	61ba      	str	r2, [r7, #24]
 8003d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6979      	ldr	r1, [r7, #20]
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	613b      	str	r3, [r7, #16]
   return(result);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d9a:	bf00      	nop
 8003d9c:	3754      	adds	r7, #84	; 0x54
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dde:	f023 030c 	bic.w	r3, r3, #12
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <UART_SetConfig+0x114>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d103      	bne.n	8003e14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7ff fa10 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	e002      	b.n	8003e1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7ff f9f8 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8003e18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009a      	lsls	r2, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <UART_SetConfig+0x118>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	0119      	lsls	r1, r3, #4
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	009a      	lsls	r2, r3, #2
 8003e44:	441a      	add	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <UART_SetConfig+0x118>)
 8003e52:	fba3 0302 	umull	r0, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2064      	movs	r0, #100	; 0x64
 8003e5a:	fb00 f303 	mul.w	r3, r0, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	3332      	adds	r3, #50	; 0x32
 8003e64:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <UART_SetConfig+0x118>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e70:	4419      	add	r1, r3
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009a      	lsls	r2, r3, #2
 8003e7c:	441a      	add	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <UART_SetConfig+0x118>)
 8003e8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2064      	movs	r0, #100	; 0x64
 8003e92:	fb00 f303 	mul.w	r3, r0, r3
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	3332      	adds	r3, #50	; 0x32
 8003e9c:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <UART_SetConfig+0x118>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	440a      	add	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40013800 	.word	0x40013800
 8003ebc:	51eb851f 	.word	0x51eb851f

08003ec0 <__errno>:
 8003ec0:	4b01      	ldr	r3, [pc, #4]	; (8003ec8 <__errno+0x8>)
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	200000a4 	.word	0x200000a4

08003ecc <__libc_init_array>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	2600      	movs	r6, #0
 8003ed0:	4d0c      	ldr	r5, [pc, #48]	; (8003f04 <__libc_init_array+0x38>)
 8003ed2:	4c0d      	ldr	r4, [pc, #52]	; (8003f08 <__libc_init_array+0x3c>)
 8003ed4:	1b64      	subs	r4, r4, r5
 8003ed6:	10a4      	asrs	r4, r4, #2
 8003ed8:	42a6      	cmp	r6, r4
 8003eda:	d109      	bne.n	8003ef0 <__libc_init_array+0x24>
 8003edc:	f000 fc5c 	bl	8004798 <_init>
 8003ee0:	2600      	movs	r6, #0
 8003ee2:	4d0a      	ldr	r5, [pc, #40]	; (8003f0c <__libc_init_array+0x40>)
 8003ee4:	4c0a      	ldr	r4, [pc, #40]	; (8003f10 <__libc_init_array+0x44>)
 8003ee6:	1b64      	subs	r4, r4, r5
 8003ee8:	10a4      	asrs	r4, r4, #2
 8003eea:	42a6      	cmp	r6, r4
 8003eec:	d105      	bne.n	8003efa <__libc_init_array+0x2e>
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef4:	4798      	blx	r3
 8003ef6:	3601      	adds	r6, #1
 8003ef8:	e7ee      	b.n	8003ed8 <__libc_init_array+0xc>
 8003efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efe:	4798      	blx	r3
 8003f00:	3601      	adds	r6, #1
 8003f02:	e7f2      	b.n	8003eea <__libc_init_array+0x1e>
 8003f04:	080048e8 	.word	0x080048e8
 8003f08:	080048e8 	.word	0x080048e8
 8003f0c:	080048e8 	.word	0x080048e8
 8003f10:	080048ec 	.word	0x080048ec

08003f14 <memset>:
 8003f14:	4603      	mov	r3, r0
 8003f16:	4402      	add	r2, r0
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d100      	bne.n	8003f1e <memset+0xa>
 8003f1c:	4770      	bx	lr
 8003f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f22:	e7f9      	b.n	8003f18 <memset+0x4>

08003f24 <siprintf>:
 8003f24:	b40e      	push	{r1, r2, r3}
 8003f26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f2a:	b500      	push	{lr}
 8003f2c:	b09c      	sub	sp, #112	; 0x70
 8003f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f30:	9002      	str	r0, [sp, #8]
 8003f32:	9006      	str	r0, [sp, #24]
 8003f34:	9107      	str	r1, [sp, #28]
 8003f36:	9104      	str	r1, [sp, #16]
 8003f38:	4808      	ldr	r0, [pc, #32]	; (8003f5c <siprintf+0x38>)
 8003f3a:	4909      	ldr	r1, [pc, #36]	; (8003f60 <siprintf+0x3c>)
 8003f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f40:	9105      	str	r1, [sp, #20]
 8003f42:	6800      	ldr	r0, [r0, #0]
 8003f44:	a902      	add	r1, sp, #8
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	f000 f868 	bl	800401c <_svfiprintf_r>
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	9b02      	ldr	r3, [sp, #8]
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	b01c      	add	sp, #112	; 0x70
 8003f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f58:	b003      	add	sp, #12
 8003f5a:	4770      	bx	lr
 8003f5c:	200000a4 	.word	0x200000a4
 8003f60:	ffff0208 	.word	0xffff0208

08003f64 <__ssputs_r>:
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	688e      	ldr	r6, [r1, #8]
 8003f6a:	4682      	mov	sl, r0
 8003f6c:	429e      	cmp	r6, r3
 8003f6e:	460c      	mov	r4, r1
 8003f70:	4690      	mov	r8, r2
 8003f72:	461f      	mov	r7, r3
 8003f74:	d838      	bhi.n	8003fe8 <__ssputs_r+0x84>
 8003f76:	898a      	ldrh	r2, [r1, #12]
 8003f78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f7c:	d032      	beq.n	8003fe4 <__ssputs_r+0x80>
 8003f7e:	6825      	ldr	r5, [r4, #0]
 8003f80:	6909      	ldr	r1, [r1, #16]
 8003f82:	3301      	adds	r3, #1
 8003f84:	eba5 0901 	sub.w	r9, r5, r1
 8003f88:	6965      	ldr	r5, [r4, #20]
 8003f8a:	444b      	add	r3, r9
 8003f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f94:	106d      	asrs	r5, r5, #1
 8003f96:	429d      	cmp	r5, r3
 8003f98:	bf38      	it	cc
 8003f9a:	461d      	movcc	r5, r3
 8003f9c:	0553      	lsls	r3, r2, #21
 8003f9e:	d531      	bpl.n	8004004 <__ssputs_r+0xa0>
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	f000 fb53 	bl	800464c <_malloc_r>
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	b950      	cbnz	r0, 8003fc0 <__ssputs_r+0x5c>
 8003faa:	230c      	movs	r3, #12
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb0:	f8ca 3000 	str.w	r3, [sl]
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fba:	81a3      	strh	r3, [r4, #12]
 8003fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc0:	464a      	mov	r2, r9
 8003fc2:	6921      	ldr	r1, [r4, #16]
 8003fc4:	f000 face 	bl	8004564 <memcpy>
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd2:	81a3      	strh	r3, [r4, #12]
 8003fd4:	6126      	str	r6, [r4, #16]
 8003fd6:	444e      	add	r6, r9
 8003fd8:	6026      	str	r6, [r4, #0]
 8003fda:	463e      	mov	r6, r7
 8003fdc:	6165      	str	r5, [r4, #20]
 8003fde:	eba5 0509 	sub.w	r5, r5, r9
 8003fe2:	60a5      	str	r5, [r4, #8]
 8003fe4:	42be      	cmp	r6, r7
 8003fe6:	d900      	bls.n	8003fea <__ssputs_r+0x86>
 8003fe8:	463e      	mov	r6, r7
 8003fea:	4632      	mov	r2, r6
 8003fec:	4641      	mov	r1, r8
 8003fee:	6820      	ldr	r0, [r4, #0]
 8003ff0:	f000 fac6 	bl	8004580 <memmove>
 8003ff4:	68a3      	ldr	r3, [r4, #8]
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	1b9b      	subs	r3, r3, r6
 8003ffa:	4432      	add	r2, r6
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	60a3      	str	r3, [r4, #8]
 8004000:	6022      	str	r2, [r4, #0]
 8004002:	e7db      	b.n	8003fbc <__ssputs_r+0x58>
 8004004:	462a      	mov	r2, r5
 8004006:	f000 fb7b 	bl	8004700 <_realloc_r>
 800400a:	4606      	mov	r6, r0
 800400c:	2800      	cmp	r0, #0
 800400e:	d1e1      	bne.n	8003fd4 <__ssputs_r+0x70>
 8004010:	4650      	mov	r0, sl
 8004012:	6921      	ldr	r1, [r4, #16]
 8004014:	f000 face 	bl	80045b4 <_free_r>
 8004018:	e7c7      	b.n	8003faa <__ssputs_r+0x46>
	...

0800401c <_svfiprintf_r>:
 800401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	4698      	mov	r8, r3
 8004022:	898b      	ldrh	r3, [r1, #12]
 8004024:	4607      	mov	r7, r0
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	460d      	mov	r5, r1
 800402a:	4614      	mov	r4, r2
 800402c:	b09d      	sub	sp, #116	; 0x74
 800402e:	d50e      	bpl.n	800404e <_svfiprintf_r+0x32>
 8004030:	690b      	ldr	r3, [r1, #16]
 8004032:	b963      	cbnz	r3, 800404e <_svfiprintf_r+0x32>
 8004034:	2140      	movs	r1, #64	; 0x40
 8004036:	f000 fb09 	bl	800464c <_malloc_r>
 800403a:	6028      	str	r0, [r5, #0]
 800403c:	6128      	str	r0, [r5, #16]
 800403e:	b920      	cbnz	r0, 800404a <_svfiprintf_r+0x2e>
 8004040:	230c      	movs	r3, #12
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	e0d1      	b.n	80041ee <_svfiprintf_r+0x1d2>
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	616b      	str	r3, [r5, #20]
 800404e:	2300      	movs	r3, #0
 8004050:	9309      	str	r3, [sp, #36]	; 0x24
 8004052:	2320      	movs	r3, #32
 8004054:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004058:	2330      	movs	r3, #48	; 0x30
 800405a:	f04f 0901 	mov.w	r9, #1
 800405e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004062:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004208 <_svfiprintf_r+0x1ec>
 8004066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800406a:	4623      	mov	r3, r4
 800406c:	469a      	mov	sl, r3
 800406e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004072:	b10a      	cbz	r2, 8004078 <_svfiprintf_r+0x5c>
 8004074:	2a25      	cmp	r2, #37	; 0x25
 8004076:	d1f9      	bne.n	800406c <_svfiprintf_r+0x50>
 8004078:	ebba 0b04 	subs.w	fp, sl, r4
 800407c:	d00b      	beq.n	8004096 <_svfiprintf_r+0x7a>
 800407e:	465b      	mov	r3, fp
 8004080:	4622      	mov	r2, r4
 8004082:	4629      	mov	r1, r5
 8004084:	4638      	mov	r0, r7
 8004086:	f7ff ff6d 	bl	8003f64 <__ssputs_r>
 800408a:	3001      	adds	r0, #1
 800408c:	f000 80aa 	beq.w	80041e4 <_svfiprintf_r+0x1c8>
 8004090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004092:	445a      	add	r2, fp
 8004094:	9209      	str	r2, [sp, #36]	; 0x24
 8004096:	f89a 3000 	ldrb.w	r3, [sl]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80a2 	beq.w	80041e4 <_svfiprintf_r+0x1c8>
 80040a0:	2300      	movs	r3, #0
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040aa:	f10a 0a01 	add.w	sl, sl, #1
 80040ae:	9304      	str	r3, [sp, #16]
 80040b0:	9307      	str	r3, [sp, #28]
 80040b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040b6:	931a      	str	r3, [sp, #104]	; 0x68
 80040b8:	4654      	mov	r4, sl
 80040ba:	2205      	movs	r2, #5
 80040bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c0:	4851      	ldr	r0, [pc, #324]	; (8004208 <_svfiprintf_r+0x1ec>)
 80040c2:	f000 fa41 	bl	8004548 <memchr>
 80040c6:	9a04      	ldr	r2, [sp, #16]
 80040c8:	b9d8      	cbnz	r0, 8004102 <_svfiprintf_r+0xe6>
 80040ca:	06d0      	lsls	r0, r2, #27
 80040cc:	bf44      	itt	mi
 80040ce:	2320      	movmi	r3, #32
 80040d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040d4:	0711      	lsls	r1, r2, #28
 80040d6:	bf44      	itt	mi
 80040d8:	232b      	movmi	r3, #43	; 0x2b
 80040da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040de:	f89a 3000 	ldrb.w	r3, [sl]
 80040e2:	2b2a      	cmp	r3, #42	; 0x2a
 80040e4:	d015      	beq.n	8004112 <_svfiprintf_r+0xf6>
 80040e6:	4654      	mov	r4, sl
 80040e8:	2000      	movs	r0, #0
 80040ea:	f04f 0c0a 	mov.w	ip, #10
 80040ee:	9a07      	ldr	r2, [sp, #28]
 80040f0:	4621      	mov	r1, r4
 80040f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040f6:	3b30      	subs	r3, #48	; 0x30
 80040f8:	2b09      	cmp	r3, #9
 80040fa:	d94e      	bls.n	800419a <_svfiprintf_r+0x17e>
 80040fc:	b1b0      	cbz	r0, 800412c <_svfiprintf_r+0x110>
 80040fe:	9207      	str	r2, [sp, #28]
 8004100:	e014      	b.n	800412c <_svfiprintf_r+0x110>
 8004102:	eba0 0308 	sub.w	r3, r0, r8
 8004106:	fa09 f303 	lsl.w	r3, r9, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	46a2      	mov	sl, r4
 800410e:	9304      	str	r3, [sp, #16]
 8004110:	e7d2      	b.n	80040b8 <_svfiprintf_r+0x9c>
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	1d19      	adds	r1, r3, #4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9103      	str	r1, [sp, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfbb      	ittet	lt
 800411e:	425b      	neglt	r3, r3
 8004120:	f042 0202 	orrlt.w	r2, r2, #2
 8004124:	9307      	strge	r3, [sp, #28]
 8004126:	9307      	strlt	r3, [sp, #28]
 8004128:	bfb8      	it	lt
 800412a:	9204      	strlt	r2, [sp, #16]
 800412c:	7823      	ldrb	r3, [r4, #0]
 800412e:	2b2e      	cmp	r3, #46	; 0x2e
 8004130:	d10c      	bne.n	800414c <_svfiprintf_r+0x130>
 8004132:	7863      	ldrb	r3, [r4, #1]
 8004134:	2b2a      	cmp	r3, #42	; 0x2a
 8004136:	d135      	bne.n	80041a4 <_svfiprintf_r+0x188>
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	3402      	adds	r4, #2
 800413c:	1d1a      	adds	r2, r3, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	9203      	str	r2, [sp, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	bfb8      	it	lt
 8004146:	f04f 33ff 	movlt.w	r3, #4294967295
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004218 <_svfiprintf_r+0x1fc>
 8004150:	2203      	movs	r2, #3
 8004152:	4650      	mov	r0, sl
 8004154:	7821      	ldrb	r1, [r4, #0]
 8004156:	f000 f9f7 	bl	8004548 <memchr>
 800415a:	b140      	cbz	r0, 800416e <_svfiprintf_r+0x152>
 800415c:	2340      	movs	r3, #64	; 0x40
 800415e:	eba0 000a 	sub.w	r0, r0, sl
 8004162:	fa03 f000 	lsl.w	r0, r3, r0
 8004166:	9b04      	ldr	r3, [sp, #16]
 8004168:	3401      	adds	r4, #1
 800416a:	4303      	orrs	r3, r0
 800416c:	9304      	str	r3, [sp, #16]
 800416e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004172:	2206      	movs	r2, #6
 8004174:	4825      	ldr	r0, [pc, #148]	; (800420c <_svfiprintf_r+0x1f0>)
 8004176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800417a:	f000 f9e5 	bl	8004548 <memchr>
 800417e:	2800      	cmp	r0, #0
 8004180:	d038      	beq.n	80041f4 <_svfiprintf_r+0x1d8>
 8004182:	4b23      	ldr	r3, [pc, #140]	; (8004210 <_svfiprintf_r+0x1f4>)
 8004184:	bb1b      	cbnz	r3, 80041ce <_svfiprintf_r+0x1b2>
 8004186:	9b03      	ldr	r3, [sp, #12]
 8004188:	3307      	adds	r3, #7
 800418a:	f023 0307 	bic.w	r3, r3, #7
 800418e:	3308      	adds	r3, #8
 8004190:	9303      	str	r3, [sp, #12]
 8004192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004194:	4433      	add	r3, r6
 8004196:	9309      	str	r3, [sp, #36]	; 0x24
 8004198:	e767      	b.n	800406a <_svfiprintf_r+0x4e>
 800419a:	460c      	mov	r4, r1
 800419c:	2001      	movs	r0, #1
 800419e:	fb0c 3202 	mla	r2, ip, r2, r3
 80041a2:	e7a5      	b.n	80040f0 <_svfiprintf_r+0xd4>
 80041a4:	2300      	movs	r3, #0
 80041a6:	f04f 0c0a 	mov.w	ip, #10
 80041aa:	4619      	mov	r1, r3
 80041ac:	3401      	adds	r4, #1
 80041ae:	9305      	str	r3, [sp, #20]
 80041b0:	4620      	mov	r0, r4
 80041b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041b6:	3a30      	subs	r2, #48	; 0x30
 80041b8:	2a09      	cmp	r2, #9
 80041ba:	d903      	bls.n	80041c4 <_svfiprintf_r+0x1a8>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0c5      	beq.n	800414c <_svfiprintf_r+0x130>
 80041c0:	9105      	str	r1, [sp, #20]
 80041c2:	e7c3      	b.n	800414c <_svfiprintf_r+0x130>
 80041c4:	4604      	mov	r4, r0
 80041c6:	2301      	movs	r3, #1
 80041c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80041cc:	e7f0      	b.n	80041b0 <_svfiprintf_r+0x194>
 80041ce:	ab03      	add	r3, sp, #12
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	462a      	mov	r2, r5
 80041d4:	4638      	mov	r0, r7
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <_svfiprintf_r+0x1f8>)
 80041d8:	a904      	add	r1, sp, #16
 80041da:	f3af 8000 	nop.w
 80041de:	1c42      	adds	r2, r0, #1
 80041e0:	4606      	mov	r6, r0
 80041e2:	d1d6      	bne.n	8004192 <_svfiprintf_r+0x176>
 80041e4:	89ab      	ldrh	r3, [r5, #12]
 80041e6:	065b      	lsls	r3, r3, #25
 80041e8:	f53f af2c 	bmi.w	8004044 <_svfiprintf_r+0x28>
 80041ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ee:	b01d      	add	sp, #116	; 0x74
 80041f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f4:	ab03      	add	r3, sp, #12
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	462a      	mov	r2, r5
 80041fa:	4638      	mov	r0, r7
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <_svfiprintf_r+0x1f8>)
 80041fe:	a904      	add	r1, sp, #16
 8004200:	f000 f87c 	bl	80042fc <_printf_i>
 8004204:	e7eb      	b.n	80041de <_svfiprintf_r+0x1c2>
 8004206:	bf00      	nop
 8004208:	080048b2 	.word	0x080048b2
 800420c:	080048bc 	.word	0x080048bc
 8004210:	00000000 	.word	0x00000000
 8004214:	08003f65 	.word	0x08003f65
 8004218:	080048b8 	.word	0x080048b8

0800421c <_printf_common>:
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	4616      	mov	r6, r2
 8004222:	4699      	mov	r9, r3
 8004224:	688a      	ldr	r2, [r1, #8]
 8004226:	690b      	ldr	r3, [r1, #16]
 8004228:	4607      	mov	r7, r0
 800422a:	4293      	cmp	r3, r2
 800422c:	bfb8      	it	lt
 800422e:	4613      	movlt	r3, r2
 8004230:	6033      	str	r3, [r6, #0]
 8004232:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004236:	460c      	mov	r4, r1
 8004238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800423c:	b10a      	cbz	r2, 8004242 <_printf_common+0x26>
 800423e:	3301      	adds	r3, #1
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0699      	lsls	r1, r3, #26
 8004246:	bf42      	ittt	mi
 8004248:	6833      	ldrmi	r3, [r6, #0]
 800424a:	3302      	addmi	r3, #2
 800424c:	6033      	strmi	r3, [r6, #0]
 800424e:	6825      	ldr	r5, [r4, #0]
 8004250:	f015 0506 	ands.w	r5, r5, #6
 8004254:	d106      	bne.n	8004264 <_printf_common+0x48>
 8004256:	f104 0a19 	add.w	sl, r4, #25
 800425a:	68e3      	ldr	r3, [r4, #12]
 800425c:	6832      	ldr	r2, [r6, #0]
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	42ab      	cmp	r3, r5
 8004262:	dc28      	bgt.n	80042b6 <_printf_common+0x9a>
 8004264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004268:	1e13      	subs	r3, r2, #0
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	bf18      	it	ne
 800426e:	2301      	movne	r3, #1
 8004270:	0692      	lsls	r2, r2, #26
 8004272:	d42d      	bmi.n	80042d0 <_printf_common+0xb4>
 8004274:	4649      	mov	r1, r9
 8004276:	4638      	mov	r0, r7
 8004278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800427c:	47c0      	blx	r8
 800427e:	3001      	adds	r0, #1
 8004280:	d020      	beq.n	80042c4 <_printf_common+0xa8>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	68e5      	ldr	r5, [r4, #12]
 8004286:	f003 0306 	and.w	r3, r3, #6
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf18      	it	ne
 800428e:	2500      	movne	r5, #0
 8004290:	6832      	ldr	r2, [r6, #0]
 8004292:	f04f 0600 	mov.w	r6, #0
 8004296:	68a3      	ldr	r3, [r4, #8]
 8004298:	bf08      	it	eq
 800429a:	1aad      	subeq	r5, r5, r2
 800429c:	6922      	ldr	r2, [r4, #16]
 800429e:	bf08      	it	eq
 80042a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042a4:	4293      	cmp	r3, r2
 80042a6:	bfc4      	itt	gt
 80042a8:	1a9b      	subgt	r3, r3, r2
 80042aa:	18ed      	addgt	r5, r5, r3
 80042ac:	341a      	adds	r4, #26
 80042ae:	42b5      	cmp	r5, r6
 80042b0:	d11a      	bne.n	80042e8 <_printf_common+0xcc>
 80042b2:	2000      	movs	r0, #0
 80042b4:	e008      	b.n	80042c8 <_printf_common+0xac>
 80042b6:	2301      	movs	r3, #1
 80042b8:	4652      	mov	r2, sl
 80042ba:	4649      	mov	r1, r9
 80042bc:	4638      	mov	r0, r7
 80042be:	47c0      	blx	r8
 80042c0:	3001      	adds	r0, #1
 80042c2:	d103      	bne.n	80042cc <_printf_common+0xb0>
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042cc:	3501      	adds	r5, #1
 80042ce:	e7c4      	b.n	800425a <_printf_common+0x3e>
 80042d0:	2030      	movs	r0, #48	; 0x30
 80042d2:	18e1      	adds	r1, r4, r3
 80042d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042de:	4422      	add	r2, r4
 80042e0:	3302      	adds	r3, #2
 80042e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042e6:	e7c5      	b.n	8004274 <_printf_common+0x58>
 80042e8:	2301      	movs	r3, #1
 80042ea:	4622      	mov	r2, r4
 80042ec:	4649      	mov	r1, r9
 80042ee:	4638      	mov	r0, r7
 80042f0:	47c0      	blx	r8
 80042f2:	3001      	adds	r0, #1
 80042f4:	d0e6      	beq.n	80042c4 <_printf_common+0xa8>
 80042f6:	3601      	adds	r6, #1
 80042f8:	e7d9      	b.n	80042ae <_printf_common+0x92>
	...

080042fc <_printf_i>:
 80042fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004300:	460c      	mov	r4, r1
 8004302:	7e27      	ldrb	r7, [r4, #24]
 8004304:	4691      	mov	r9, r2
 8004306:	2f78      	cmp	r7, #120	; 0x78
 8004308:	4680      	mov	r8, r0
 800430a:	469a      	mov	sl, r3
 800430c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800430e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004312:	d807      	bhi.n	8004324 <_printf_i+0x28>
 8004314:	2f62      	cmp	r7, #98	; 0x62
 8004316:	d80a      	bhi.n	800432e <_printf_i+0x32>
 8004318:	2f00      	cmp	r7, #0
 800431a:	f000 80d9 	beq.w	80044d0 <_printf_i+0x1d4>
 800431e:	2f58      	cmp	r7, #88	; 0x58
 8004320:	f000 80a4 	beq.w	800446c <_printf_i+0x170>
 8004324:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800432c:	e03a      	b.n	80043a4 <_printf_i+0xa8>
 800432e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004332:	2b15      	cmp	r3, #21
 8004334:	d8f6      	bhi.n	8004324 <_printf_i+0x28>
 8004336:	a001      	add	r0, pc, #4	; (adr r0, 800433c <_printf_i+0x40>)
 8004338:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800433c:	08004395 	.word	0x08004395
 8004340:	080043a9 	.word	0x080043a9
 8004344:	08004325 	.word	0x08004325
 8004348:	08004325 	.word	0x08004325
 800434c:	08004325 	.word	0x08004325
 8004350:	08004325 	.word	0x08004325
 8004354:	080043a9 	.word	0x080043a9
 8004358:	08004325 	.word	0x08004325
 800435c:	08004325 	.word	0x08004325
 8004360:	08004325 	.word	0x08004325
 8004364:	08004325 	.word	0x08004325
 8004368:	080044b7 	.word	0x080044b7
 800436c:	080043d9 	.word	0x080043d9
 8004370:	08004499 	.word	0x08004499
 8004374:	08004325 	.word	0x08004325
 8004378:	08004325 	.word	0x08004325
 800437c:	080044d9 	.word	0x080044d9
 8004380:	08004325 	.word	0x08004325
 8004384:	080043d9 	.word	0x080043d9
 8004388:	08004325 	.word	0x08004325
 800438c:	08004325 	.word	0x08004325
 8004390:	080044a1 	.word	0x080044a1
 8004394:	680b      	ldr	r3, [r1, #0]
 8004396:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	600a      	str	r2, [r1, #0]
 80043a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0a4      	b.n	80044f2 <_printf_i+0x1f6>
 80043a8:	6825      	ldr	r5, [r4, #0]
 80043aa:	6808      	ldr	r0, [r1, #0]
 80043ac:	062e      	lsls	r6, r5, #24
 80043ae:	f100 0304 	add.w	r3, r0, #4
 80043b2:	d50a      	bpl.n	80043ca <_printf_i+0xce>
 80043b4:	6805      	ldr	r5, [r0, #0]
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	2d00      	cmp	r5, #0
 80043ba:	da03      	bge.n	80043c4 <_printf_i+0xc8>
 80043bc:	232d      	movs	r3, #45	; 0x2d
 80043be:	426d      	negs	r5, r5
 80043c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c4:	230a      	movs	r3, #10
 80043c6:	485e      	ldr	r0, [pc, #376]	; (8004540 <_printf_i+0x244>)
 80043c8:	e019      	b.n	80043fe <_printf_i+0x102>
 80043ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043ce:	6805      	ldr	r5, [r0, #0]
 80043d0:	600b      	str	r3, [r1, #0]
 80043d2:	bf18      	it	ne
 80043d4:	b22d      	sxthne	r5, r5
 80043d6:	e7ef      	b.n	80043b8 <_printf_i+0xbc>
 80043d8:	680b      	ldr	r3, [r1, #0]
 80043da:	6825      	ldr	r5, [r4, #0]
 80043dc:	1d18      	adds	r0, r3, #4
 80043de:	6008      	str	r0, [r1, #0]
 80043e0:	0628      	lsls	r0, r5, #24
 80043e2:	d501      	bpl.n	80043e8 <_printf_i+0xec>
 80043e4:	681d      	ldr	r5, [r3, #0]
 80043e6:	e002      	b.n	80043ee <_printf_i+0xf2>
 80043e8:	0669      	lsls	r1, r5, #25
 80043ea:	d5fb      	bpl.n	80043e4 <_printf_i+0xe8>
 80043ec:	881d      	ldrh	r5, [r3, #0]
 80043ee:	2f6f      	cmp	r7, #111	; 0x6f
 80043f0:	bf0c      	ite	eq
 80043f2:	2308      	moveq	r3, #8
 80043f4:	230a      	movne	r3, #10
 80043f6:	4852      	ldr	r0, [pc, #328]	; (8004540 <_printf_i+0x244>)
 80043f8:	2100      	movs	r1, #0
 80043fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043fe:	6866      	ldr	r6, [r4, #4]
 8004400:	2e00      	cmp	r6, #0
 8004402:	bfa8      	it	ge
 8004404:	6821      	ldrge	r1, [r4, #0]
 8004406:	60a6      	str	r6, [r4, #8]
 8004408:	bfa4      	itt	ge
 800440a:	f021 0104 	bicge.w	r1, r1, #4
 800440e:	6021      	strge	r1, [r4, #0]
 8004410:	b90d      	cbnz	r5, 8004416 <_printf_i+0x11a>
 8004412:	2e00      	cmp	r6, #0
 8004414:	d04d      	beq.n	80044b2 <_printf_i+0x1b6>
 8004416:	4616      	mov	r6, r2
 8004418:	fbb5 f1f3 	udiv	r1, r5, r3
 800441c:	fb03 5711 	mls	r7, r3, r1, r5
 8004420:	5dc7      	ldrb	r7, [r0, r7]
 8004422:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004426:	462f      	mov	r7, r5
 8004428:	42bb      	cmp	r3, r7
 800442a:	460d      	mov	r5, r1
 800442c:	d9f4      	bls.n	8004418 <_printf_i+0x11c>
 800442e:	2b08      	cmp	r3, #8
 8004430:	d10b      	bne.n	800444a <_printf_i+0x14e>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	07df      	lsls	r7, r3, #31
 8004436:	d508      	bpl.n	800444a <_printf_i+0x14e>
 8004438:	6923      	ldr	r3, [r4, #16]
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	4299      	cmp	r1, r3
 800443e:	bfde      	ittt	le
 8004440:	2330      	movle	r3, #48	; 0x30
 8004442:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004446:	f106 36ff 	addle.w	r6, r6, #4294967295
 800444a:	1b92      	subs	r2, r2, r6
 800444c:	6122      	str	r2, [r4, #16]
 800444e:	464b      	mov	r3, r9
 8004450:	4621      	mov	r1, r4
 8004452:	4640      	mov	r0, r8
 8004454:	f8cd a000 	str.w	sl, [sp]
 8004458:	aa03      	add	r2, sp, #12
 800445a:	f7ff fedf 	bl	800421c <_printf_common>
 800445e:	3001      	adds	r0, #1
 8004460:	d14c      	bne.n	80044fc <_printf_i+0x200>
 8004462:	f04f 30ff 	mov.w	r0, #4294967295
 8004466:	b004      	add	sp, #16
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	4834      	ldr	r0, [pc, #208]	; (8004540 <_printf_i+0x244>)
 800446e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004472:	680e      	ldr	r6, [r1, #0]
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	f856 5b04 	ldr.w	r5, [r6], #4
 800447a:	061f      	lsls	r7, r3, #24
 800447c:	600e      	str	r6, [r1, #0]
 800447e:	d514      	bpl.n	80044aa <_printf_i+0x1ae>
 8004480:	07d9      	lsls	r1, r3, #31
 8004482:	bf44      	itt	mi
 8004484:	f043 0320 	orrmi.w	r3, r3, #32
 8004488:	6023      	strmi	r3, [r4, #0]
 800448a:	b91d      	cbnz	r5, 8004494 <_printf_i+0x198>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	f023 0320 	bic.w	r3, r3, #32
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	2310      	movs	r3, #16
 8004496:	e7af      	b.n	80043f8 <_printf_i+0xfc>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	f043 0320 	orr.w	r3, r3, #32
 800449e:	6023      	str	r3, [r4, #0]
 80044a0:	2378      	movs	r3, #120	; 0x78
 80044a2:	4828      	ldr	r0, [pc, #160]	; (8004544 <_printf_i+0x248>)
 80044a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044a8:	e7e3      	b.n	8004472 <_printf_i+0x176>
 80044aa:	065e      	lsls	r6, r3, #25
 80044ac:	bf48      	it	mi
 80044ae:	b2ad      	uxthmi	r5, r5
 80044b0:	e7e6      	b.n	8004480 <_printf_i+0x184>
 80044b2:	4616      	mov	r6, r2
 80044b4:	e7bb      	b.n	800442e <_printf_i+0x132>
 80044b6:	680b      	ldr	r3, [r1, #0]
 80044b8:	6826      	ldr	r6, [r4, #0]
 80044ba:	1d1d      	adds	r5, r3, #4
 80044bc:	6960      	ldr	r0, [r4, #20]
 80044be:	600d      	str	r5, [r1, #0]
 80044c0:	0635      	lsls	r5, r6, #24
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	d501      	bpl.n	80044ca <_printf_i+0x1ce>
 80044c6:	6018      	str	r0, [r3, #0]
 80044c8:	e002      	b.n	80044d0 <_printf_i+0x1d4>
 80044ca:	0671      	lsls	r1, r6, #25
 80044cc:	d5fb      	bpl.n	80044c6 <_printf_i+0x1ca>
 80044ce:	8018      	strh	r0, [r3, #0]
 80044d0:	2300      	movs	r3, #0
 80044d2:	4616      	mov	r6, r2
 80044d4:	6123      	str	r3, [r4, #16]
 80044d6:	e7ba      	b.n	800444e <_printf_i+0x152>
 80044d8:	680b      	ldr	r3, [r1, #0]
 80044da:	1d1a      	adds	r2, r3, #4
 80044dc:	600a      	str	r2, [r1, #0]
 80044de:	681e      	ldr	r6, [r3, #0]
 80044e0:	2100      	movs	r1, #0
 80044e2:	4630      	mov	r0, r6
 80044e4:	6862      	ldr	r2, [r4, #4]
 80044e6:	f000 f82f 	bl	8004548 <memchr>
 80044ea:	b108      	cbz	r0, 80044f0 <_printf_i+0x1f4>
 80044ec:	1b80      	subs	r0, r0, r6
 80044ee:	6060      	str	r0, [r4, #4]
 80044f0:	6863      	ldr	r3, [r4, #4]
 80044f2:	6123      	str	r3, [r4, #16]
 80044f4:	2300      	movs	r3, #0
 80044f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fa:	e7a8      	b.n	800444e <_printf_i+0x152>
 80044fc:	4632      	mov	r2, r6
 80044fe:	4649      	mov	r1, r9
 8004500:	4640      	mov	r0, r8
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	47d0      	blx	sl
 8004506:	3001      	adds	r0, #1
 8004508:	d0ab      	beq.n	8004462 <_printf_i+0x166>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	079b      	lsls	r3, r3, #30
 800450e:	d413      	bmi.n	8004538 <_printf_i+0x23c>
 8004510:	68e0      	ldr	r0, [r4, #12]
 8004512:	9b03      	ldr	r3, [sp, #12]
 8004514:	4298      	cmp	r0, r3
 8004516:	bfb8      	it	lt
 8004518:	4618      	movlt	r0, r3
 800451a:	e7a4      	b.n	8004466 <_printf_i+0x16a>
 800451c:	2301      	movs	r3, #1
 800451e:	4632      	mov	r2, r6
 8004520:	4649      	mov	r1, r9
 8004522:	4640      	mov	r0, r8
 8004524:	47d0      	blx	sl
 8004526:	3001      	adds	r0, #1
 8004528:	d09b      	beq.n	8004462 <_printf_i+0x166>
 800452a:	3501      	adds	r5, #1
 800452c:	68e3      	ldr	r3, [r4, #12]
 800452e:	9903      	ldr	r1, [sp, #12]
 8004530:	1a5b      	subs	r3, r3, r1
 8004532:	42ab      	cmp	r3, r5
 8004534:	dcf2      	bgt.n	800451c <_printf_i+0x220>
 8004536:	e7eb      	b.n	8004510 <_printf_i+0x214>
 8004538:	2500      	movs	r5, #0
 800453a:	f104 0619 	add.w	r6, r4, #25
 800453e:	e7f5      	b.n	800452c <_printf_i+0x230>
 8004540:	080048c3 	.word	0x080048c3
 8004544:	080048d4 	.word	0x080048d4

08004548 <memchr>:
 8004548:	4603      	mov	r3, r0
 800454a:	b510      	push	{r4, lr}
 800454c:	b2c9      	uxtb	r1, r1
 800454e:	4402      	add	r2, r0
 8004550:	4293      	cmp	r3, r2
 8004552:	4618      	mov	r0, r3
 8004554:	d101      	bne.n	800455a <memchr+0x12>
 8004556:	2000      	movs	r0, #0
 8004558:	e003      	b.n	8004562 <memchr+0x1a>
 800455a:	7804      	ldrb	r4, [r0, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	428c      	cmp	r4, r1
 8004560:	d1f6      	bne.n	8004550 <memchr+0x8>
 8004562:	bd10      	pop	{r4, pc}

08004564 <memcpy>:
 8004564:	440a      	add	r2, r1
 8004566:	4291      	cmp	r1, r2
 8004568:	f100 33ff 	add.w	r3, r0, #4294967295
 800456c:	d100      	bne.n	8004570 <memcpy+0xc>
 800456e:	4770      	bx	lr
 8004570:	b510      	push	{r4, lr}
 8004572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004576:	4291      	cmp	r1, r2
 8004578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800457c:	d1f9      	bne.n	8004572 <memcpy+0xe>
 800457e:	bd10      	pop	{r4, pc}

08004580 <memmove>:
 8004580:	4288      	cmp	r0, r1
 8004582:	b510      	push	{r4, lr}
 8004584:	eb01 0402 	add.w	r4, r1, r2
 8004588:	d902      	bls.n	8004590 <memmove+0x10>
 800458a:	4284      	cmp	r4, r0
 800458c:	4623      	mov	r3, r4
 800458e:	d807      	bhi.n	80045a0 <memmove+0x20>
 8004590:	1e43      	subs	r3, r0, #1
 8004592:	42a1      	cmp	r1, r4
 8004594:	d008      	beq.n	80045a8 <memmove+0x28>
 8004596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800459a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800459e:	e7f8      	b.n	8004592 <memmove+0x12>
 80045a0:	4601      	mov	r1, r0
 80045a2:	4402      	add	r2, r0
 80045a4:	428a      	cmp	r2, r1
 80045a6:	d100      	bne.n	80045aa <memmove+0x2a>
 80045a8:	bd10      	pop	{r4, pc}
 80045aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045b2:	e7f7      	b.n	80045a4 <memmove+0x24>

080045b4 <_free_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	4605      	mov	r5, r0
 80045b8:	2900      	cmp	r1, #0
 80045ba:	d043      	beq.n	8004644 <_free_r+0x90>
 80045bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c0:	1f0c      	subs	r4, r1, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bfb8      	it	lt
 80045c6:	18e4      	addlt	r4, r4, r3
 80045c8:	f000 f8d0 	bl	800476c <__malloc_lock>
 80045cc:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <_free_r+0x94>)
 80045ce:	6813      	ldr	r3, [r2, #0]
 80045d0:	4610      	mov	r0, r2
 80045d2:	b933      	cbnz	r3, 80045e2 <_free_r+0x2e>
 80045d4:	6063      	str	r3, [r4, #4]
 80045d6:	6014      	str	r4, [r2, #0]
 80045d8:	4628      	mov	r0, r5
 80045da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045de:	f000 b8cb 	b.w	8004778 <__malloc_unlock>
 80045e2:	42a3      	cmp	r3, r4
 80045e4:	d90a      	bls.n	80045fc <_free_r+0x48>
 80045e6:	6821      	ldr	r1, [r4, #0]
 80045e8:	1862      	adds	r2, r4, r1
 80045ea:	4293      	cmp	r3, r2
 80045ec:	bf01      	itttt	eq
 80045ee:	681a      	ldreq	r2, [r3, #0]
 80045f0:	685b      	ldreq	r3, [r3, #4]
 80045f2:	1852      	addeq	r2, r2, r1
 80045f4:	6022      	streq	r2, [r4, #0]
 80045f6:	6063      	str	r3, [r4, #4]
 80045f8:	6004      	str	r4, [r0, #0]
 80045fa:	e7ed      	b.n	80045d8 <_free_r+0x24>
 80045fc:	461a      	mov	r2, r3
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	b10b      	cbz	r3, 8004606 <_free_r+0x52>
 8004602:	42a3      	cmp	r3, r4
 8004604:	d9fa      	bls.n	80045fc <_free_r+0x48>
 8004606:	6811      	ldr	r1, [r2, #0]
 8004608:	1850      	adds	r0, r2, r1
 800460a:	42a0      	cmp	r0, r4
 800460c:	d10b      	bne.n	8004626 <_free_r+0x72>
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	4401      	add	r1, r0
 8004612:	1850      	adds	r0, r2, r1
 8004614:	4283      	cmp	r3, r0
 8004616:	6011      	str	r1, [r2, #0]
 8004618:	d1de      	bne.n	80045d8 <_free_r+0x24>
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4401      	add	r1, r0
 8004620:	6011      	str	r1, [r2, #0]
 8004622:	6053      	str	r3, [r2, #4]
 8004624:	e7d8      	b.n	80045d8 <_free_r+0x24>
 8004626:	d902      	bls.n	800462e <_free_r+0x7a>
 8004628:	230c      	movs	r3, #12
 800462a:	602b      	str	r3, [r5, #0]
 800462c:	e7d4      	b.n	80045d8 <_free_r+0x24>
 800462e:	6820      	ldr	r0, [r4, #0]
 8004630:	1821      	adds	r1, r4, r0
 8004632:	428b      	cmp	r3, r1
 8004634:	bf01      	itttt	eq
 8004636:	6819      	ldreq	r1, [r3, #0]
 8004638:	685b      	ldreq	r3, [r3, #4]
 800463a:	1809      	addeq	r1, r1, r0
 800463c:	6021      	streq	r1, [r4, #0]
 800463e:	6063      	str	r3, [r4, #4]
 8004640:	6054      	str	r4, [r2, #4]
 8004642:	e7c9      	b.n	80045d8 <_free_r+0x24>
 8004644:	bd38      	pop	{r3, r4, r5, pc}
 8004646:	bf00      	nop
 8004648:	200001ac 	.word	0x200001ac

0800464c <_malloc_r>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	1ccd      	adds	r5, r1, #3
 8004650:	f025 0503 	bic.w	r5, r5, #3
 8004654:	3508      	adds	r5, #8
 8004656:	2d0c      	cmp	r5, #12
 8004658:	bf38      	it	cc
 800465a:	250c      	movcc	r5, #12
 800465c:	2d00      	cmp	r5, #0
 800465e:	4606      	mov	r6, r0
 8004660:	db01      	blt.n	8004666 <_malloc_r+0x1a>
 8004662:	42a9      	cmp	r1, r5
 8004664:	d903      	bls.n	800466e <_malloc_r+0x22>
 8004666:	230c      	movs	r3, #12
 8004668:	6033      	str	r3, [r6, #0]
 800466a:	2000      	movs	r0, #0
 800466c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466e:	f000 f87d 	bl	800476c <__malloc_lock>
 8004672:	4921      	ldr	r1, [pc, #132]	; (80046f8 <_malloc_r+0xac>)
 8004674:	680a      	ldr	r2, [r1, #0]
 8004676:	4614      	mov	r4, r2
 8004678:	b99c      	cbnz	r4, 80046a2 <_malloc_r+0x56>
 800467a:	4f20      	ldr	r7, [pc, #128]	; (80046fc <_malloc_r+0xb0>)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	b923      	cbnz	r3, 800468a <_malloc_r+0x3e>
 8004680:	4621      	mov	r1, r4
 8004682:	4630      	mov	r0, r6
 8004684:	f000 f862 	bl	800474c <_sbrk_r>
 8004688:	6038      	str	r0, [r7, #0]
 800468a:	4629      	mov	r1, r5
 800468c:	4630      	mov	r0, r6
 800468e:	f000 f85d 	bl	800474c <_sbrk_r>
 8004692:	1c43      	adds	r3, r0, #1
 8004694:	d123      	bne.n	80046de <_malloc_r+0x92>
 8004696:	230c      	movs	r3, #12
 8004698:	4630      	mov	r0, r6
 800469a:	6033      	str	r3, [r6, #0]
 800469c:	f000 f86c 	bl	8004778 <__malloc_unlock>
 80046a0:	e7e3      	b.n	800466a <_malloc_r+0x1e>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	1b5b      	subs	r3, r3, r5
 80046a6:	d417      	bmi.n	80046d8 <_malloc_r+0x8c>
 80046a8:	2b0b      	cmp	r3, #11
 80046aa:	d903      	bls.n	80046b4 <_malloc_r+0x68>
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	441c      	add	r4, r3
 80046b0:	6025      	str	r5, [r4, #0]
 80046b2:	e004      	b.n	80046be <_malloc_r+0x72>
 80046b4:	6863      	ldr	r3, [r4, #4]
 80046b6:	42a2      	cmp	r2, r4
 80046b8:	bf0c      	ite	eq
 80046ba:	600b      	streq	r3, [r1, #0]
 80046bc:	6053      	strne	r3, [r2, #4]
 80046be:	4630      	mov	r0, r6
 80046c0:	f000 f85a 	bl	8004778 <__malloc_unlock>
 80046c4:	f104 000b 	add.w	r0, r4, #11
 80046c8:	1d23      	adds	r3, r4, #4
 80046ca:	f020 0007 	bic.w	r0, r0, #7
 80046ce:	1ac2      	subs	r2, r0, r3
 80046d0:	d0cc      	beq.n	800466c <_malloc_r+0x20>
 80046d2:	1a1b      	subs	r3, r3, r0
 80046d4:	50a3      	str	r3, [r4, r2]
 80046d6:	e7c9      	b.n	800466c <_malloc_r+0x20>
 80046d8:	4622      	mov	r2, r4
 80046da:	6864      	ldr	r4, [r4, #4]
 80046dc:	e7cc      	b.n	8004678 <_malloc_r+0x2c>
 80046de:	1cc4      	adds	r4, r0, #3
 80046e0:	f024 0403 	bic.w	r4, r4, #3
 80046e4:	42a0      	cmp	r0, r4
 80046e6:	d0e3      	beq.n	80046b0 <_malloc_r+0x64>
 80046e8:	1a21      	subs	r1, r4, r0
 80046ea:	4630      	mov	r0, r6
 80046ec:	f000 f82e 	bl	800474c <_sbrk_r>
 80046f0:	3001      	adds	r0, #1
 80046f2:	d1dd      	bne.n	80046b0 <_malloc_r+0x64>
 80046f4:	e7cf      	b.n	8004696 <_malloc_r+0x4a>
 80046f6:	bf00      	nop
 80046f8:	200001ac 	.word	0x200001ac
 80046fc:	200001b0 	.word	0x200001b0

08004700 <_realloc_r>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	4607      	mov	r7, r0
 8004704:	4614      	mov	r4, r2
 8004706:	460e      	mov	r6, r1
 8004708:	b921      	cbnz	r1, 8004714 <_realloc_r+0x14>
 800470a:	4611      	mov	r1, r2
 800470c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004710:	f7ff bf9c 	b.w	800464c <_malloc_r>
 8004714:	b922      	cbnz	r2, 8004720 <_realloc_r+0x20>
 8004716:	f7ff ff4d 	bl	80045b4 <_free_r>
 800471a:	4625      	mov	r5, r4
 800471c:	4628      	mov	r0, r5
 800471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004720:	f000 f830 	bl	8004784 <_malloc_usable_size_r>
 8004724:	42a0      	cmp	r0, r4
 8004726:	d20f      	bcs.n	8004748 <_realloc_r+0x48>
 8004728:	4621      	mov	r1, r4
 800472a:	4638      	mov	r0, r7
 800472c:	f7ff ff8e 	bl	800464c <_malloc_r>
 8004730:	4605      	mov	r5, r0
 8004732:	2800      	cmp	r0, #0
 8004734:	d0f2      	beq.n	800471c <_realloc_r+0x1c>
 8004736:	4631      	mov	r1, r6
 8004738:	4622      	mov	r2, r4
 800473a:	f7ff ff13 	bl	8004564 <memcpy>
 800473e:	4631      	mov	r1, r6
 8004740:	4638      	mov	r0, r7
 8004742:	f7ff ff37 	bl	80045b4 <_free_r>
 8004746:	e7e9      	b.n	800471c <_realloc_r+0x1c>
 8004748:	4635      	mov	r5, r6
 800474a:	e7e7      	b.n	800471c <_realloc_r+0x1c>

0800474c <_sbrk_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	2300      	movs	r3, #0
 8004750:	4d05      	ldr	r5, [pc, #20]	; (8004768 <_sbrk_r+0x1c>)
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	f7fd f948 	bl	80019ec <_sbrk>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_sbrk_r+0x1a>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b103      	cbz	r3, 8004766 <_sbrk_r+0x1a>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	20000640 	.word	0x20000640

0800476c <__malloc_lock>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__malloc_lock+0x8>)
 800476e:	f000 b811 	b.w	8004794 <__retarget_lock_acquire_recursive>
 8004772:	bf00      	nop
 8004774:	20000648 	.word	0x20000648

08004778 <__malloc_unlock>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__malloc_unlock+0x8>)
 800477a:	f000 b80c 	b.w	8004796 <__retarget_lock_release_recursive>
 800477e:	bf00      	nop
 8004780:	20000648 	.word	0x20000648

08004784 <_malloc_usable_size_r>:
 8004784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004788:	1f18      	subs	r0, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	bfbc      	itt	lt
 800478e:	580b      	ldrlt	r3, [r1, r0]
 8004790:	18c0      	addlt	r0, r0, r3
 8004792:	4770      	bx	lr

08004794 <__retarget_lock_acquire_recursive>:
 8004794:	4770      	bx	lr

08004796 <__retarget_lock_release_recursive>:
 8004796:	4770      	bx	lr

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
