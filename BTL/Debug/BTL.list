
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004044  08004044  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08004044  08004044  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004044  08004044  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004044  08004044  00014044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800404c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000108  08004154  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004154  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaca  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c3  00000000  00000000  0002ebfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00030fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00031d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188a6  00000000  00000000  00032a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ceb  00000000  00000000  0004b2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3eb  00000000  00000000  0005bfc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e73b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b78  00000000  00000000  000e7408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000108 	.word	0x20000108
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ef8 	.word	0x08003ef8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000010c 	.word	0x2000010c
 8000148:	08003ef8 	.word	0x08003ef8

0800014c <subKeyProcess>:
int KeyReg2[ARRAY_SIZE] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int KeyReg3[ARRAY_SIZE] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress[ARRAY_SIZE] = {2000, 2000, 2000, 2000};

void subKeyProcess(int i){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for(int j = 0; j < ARRAY_SIZE; j++){
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e007      	b.n	800016a <subKeyProcess+0x1e>
		button_flag[j] = 0;
 800015a:	4a0a      	ldr	r2, [pc, #40]	; (8000184 <subKeyProcess+0x38>)
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	2100      	movs	r1, #0
 8000160:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int j = 0; j < ARRAY_SIZE; j++){
 8000164:	68fb      	ldr	r3, [r7, #12]
 8000166:	3301      	adds	r3, #1
 8000168:	60fb      	str	r3, [r7, #12]
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	2b03      	cmp	r3, #3
 800016e:	ddf4      	ble.n	800015a <subKeyProcess+0xe>
	}
	button_flag[i] = 1;
 8000170:	4a04      	ldr	r2, [pc, #16]	; (8000184 <subKeyProcess+0x38>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2101      	movs	r1, #1
 8000176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800017a:	bf00      	nop
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000124 	.word	0x20000124

08000188 <subKeyProcess0>:

void subKeyProcess0(){
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
	PRESSED_STATE_0 = 1;
 800018c:	4b03      	ldr	r3, [pc, #12]	; (800019c <subKeyProcess0+0x14>)
 800018e:	2201      	movs	r2, #1
 8000190:	601a      	str	r2, [r3, #0]
}
 8000192:	bf00      	nop
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000134 	.word	0x20000134

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	KeyReg0[0] = KeyReg1[0];
 80001a6:	4b57      	ldr	r3, [pc, #348]	; (8000304 <getKeyInput+0x164>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a57      	ldr	r2, [pc, #348]	; (8000308 <getKeyInput+0x168>)
 80001ac:	6013      	str	r3, [r2, #0]
	KeyReg1[0] = KeyReg2[0];
 80001ae:	4b57      	ldr	r3, [pc, #348]	; (800030c <getKeyInput+0x16c>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a54      	ldr	r2, [pc, #336]	; (8000304 <getKeyInput+0x164>)
 80001b4:	6013      	str	r3, [r2, #0]
	KeyReg2[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001b6:	2101      	movs	r1, #1
 80001b8:	4855      	ldr	r0, [pc, #340]	; (8000310 <getKeyInput+0x170>)
 80001ba:	f001 fd61 	bl	8001c80 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	461a      	mov	r2, r3
 80001c2:	4b52      	ldr	r3, [pc, #328]	; (800030c <getKeyInput+0x16c>)
 80001c4:	601a      	str	r2, [r3, #0]

	KeyReg0[1] = KeyReg1[1];
 80001c6:	4b4f      	ldr	r3, [pc, #316]	; (8000304 <getKeyInput+0x164>)
 80001c8:	685b      	ldr	r3, [r3, #4]
 80001ca:	4a4f      	ldr	r2, [pc, #316]	; (8000308 <getKeyInput+0x168>)
 80001cc:	6053      	str	r3, [r2, #4]
	KeyReg1[1] = KeyReg2[1];
 80001ce:	4b4f      	ldr	r3, [pc, #316]	; (800030c <getKeyInput+0x16c>)
 80001d0:	685b      	ldr	r3, [r3, #4]
 80001d2:	4a4c      	ldr	r2, [pc, #304]	; (8000304 <getKeyInput+0x164>)
 80001d4:	6053      	str	r3, [r2, #4]
	KeyReg2[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80001d6:	2102      	movs	r1, #2
 80001d8:	484d      	ldr	r0, [pc, #308]	; (8000310 <getKeyInput+0x170>)
 80001da:	f001 fd51 	bl	8001c80 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b4a      	ldr	r3, [pc, #296]	; (800030c <getKeyInput+0x16c>)
 80001e4:	605a      	str	r2, [r3, #4]

	KeyReg0[2] = KeyReg1[2];
 80001e6:	4b47      	ldr	r3, [pc, #284]	; (8000304 <getKeyInput+0x164>)
 80001e8:	689b      	ldr	r3, [r3, #8]
 80001ea:	4a47      	ldr	r2, [pc, #284]	; (8000308 <getKeyInput+0x168>)
 80001ec:	6093      	str	r3, [r2, #8]
	KeyReg1[2] = KeyReg2[2];
 80001ee:	4b47      	ldr	r3, [pc, #284]	; (800030c <getKeyInput+0x16c>)
 80001f0:	689b      	ldr	r3, [r3, #8]
 80001f2:	4a44      	ldr	r2, [pc, #272]	; (8000304 <getKeyInput+0x164>)
 80001f4:	6093      	str	r3, [r2, #8]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80001f6:	2110      	movs	r1, #16
 80001f8:	4845      	ldr	r0, [pc, #276]	; (8000310 <getKeyInput+0x170>)
 80001fa:	f001 fd41 	bl	8001c80 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	461a      	mov	r2, r3
 8000202:	4b42      	ldr	r3, [pc, #264]	; (800030c <getKeyInput+0x16c>)
 8000204:	609a      	str	r2, [r3, #8]

	KeyReg0[3] = KeyReg1[3];
 8000206:	4b3f      	ldr	r3, [pc, #252]	; (8000304 <getKeyInput+0x164>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	4a3f      	ldr	r2, [pc, #252]	; (8000308 <getKeyInput+0x168>)
 800020c:	60d3      	str	r3, [r2, #12]
	KeyReg1[3] = KeyReg2[3];
 800020e:	4b3f      	ldr	r3, [pc, #252]	; (800030c <getKeyInput+0x16c>)
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	4a3c      	ldr	r2, [pc, #240]	; (8000304 <getKeyInput+0x164>)
 8000214:	60d3      	str	r3, [r2, #12]
	KeyReg2[3] = HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 8000216:	2101      	movs	r1, #1
 8000218:	483e      	ldr	r0, [pc, #248]	; (8000314 <getKeyInput+0x174>)
 800021a:	f001 fd31 	bl	8001c80 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b3a      	ldr	r3, [pc, #232]	; (800030c <getKeyInput+0x16c>)
 8000224:	60da      	str	r2, [r3, #12]

	for(int i = 0; i < ARRAY_SIZE; i++){
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e063      	b.n	80002f4 <getKeyInput+0x154>
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 800022c:	4a36      	ldr	r2, [pc, #216]	; (8000308 <getKeyInput+0x168>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4933      	ldr	r1, [pc, #204]	; (8000304 <getKeyInput+0x164>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d156      	bne.n	80002ee <getKeyInput+0x14e>
 8000240:	4a30      	ldr	r2, [pc, #192]	; (8000304 <getKeyInput+0x164>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4930      	ldr	r1, [pc, #192]	; (800030c <getKeyInput+0x16c>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d14c      	bne.n	80002ee <getKeyInput+0x14e>
			if(KeyReg3[i] != KeyReg2[i]){
 8000254:	4a30      	ldr	r2, [pc, #192]	; (8000318 <getKeyInput+0x178>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	492b      	ldr	r1, [pc, #172]	; (800030c <getKeyInput+0x16c>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000264:	429a      	cmp	r2, r3
 8000266:	d017      	beq.n	8000298 <getKeyInput+0xf8>
				KeyReg3[i] = KeyReg2[i];
 8000268:	4a28      	ldr	r2, [pc, #160]	; (800030c <getKeyInput+0x16c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	4929      	ldr	r1, [pc, #164]	; (8000318 <getKeyInput+0x178>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 8000278:	4a24      	ldr	r2, [pc, #144]	; (800030c <getKeyInput+0x16c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d134      	bne.n	80002ee <getKeyInput+0x14e>
					subKeyProcess(i);
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f7ff ff61 	bl	800014c <subKeyProcess>
					TimerForKeyPress[i] = 2000;
 800028a:	4a24      	ldr	r2, [pc, #144]	; (800031c <getKeyInput+0x17c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000296:	e02a      	b.n	80002ee <getKeyInput+0x14e>
				}
			}else{
				TimerForKeyPress[i]--;
 8000298:	4a20      	ldr	r2, [pc, #128]	; (800031c <getKeyInput+0x17c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a0:	1e5a      	subs	r2, r3, #1
 80002a2:	491e      	ldr	r1, [pc, #120]	; (800031c <getKeyInput+0x17c>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0){
 80002aa:	4a1c      	ldr	r2, [pc, #112]	; (800031c <getKeyInput+0x17c>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d11b      	bne.n	80002ee <getKeyInput+0x14e>
					if(i == 0 && KeyReg2[0] == PRESSED_STATE){
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d106      	bne.n	80002ca <getKeyInput+0x12a>
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <getKeyInput+0x16c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d102      	bne.n	80002ca <getKeyInput+0x12a>
						subKeyProcess0();
 80002c4:	f7ff ff60 	bl	8000188 <subKeyProcess0>
 80002c8:	e00b      	b.n	80002e2 <getKeyInput+0x142>
					}
					else if(i != 0 && KeyReg2[i] == PRESSED_STATE){
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d008      	beq.n	80002e2 <getKeyInput+0x142>
 80002d0:	4a0e      	ldr	r2, [pc, #56]	; (800030c <getKeyInput+0x16c>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d102      	bne.n	80002e2 <getKeyInput+0x142>
						subKeyProcess(i);
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f7ff ff35 	bl	800014c <subKeyProcess>
					}
					TimerForKeyPress[i] = 2000;
 80002e2:	4a0e      	ldr	r2, [pc, #56]	; (800031c <getKeyInput+0x17c>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80002ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < ARRAY_SIZE; i++){
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	3301      	adds	r3, #1
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	dd98      	ble.n	800022c <getKeyInput+0x8c>
				}
			}
		}
	}
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000010 	.word	0x20000010
 8000308:	20000000 	.word	0x20000000
 800030c:	20000020 	.word	0x20000020
 8000310:	40010800 	.word	0x40010800
 8000314:	40010c00 	.word	0x40010c00
 8000318:	20000030 	.word	0x20000030
 800031c:	20000040 	.word	0x20000040

08000320 <print>:

#include "fsm_automatic.h"
#include "global.h"
#include "i2c-lcd.h"

void print(){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	lcd_goto_XY(0, 0);
 8000324:	2100      	movs	r1, #0
 8000326:	2000      	movs	r0, #0
 8000328:	f000 fd48 	bl	8000dbc <lcd_goto_XY>
	lcd_send_string(buffer1);
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <print+0x24>)
 800032e:	f000 fd29 	bl	8000d84 <lcd_send_string>
	lcd_goto_XY(1, 0);
 8000332:	2100      	movs	r1, #0
 8000334:	2001      	movs	r0, #1
 8000336:	f000 fd41 	bl	8000dbc <lcd_goto_XY>
	lcd_send_string(buffer2);
 800033a:	4803      	ldr	r0, [pc, #12]	; (8000348 <print+0x28>)
 800033c:	f000 fd22 	bl	8000d84 <lcd_send_string>
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	200001c8 	.word	0x200001c8
 8000348:	200001b4 	.word	0x200001b4

0800034c <Reset>:

void Reset(){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	en0 = 1; en1 = 0; en2 = 1; en3 = 0;
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <Reset+0x80>)
 8000352:	2201      	movs	r2, #1
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <Reset+0x84>)
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <Reset+0x88>)
 800035e:	2201      	movs	r2, #1
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <Reset+0x8c>)
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
	i_1 = max_Red;
 8000368:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <Reset+0x90>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <Reset+0x94>)
 800036e:	6013      	str	r3, [r2, #0]
	j_1 = max_Yellow;
 8000370:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <Reset+0x98>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a1c      	ldr	r2, [pc, #112]	; (80003e8 <Reset+0x9c>)
 8000376:	6013      	str	r3, [r2, #0]
	t_1 = max_Green;
 8000378:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <Reset+0xa0>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <Reset+0xa4>)
 800037e:	6013      	str	r3, [r2, #0]
	i_2 = max_Red;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <Reset+0x90>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <Reset+0xa8>)
 8000386:	6013      	str	r3, [r2, #0]
	j_2 = max_Yellow;
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <Reset+0x98>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a1a      	ldr	r2, [pc, #104]	; (80003f8 <Reset+0xac>)
 800038e:	6013      	str	r3, [r2, #0]
	t_2 = max_Green;
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <Reset+0xa0>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a19      	ldr	r2, [pc, #100]	; (80003fc <Reset+0xb0>)
 8000396:	6013      	str	r3, [r2, #0]
	test = 1; r = 1; dem = 2;
 8000398:	4b19      	ldr	r3, [pc, #100]	; (8000400 <Reset+0xb4>)
 800039a:	2201      	movs	r2, #1
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <Reset+0xb8>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <Reset+0xbc>)
 80003a6:	2202      	movs	r2, #2
 80003a8:	601a      	str	r2, [r3, #0]
	turn = 0;
 80003aa:	4b18      	ldr	r3, [pc, #96]	; (800040c <Reset+0xc0>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
	counter = 0, counter2 = 1;
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <Reset+0xc4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <Reset+0xc8>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	601a      	str	r2, [r3, #0]
	bool = 0;
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <Reset+0xcc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	20000050 	.word	0x20000050
 80003d0:	20000140 	.word	0x20000140
 80003d4:	20000054 	.word	0x20000054
 80003d8:	20000144 	.word	0x20000144
 80003dc:	20000080 	.word	0x20000080
 80003e0:	2000005c 	.word	0x2000005c
 80003e4:	20000084 	.word	0x20000084
 80003e8:	20000060 	.word	0x20000060
 80003ec:	20000088 	.word	0x20000088
 80003f0:	20000064 	.word	0x20000064
 80003f4:	20000068 	.word	0x20000068
 80003f8:	2000006c 	.word	0x2000006c
 80003fc:	20000070 	.word	0x20000070
 8000400:	20000074 	.word	0x20000074
 8000404:	20000078 	.word	0x20000078
 8000408:	2000007c 	.word	0x2000007c
 800040c:	20000150 	.word	0x20000150
 8000410:	2000014c 	.word	0x2000014c
 8000414:	20000058 	.word	0x20000058
 8000418:	20000148 	.word	0x20000148

0800041c <case1>:

void case1() {
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	switch(counter){
 8000420:	4b8e      	ldr	r3, [pc, #568]	; (800065c <case1+0x240>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d05b      	beq.n	80004e0 <case1+0xc4>
 8000428:	2b02      	cmp	r3, #2
 800042a:	f300 8086 	bgt.w	800053a <case1+0x11e>
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <case1+0x1c>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d02a      	beq.n	800048c <case1+0x70>
 8000436:	e080      	b.n	800053a <case1+0x11e>
	case 0:
		LED_RED_1();
 8000438:	f000 fce2 	bl	8000e00 <LED_RED_1>
		LED_RED_3();
 800043c:	f000 fd46 	bl	8000ecc <LED_RED_3>
		if(i_1 <= 9){
 8000440:	4b87      	ldr	r3, [pc, #540]	; (8000660 <case1+0x244>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b09      	cmp	r3, #9
 8000446:	dc07      	bgt.n	8000458 <case1+0x3c>
			sprintf(buffer1, "Traffic 1: %d ", i_1);
 8000448:	4b85      	ldr	r3, [pc, #532]	; (8000660 <case1+0x244>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	461a      	mov	r2, r3
 800044e:	4985      	ldr	r1, [pc, #532]	; (8000664 <case1+0x248>)
 8000450:	4885      	ldr	r0, [pc, #532]	; (8000668 <case1+0x24c>)
 8000452:	f003 f917 	bl	8003684 <siprintf>
 8000456:	e006      	b.n	8000466 <case1+0x4a>
		}else{
			sprintf(buffer1, "Traffic 1: %d", i_1);
 8000458:	4b81      	ldr	r3, [pc, #516]	; (8000660 <case1+0x244>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	461a      	mov	r2, r3
 800045e:	4983      	ldr	r1, [pc, #524]	; (800066c <case1+0x250>)
 8000460:	4881      	ldr	r0, [pc, #516]	; (8000668 <case1+0x24c>)
 8000462:	f003 f90f 	bl	8003684 <siprintf>
		}

		i_1--;
 8000466:	4b7e      	ldr	r3, [pc, #504]	; (8000660 <case1+0x244>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	3b01      	subs	r3, #1
 800046c:	4a7c      	ldr	r2, [pc, #496]	; (8000660 <case1+0x244>)
 800046e:	6013      	str	r3, [r2, #0]
		if(i_1 == 0) {
 8000470:	4b7b      	ldr	r3, [pc, #492]	; (8000660 <case1+0x244>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d15b      	bne.n	8000530 <case1+0x114>
			i_1 = max_Red;
 8000478:	4b7d      	ldr	r3, [pc, #500]	; (8000670 <case1+0x254>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a78      	ldr	r2, [pc, #480]	; (8000660 <case1+0x244>)
 800047e:	6013      	str	r3, [r2, #0]
			counter++;
 8000480:	4b76      	ldr	r3, [pc, #472]	; (800065c <case1+0x240>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	4a75      	ldr	r2, [pc, #468]	; (800065c <case1+0x240>)
 8000488:	6013      	str	r3, [r2, #0]
		}
		break;
 800048a:	e051      	b.n	8000530 <case1+0x114>
	case 1:
		LED_GREEN_1();
 800048c:	f000 fcc8 	bl	8000e20 <LED_GREEN_1>
		LED_GREEN_3();
 8000490:	f000 fd2e 	bl	8000ef0 <LED_GREEN_3>
		if(t_1 <= 9){
 8000494:	4b77      	ldr	r3, [pc, #476]	; (8000674 <case1+0x258>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b09      	cmp	r3, #9
 800049a:	dc07      	bgt.n	80004ac <case1+0x90>
			sprintf(buffer1, "Traffic 1: %d ", t_1);
 800049c:	4b75      	ldr	r3, [pc, #468]	; (8000674 <case1+0x258>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	461a      	mov	r2, r3
 80004a2:	4970      	ldr	r1, [pc, #448]	; (8000664 <case1+0x248>)
 80004a4:	4870      	ldr	r0, [pc, #448]	; (8000668 <case1+0x24c>)
 80004a6:	f003 f8ed 	bl	8003684 <siprintf>
 80004aa:	e006      	b.n	80004ba <case1+0x9e>
		}else{
			sprintf(buffer1, "Traffic 1: %d", t_1);
 80004ac:	4b71      	ldr	r3, [pc, #452]	; (8000674 <case1+0x258>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	496e      	ldr	r1, [pc, #440]	; (800066c <case1+0x250>)
 80004b4:	486c      	ldr	r0, [pc, #432]	; (8000668 <case1+0x24c>)
 80004b6:	f003 f8e5 	bl	8003684 <siprintf>
		}
		t_1--;
 80004ba:	4b6e      	ldr	r3, [pc, #440]	; (8000674 <case1+0x258>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3b01      	subs	r3, #1
 80004c0:	4a6c      	ldr	r2, [pc, #432]	; (8000674 <case1+0x258>)
 80004c2:	6013      	str	r3, [r2, #0]
		if(t_1 == 0) {
 80004c4:	4b6b      	ldr	r3, [pc, #428]	; (8000674 <case1+0x258>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d133      	bne.n	8000534 <case1+0x118>
			t_1 = max_Green;
 80004cc:	4b6a      	ldr	r3, [pc, #424]	; (8000678 <case1+0x25c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a68      	ldr	r2, [pc, #416]	; (8000674 <case1+0x258>)
 80004d2:	6013      	str	r3, [r2, #0]
			counter++;
 80004d4:	4b61      	ldr	r3, [pc, #388]	; (800065c <case1+0x240>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a60      	ldr	r2, [pc, #384]	; (800065c <case1+0x240>)
 80004dc:	6013      	str	r3, [r2, #0]
		}
		break;
 80004de:	e029      	b.n	8000534 <case1+0x118>
	 case 2:
		LED_YELLOW_1();
 80004e0:	f000 fcae 	bl	8000e40 <LED_YELLOW_1>
		LED_YELLOW_3();
 80004e4:	f000 fd16 	bl	8000f14 <LED_YELLOW_3>
		if(j_1 <= 9){
 80004e8:	4b64      	ldr	r3, [pc, #400]	; (800067c <case1+0x260>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b09      	cmp	r3, #9
 80004ee:	dc07      	bgt.n	8000500 <case1+0xe4>
			sprintf(buffer1, "Traffic 1: %d ", j_1);
 80004f0:	4b62      	ldr	r3, [pc, #392]	; (800067c <case1+0x260>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	495b      	ldr	r1, [pc, #364]	; (8000664 <case1+0x248>)
 80004f8:	485b      	ldr	r0, [pc, #364]	; (8000668 <case1+0x24c>)
 80004fa:	f003 f8c3 	bl	8003684 <siprintf>
 80004fe:	e006      	b.n	800050e <case1+0xf2>
		}else{
			sprintf(buffer1, "Traffic 1: %d", j_1);
 8000500:	4b5e      	ldr	r3, [pc, #376]	; (800067c <case1+0x260>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4959      	ldr	r1, [pc, #356]	; (800066c <case1+0x250>)
 8000508:	4857      	ldr	r0, [pc, #348]	; (8000668 <case1+0x24c>)
 800050a:	f003 f8bb 	bl	8003684 <siprintf>
		}
		j_1--;
 800050e:	4b5b      	ldr	r3, [pc, #364]	; (800067c <case1+0x260>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3b01      	subs	r3, #1
 8000514:	4a59      	ldr	r2, [pc, #356]	; (800067c <case1+0x260>)
 8000516:	6013      	str	r3, [r2, #0]
		if(j_1 == 0) {
 8000518:	4b58      	ldr	r3, [pc, #352]	; (800067c <case1+0x260>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d10b      	bne.n	8000538 <case1+0x11c>
			j_1 = max_Yellow;
 8000520:	4b57      	ldr	r3, [pc, #348]	; (8000680 <case1+0x264>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a55      	ldr	r2, [pc, #340]	; (800067c <case1+0x260>)
 8000526:	6013      	str	r3, [r2, #0]
			counter = 0;
 8000528:	4b4c      	ldr	r3, [pc, #304]	; (800065c <case1+0x240>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
		}
		break;
 800052e:	e003      	b.n	8000538 <case1+0x11c>
		break;
 8000530:	bf00      	nop
 8000532:	e002      	b.n	800053a <case1+0x11e>
		break;
 8000534:	bf00      	nop
 8000536:	e000      	b.n	800053a <case1+0x11e>
		break;
 8000538:	bf00      	nop
	}

	switch(counter2){
 800053a:	4b52      	ldr	r3, [pc, #328]	; (8000684 <case1+0x268>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b02      	cmp	r3, #2
 8000540:	d05b      	beq.n	80005fa <case1+0x1de>
 8000542:	2b02      	cmp	r3, #2
 8000544:	f300 8086 	bgt.w	8000654 <case1+0x238>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <case1+0x136>
 800054c:	2b01      	cmp	r3, #1
 800054e:	d02a      	beq.n	80005a6 <case1+0x18a>
 8000550:	e080      	b.n	8000654 <case1+0x238>
	case 0:
		LED_RED_2();
 8000552:	f000 fc85 	bl	8000e60 <LED_RED_2>
		LED_RED_4();
 8000556:	f000 fcef 	bl	8000f38 <LED_RED_4>
		if(i_2 <= 9){
 800055a:	4b4b      	ldr	r3, [pc, #300]	; (8000688 <case1+0x26c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b09      	cmp	r3, #9
 8000560:	dc07      	bgt.n	8000572 <case1+0x156>
			sprintf(buffer2, "Traffic 2: %d ", i_2);
 8000562:	4b49      	ldr	r3, [pc, #292]	; (8000688 <case1+0x26c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	461a      	mov	r2, r3
 8000568:	4948      	ldr	r1, [pc, #288]	; (800068c <case1+0x270>)
 800056a:	4849      	ldr	r0, [pc, #292]	; (8000690 <case1+0x274>)
 800056c:	f003 f88a 	bl	8003684 <siprintf>
 8000570:	e006      	b.n	8000580 <case1+0x164>
		}else{
			sprintf(buffer2, "Traffic 2: %d", i_2);
 8000572:	4b45      	ldr	r3, [pc, #276]	; (8000688 <case1+0x26c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	4946      	ldr	r1, [pc, #280]	; (8000694 <case1+0x278>)
 800057a:	4845      	ldr	r0, [pc, #276]	; (8000690 <case1+0x274>)
 800057c:	f003 f882 	bl	8003684 <siprintf>
		}
		i_2--;
 8000580:	4b41      	ldr	r3, [pc, #260]	; (8000688 <case1+0x26c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	4a40      	ldr	r2, [pc, #256]	; (8000688 <case1+0x26c>)
 8000588:	6013      	str	r3, [r2, #0]
		if(i_2 == 0) {
 800058a:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <case1+0x26c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d15b      	bne.n	800064a <case1+0x22e>
			i_2 = max_Red;
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <case1+0x254>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a3c      	ldr	r2, [pc, #240]	; (8000688 <case1+0x26c>)
 8000598:	6013      	str	r3, [r2, #0]
			counter2++;
 800059a:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <case1+0x268>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a38      	ldr	r2, [pc, #224]	; (8000684 <case1+0x268>)
 80005a2:	6013      	str	r3, [r2, #0]
		}
		break;
 80005a4:	e051      	b.n	800064a <case1+0x22e>
	case 1:
		LED_GREEN_2();
 80005a6:	f000 fc6d 	bl	8000e84 <LED_GREEN_2>
		LED_GREEN_4();
 80005aa:	f000 fcd7 	bl	8000f5c <LED_GREEN_4>
		if(t_2 <= 9){
 80005ae:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <case1+0x27c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b09      	cmp	r3, #9
 80005b4:	dc07      	bgt.n	80005c6 <case1+0x1aa>
			sprintf(buffer2, "Traffic 2: %d ", t_2);
 80005b6:	4b38      	ldr	r3, [pc, #224]	; (8000698 <case1+0x27c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	4933      	ldr	r1, [pc, #204]	; (800068c <case1+0x270>)
 80005be:	4834      	ldr	r0, [pc, #208]	; (8000690 <case1+0x274>)
 80005c0:	f003 f860 	bl	8003684 <siprintf>
 80005c4:	e006      	b.n	80005d4 <case1+0x1b8>
		}else{
			sprintf(buffer2, "Traffic 2: %d", t_2);
 80005c6:	4b34      	ldr	r3, [pc, #208]	; (8000698 <case1+0x27c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4931      	ldr	r1, [pc, #196]	; (8000694 <case1+0x278>)
 80005ce:	4830      	ldr	r0, [pc, #192]	; (8000690 <case1+0x274>)
 80005d0:	f003 f858 	bl	8003684 <siprintf>
		}
		t_2--;
 80005d4:	4b30      	ldr	r3, [pc, #192]	; (8000698 <case1+0x27c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3b01      	subs	r3, #1
 80005da:	4a2f      	ldr	r2, [pc, #188]	; (8000698 <case1+0x27c>)
 80005dc:	6013      	str	r3, [r2, #0]
		if(t_2 == 0) {
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <case1+0x27c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d133      	bne.n	800064e <case1+0x232>
			t_2 = max_Green;
 80005e6:	4b24      	ldr	r3, [pc, #144]	; (8000678 <case1+0x25c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <case1+0x27c>)
 80005ec:	6013      	str	r3, [r2, #0]
			counter2++;
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <case1+0x268>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a23      	ldr	r2, [pc, #140]	; (8000684 <case1+0x268>)
 80005f6:	6013      	str	r3, [r2, #0]
		}
		break;
 80005f8:	e029      	b.n	800064e <case1+0x232>
	case 2:
		LED_YELLOW_2();
 80005fa:	f000 fc55 	bl	8000ea8 <LED_YELLOW_2>
		LED_YELLOW_4();
 80005fe:	f000 fcbf 	bl	8000f80 <LED_YELLOW_4>
		if(j_2 <= 9){
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <case1+0x280>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b09      	cmp	r3, #9
 8000608:	dc07      	bgt.n	800061a <case1+0x1fe>
			sprintf(buffer2, "Traffic 2: %d ", j_2);
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <case1+0x280>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	491e      	ldr	r1, [pc, #120]	; (800068c <case1+0x270>)
 8000612:	481f      	ldr	r0, [pc, #124]	; (8000690 <case1+0x274>)
 8000614:	f003 f836 	bl	8003684 <siprintf>
 8000618:	e006      	b.n	8000628 <case1+0x20c>
		}else{
			sprintf(buffer2, "Traffic 2: %d", j_2);
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <case1+0x280>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	491c      	ldr	r1, [pc, #112]	; (8000694 <case1+0x278>)
 8000622:	481b      	ldr	r0, [pc, #108]	; (8000690 <case1+0x274>)
 8000624:	f003 f82e 	bl	8003684 <siprintf>
		}
		j_2--;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <case1+0x280>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3b01      	subs	r3, #1
 800062e:	4a1b      	ldr	r2, [pc, #108]	; (800069c <case1+0x280>)
 8000630:	6013      	str	r3, [r2, #0]
		if(j_2 == 0) {
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <case1+0x280>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10b      	bne.n	8000652 <case1+0x236>
			j_2 = max_Yellow;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <case1+0x264>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <case1+0x280>)
 8000640:	6013      	str	r3, [r2, #0]
			counter2 = 0;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <case1+0x268>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
		}
		break;
 8000648:	e003      	b.n	8000652 <case1+0x236>
		break;
 800064a:	bf00      	nop
 800064c:	e002      	b.n	8000654 <case1+0x238>
		break;
 800064e:	bf00      	nop
 8000650:	e000      	b.n	8000654 <case1+0x238>
		break;
 8000652:	bf00      	nop
	}
	print();
 8000654:	f7ff fe64 	bl	8000320 <print>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000014c 	.word	0x2000014c
 8000660:	2000005c 	.word	0x2000005c
 8000664:	08003f10 	.word	0x08003f10
 8000668:	200001c8 	.word	0x200001c8
 800066c:	08003f20 	.word	0x08003f20
 8000670:	20000080 	.word	0x20000080
 8000674:	20000064 	.word	0x20000064
 8000678:	20000088 	.word	0x20000088
 800067c:	20000060 	.word	0x20000060
 8000680:	20000084 	.word	0x20000084
 8000684:	20000058 	.word	0x20000058
 8000688:	20000068 	.word	0x20000068
 800068c:	08003f30 	.word	0x08003f30
 8000690:	200001b4 	.word	0x200001b4
 8000694:	08003f40 	.word	0x08003f40
 8000698:	20000070 	.word	0x20000070
 800069c:	2000006c 	.word	0x2000006c

080006a0 <case3>:

void case3() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	switch(counter){
 80006a4:	4b3c      	ldr	r3, [pc, #240]	; (8000798 <case3+0xf8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d028      	beq.n	80006fe <case3+0x5e>
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	dc35      	bgt.n	800071c <case3+0x7c>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d002      	beq.n	80006ba <case3+0x1a>
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d011      	beq.n	80006dc <case3+0x3c>
 80006b8:	e030      	b.n	800071c <case3+0x7c>
	case 0:
		LED_RED_1();
 80006ba:	f000 fba1 	bl	8000e00 <LED_RED_1>
		LED_RED_3();
 80006be:	f000 fc05 	bl	8000ecc <LED_RED_3>
		sprintf(buffer1, "Den 1: %d", i_1);
 80006c2:	4b36      	ldr	r3, [pc, #216]	; (800079c <case3+0xfc>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	4935      	ldr	r1, [pc, #212]	; (80007a0 <case3+0x100>)
 80006ca:	4836      	ldr	r0, [pc, #216]	; (80007a4 <case3+0x104>)
 80006cc:	f002 ffda 	bl	8003684 <siprintf>
		counter++;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <case3+0xf8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a30      	ldr	r2, [pc, #192]	; (8000798 <case3+0xf8>)
 80006d8:	6013      	str	r3, [r2, #0]
		break;
 80006da:	e01f      	b.n	800071c <case3+0x7c>
	case 1:
		LED_GREEN_1();
 80006dc:	f000 fba0 	bl	8000e20 <LED_GREEN_1>
		LED_GREEN_3();
 80006e0:	f000 fc06 	bl	8000ef0 <LED_GREEN_3>
		sprintf(buffer1, "Den 1: %d", t_1);
 80006e4:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <case3+0x108>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	492d      	ldr	r1, [pc, #180]	; (80007a0 <case3+0x100>)
 80006ec:	482d      	ldr	r0, [pc, #180]	; (80007a4 <case3+0x104>)
 80006ee:	f002 ffc9 	bl	8003684 <siprintf>
		counter++;
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <case3+0xf8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	4a27      	ldr	r2, [pc, #156]	; (8000798 <case3+0xf8>)
 80006fa:	6013      	str	r3, [r2, #0]
		break;
 80006fc:	e00e      	b.n	800071c <case3+0x7c>
	 case 2:
		LED_YELLOW_1();
 80006fe:	f000 fb9f 	bl	8000e40 <LED_YELLOW_1>
		LED_YELLOW_3();
 8000702:	f000 fc07 	bl	8000f14 <LED_YELLOW_3>
		sprintf(buffer1, "Den 1: %d", j_1);
 8000706:	4b29      	ldr	r3, [pc, #164]	; (80007ac <case3+0x10c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	4924      	ldr	r1, [pc, #144]	; (80007a0 <case3+0x100>)
 800070e:	4825      	ldr	r0, [pc, #148]	; (80007a4 <case3+0x104>)
 8000710:	f002 ffb8 	bl	8003684 <siprintf>
		counter = 0;
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <case3+0xf8>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
		break;
 800071a:	bf00      	nop
	}

	switch(counter2){
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <case3+0x110>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d028      	beq.n	8000776 <case3+0xd6>
 8000724:	2b02      	cmp	r3, #2
 8000726:	dc35      	bgt.n	8000794 <case3+0xf4>
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <case3+0x92>
 800072c:	2b01      	cmp	r3, #1
 800072e:	d011      	beq.n	8000754 <case3+0xb4>
		LED_YELLOW_4();
		sprintf(buffer2, "Den 2: %d", j_2);
		counter2 = 0;
		break;
	}
}
 8000730:	e030      	b.n	8000794 <case3+0xf4>
		LED_RED_2();
 8000732:	f000 fb95 	bl	8000e60 <LED_RED_2>
		LED_RED_4();
 8000736:	f000 fbff 	bl	8000f38 <LED_RED_4>
		sprintf(buffer2, "Den 2: %d", i_2);
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <case3+0x114>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	491d      	ldr	r1, [pc, #116]	; (80007b8 <case3+0x118>)
 8000742:	481e      	ldr	r0, [pc, #120]	; (80007bc <case3+0x11c>)
 8000744:	f002 ff9e 	bl	8003684 <siprintf>
		counter2++;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <case3+0x110>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <case3+0x110>)
 8000750:	6013      	str	r3, [r2, #0]
		break;
 8000752:	e01f      	b.n	8000794 <case3+0xf4>
		LED_GREEN_2();
 8000754:	f000 fb96 	bl	8000e84 <LED_GREEN_2>
		LED_GREEN_4();
 8000758:	f000 fc00 	bl	8000f5c <LED_GREEN_4>
		sprintf(buffer2, "Den 2: %d", t_2);
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <case3+0x120>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4915      	ldr	r1, [pc, #84]	; (80007b8 <case3+0x118>)
 8000764:	4815      	ldr	r0, [pc, #84]	; (80007bc <case3+0x11c>)
 8000766:	f002 ff8d 	bl	8003684 <siprintf>
		counter2++;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <case3+0x110>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <case3+0x110>)
 8000772:	6013      	str	r3, [r2, #0]
		break;
 8000774:	e00e      	b.n	8000794 <case3+0xf4>
		LED_YELLOW_2();
 8000776:	f000 fb97 	bl	8000ea8 <LED_YELLOW_2>
		LED_YELLOW_4();
 800077a:	f000 fc01 	bl	8000f80 <LED_YELLOW_4>
		sprintf(buffer2, "Den 2: %d", j_2);
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <case3+0x124>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	490c      	ldr	r1, [pc, #48]	; (80007b8 <case3+0x118>)
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <case3+0x11c>)
 8000788:	f002 ff7c 	bl	8003684 <siprintf>
		counter2 = 0;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <case3+0x110>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
		break;
 8000792:	bf00      	nop
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000014c 	.word	0x2000014c
 800079c:	2000005c 	.word	0x2000005c
 80007a0:	08003f50 	.word	0x08003f50
 80007a4:	200001c8 	.word	0x200001c8
 80007a8:	20000064 	.word	0x20000064
 80007ac:	20000060 	.word	0x20000060
 80007b0:	20000058 	.word	0x20000058
 80007b4:	20000068 	.word	0x20000068
 80007b8:	08003f5c 	.word	0x08003f5c
 80007bc:	200001b4 	.word	0x200001b4
 80007c0:	20000070 	.word	0x20000070
 80007c4:	2000006c 	.word	0x2000006c

080007c8 <case2>:

int temp, test_1 = 0;

int case2(int mode,int a,
		GPIO_TypeDef* D0_PORT, uint16_t D0_PIN, GPIO_TypeDef* D1_PORT, uint16_t D1_PIN,
		GPIO_TypeDef* D2_PORT, uint16_t D2_PIN, GPIO_TypeDef* D3_PORT, uint16_t D3_PIN){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	807b      	strh	r3, [r7, #2]
	setup_Led7SEG();
 80007d6:	f000 fa27 	bl	8000c28 <setup_Led7SEG>
	if(en0 == 1)
 80007da:	4b5d      	ldr	r3, [pc, #372]	; (8000950 <case2+0x188>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d127      	bne.n	8000832 <case2+0x6a>
		switch(mode){
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d01b      	beq.n	8000820 <case2+0x58>
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b03      	cmp	r3, #3
 80007ec:	dc23      	bgt.n	8000836 <case2+0x6e>
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d003      	beq.n	80007fc <case2+0x34>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d009      	beq.n	800080e <case2+0x46>
 80007fa:	e01c      	b.n	8000836 <case2+0x6e>
		case 1:
			LED_RED_1();
 80007fc:	f000 fb00 	bl	8000e00 <LED_RED_1>
			LED_RED_2();
 8000800:	f000 fb2e 	bl	8000e60 <LED_RED_2>
			LED_RED_3();
 8000804:	f000 fb62 	bl	8000ecc <LED_RED_3>
			LED_RED_4();
 8000808:	f000 fb96 	bl	8000f38 <LED_RED_4>
			break;
 800080c:	e013      	b.n	8000836 <case2+0x6e>
		case 2:
			LED_YELLOW_1();
 800080e:	f000 fb17 	bl	8000e40 <LED_YELLOW_1>
			LED_YELLOW_2();
 8000812:	f000 fb49 	bl	8000ea8 <LED_YELLOW_2>
			LED_YELLOW_3();
 8000816:	f000 fb7d 	bl	8000f14 <LED_YELLOW_3>
			LED_YELLOW_4();
 800081a:	f000 fbb1 	bl	8000f80 <LED_YELLOW_4>
			break;
 800081e:	e00a      	b.n	8000836 <case2+0x6e>
		case 3:
			LED_GREEN_1();
 8000820:	f000 fafe 	bl	8000e20 <LED_GREEN_1>
			LED_GREEN_2();
 8000824:	f000 fb2e 	bl	8000e84 <LED_GREEN_2>
			LED_GREEN_3();
 8000828:	f000 fb62 	bl	8000ef0 <LED_GREEN_3>
			LED_GREEN_4();
 800082c:	f000 fb96 	bl	8000f5c <LED_GREEN_4>
			break;
 8000830:	e001      	b.n	8000836 <case2+0x6e>
		}
	else{
		off_LED();
 8000832:	f000 fbb7 	bl	8000fa4 <off_LED>
	}

	if(button_flag[1] == 1){
 8000836:	4b47      	ldr	r3, [pc, #284]	; (8000954 <case2+0x18c>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d10b      	bne.n	8000856 <case2+0x8e>
	  button_flag[1] = 0;
 800083e:	4b45      	ldr	r3, [pc, #276]	; (8000954 <case2+0x18c>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
	  if(a == 99){
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	2b63      	cmp	r3, #99	; 0x63
 8000848:	d102      	bne.n	8000850 <case2+0x88>
		  a = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	e002      	b.n	8000856 <case2+0x8e>
	  }else
		  a++;
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3301      	adds	r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
	}
	if(button_flag[3] == 1){
 8000856:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <case2+0x18c>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d105      	bne.n	800086a <case2+0xa2>
	  button_flag[3] = 0;
 800085e:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <case2+0x18c>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
	  a--;
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	3b01      	subs	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
	}
	if(a == 0){
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <case2+0xac>
	  a = 99;
 8000870:	2363      	movs	r3, #99	; 0x63
 8000872:	60bb      	str	r3, [r7, #8]
	}
	if(button_flag[2] == 1){
 8000874:	4b37      	ldr	r3, [pc, #220]	; (8000954 <case2+0x18c>)
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d11b      	bne.n	80008b4 <case2+0xec>
	  button_flag[2] = 0;
 800087c:	4b35      	ldr	r3, [pc, #212]	; (8000954 <case2+0x18c>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
	  switch(mode){
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2b03      	cmp	r3, #3
 8000886:	d011      	beq.n	80008ac <case2+0xe4>
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2b03      	cmp	r3, #3
 800088c:	dc13      	bgt.n	80008b6 <case2+0xee>
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d003      	beq.n	800089c <case2+0xd4>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d004      	beq.n	80008a4 <case2+0xdc>
 800089a:	e00c      	b.n	80008b6 <case2+0xee>
	  case 1:
		  prev_max_Red = a;
 800089c:	4a2e      	ldr	r2, [pc, #184]	; (8000958 <case2+0x190>)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	6013      	str	r3, [r2, #0]
		  break;
 80008a2:	e008      	b.n	80008b6 <case2+0xee>
	  case 2:
		  prev_max_Yellow = a;
 80008a4:	4a2d      	ldr	r2, [pc, #180]	; (800095c <case2+0x194>)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	6013      	str	r3, [r2, #0]
		  break;
 80008aa:	e004      	b.n	80008b6 <case2+0xee>
	  case 3:
		  prev_max_Green = a;
 80008ac:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <case2+0x198>)
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	6013      	str	r3, [r2, #0]
		  break;
 80008b2:	e000      	b.n	80008b6 <case2+0xee>
	  }
	}
 80008b4:	bf00      	nop
	lcd_goto_XY(0, 0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 fa7f 	bl	8000dbc <lcd_goto_XY>
	char buffer[20];
	if(mode == 1){
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d111      	bne.n	80008e8 <case2+0x120>
		if(a <= 9){
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	2b09      	cmp	r3, #9
 80008c8:	dc07      	bgt.n	80008da <case2+0x112>
			sprintf(buffer, "Time Red: %d ", a);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	4924      	ldr	r1, [pc, #144]	; (8000964 <case2+0x19c>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 fed6 	bl	8003684 <siprintf>
 80008d8:	e006      	b.n	80008e8 <case2+0x120>
		}else{
			sprintf(buffer, "Time Red: %d", a);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4921      	ldr	r1, [pc, #132]	; (8000968 <case2+0x1a0>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fece 	bl	8003684 <siprintf>
		}
	}

	if(mode == 2){
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d111      	bne.n	8000912 <case2+0x14a>
		if(a <= 9){
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	2b09      	cmp	r3, #9
 80008f2:	dc07      	bgt.n	8000904 <case2+0x13c>
			sprintf(buffer, "Time Yellow: %d ", a);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	491c      	ldr	r1, [pc, #112]	; (800096c <case2+0x1a4>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fec1 	bl	8003684 <siprintf>
 8000902:	e006      	b.n	8000912 <case2+0x14a>
		}else{
			sprintf(buffer, "Time Yellow: %d", a);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	4919      	ldr	r1, [pc, #100]	; (8000970 <case2+0x1a8>)
 800090c:	4618      	mov	r0, r3
 800090e:	f002 feb9 	bl	8003684 <siprintf>
		}
	}

	if(mode == 3){
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b03      	cmp	r3, #3
 8000916:	d111      	bne.n	800093c <case2+0x174>
		if(a <= 9){
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2b09      	cmp	r3, #9
 800091c:	dc07      	bgt.n	800092e <case2+0x166>
			sprintf(buffer, "Time Green: %d ", a);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	4913      	ldr	r1, [pc, #76]	; (8000974 <case2+0x1ac>)
 8000926:	4618      	mov	r0, r3
 8000928:	f002 feac 	bl	8003684 <siprintf>
 800092c:	e006      	b.n	800093c <case2+0x174>
		}else{
			sprintf(buffer, "Time Green: %d", a);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	4910      	ldr	r1, [pc, #64]	; (8000978 <case2+0x1b0>)
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fea4 	bl	8003684 <siprintf>
		}
	}
	lcd_send_string(buffer);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fa1f 	bl	8000d84 <lcd_send_string>
	return a;
 8000946:	68bb      	ldr	r3, [r7, #8]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000050 	.word	0x20000050
 8000954:	20000124 	.word	0x20000124
 8000958:	2000008c 	.word	0x2000008c
 800095c:	20000090 	.word	0x20000090
 8000960:	20000094 	.word	0x20000094
 8000964:	08003f68 	.word	0x08003f68
 8000968:	08003f78 	.word	0x08003f78
 800096c:	08003f88 	.word	0x08003f88
 8000970:	08003f9c 	.word	0x08003f9c
 8000974:	08003fac 	.word	0x08003fac
 8000978:	08003fbc 	.word	0x08003fbc

0800097c <fsm_manual>:


void fsm_manual(){
 800097c:	b580      	push	{r7, lr}
 800097e:	b090      	sub	sp, #64	; 0x40
 8000980:	af06      	add	r7, sp, #24
	if(button_flag[0] == 1){
 8000982:	4b99      	ldr	r3, [pc, #612]	; (8000be8 <fsm_manual+0x26c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d14a      	bne.n	8000a20 <fsm_manual+0xa4>
		lcd_clear_display();
 800098a:	f000 fa10 	bl	8000dae <lcd_clear_display>
		button_flag[0] = 0;
 800098e:	4b96      	ldr	r3, [pc, #600]	; (8000be8 <fsm_manual+0x26c>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
		mode++;
 8000994:	4b95      	ldr	r3, [pc, #596]	; (8000bec <fsm_manual+0x270>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	4a94      	ldr	r2, [pc, #592]	; (8000bec <fsm_manual+0x270>)
 800099c:	6013      	str	r3, [r2, #0]
		test_1 = 1;
 800099e:	4b94      	ldr	r3, [pc, #592]	; (8000bf0 <fsm_manual+0x274>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	601a      	str	r2, [r3, #0]
		if(mode == 4 || mode == 6) {
 80009a4:	4b91      	ldr	r3, [pc, #580]	; (8000bec <fsm_manual+0x270>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d003      	beq.n	80009b4 <fsm_manual+0x38>
 80009ac:	4b8f      	ldr	r3, [pc, #572]	; (8000bec <fsm_manual+0x270>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b06      	cmp	r3, #6
 80009b2:	d135      	bne.n	8000a20 <fsm_manual+0xa4>
			lcd_clear_display();
 80009b4:	f000 f9fb 	bl	8000dae <lcd_clear_display>
			if(prev_max_Red == prev_max_Green + prev_max_Yellow){
 80009b8:	4b8e      	ldr	r3, [pc, #568]	; (8000bf4 <fsm_manual+0x278>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b8e      	ldr	r3, [pc, #568]	; (8000bf8 <fsm_manual+0x27c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	441a      	add	r2, r3
 80009c2:	4b8e      	ldr	r3, [pc, #568]	; (8000bfc <fsm_manual+0x280>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d10c      	bne.n	80009e4 <fsm_manual+0x68>
				max_Red = prev_max_Red;
 80009ca:	4b8c      	ldr	r3, [pc, #560]	; (8000bfc <fsm_manual+0x280>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a8c      	ldr	r2, [pc, #560]	; (8000c00 <fsm_manual+0x284>)
 80009d0:	6013      	str	r3, [r2, #0]
				max_Green = prev_max_Green;
 80009d2:	4b88      	ldr	r3, [pc, #544]	; (8000bf4 <fsm_manual+0x278>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a8b      	ldr	r2, [pc, #556]	; (8000c04 <fsm_manual+0x288>)
 80009d8:	6013      	str	r3, [r2, #0]
				max_Yellow = prev_max_Yellow;
 80009da:	4b87      	ldr	r3, [pc, #540]	; (8000bf8 <fsm_manual+0x27c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a8a      	ldr	r2, [pc, #552]	; (8000c08 <fsm_manual+0x28c>)
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e018      	b.n	8000a16 <fsm_manual+0x9a>
			}else if(prev_max_Red > prev_max_Yellow){
 80009e4:	4b85      	ldr	r3, [pc, #532]	; (8000bfc <fsm_manual+0x280>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b83      	ldr	r3, [pc, #524]	; (8000bf8 <fsm_manual+0x27c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dd12      	ble.n	8000a16 <fsm_manual+0x9a>
				prev_max_Green = prev_max_Red - prev_max_Yellow;
 80009f0:	4b82      	ldr	r3, [pc, #520]	; (8000bfc <fsm_manual+0x280>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b80      	ldr	r3, [pc, #512]	; (8000bf8 <fsm_manual+0x27c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	4a7e      	ldr	r2, [pc, #504]	; (8000bf4 <fsm_manual+0x278>)
 80009fc:	6013      	str	r3, [r2, #0]
				max_Red = prev_max_Red;
 80009fe:	4b7f      	ldr	r3, [pc, #508]	; (8000bfc <fsm_manual+0x280>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a7f      	ldr	r2, [pc, #508]	; (8000c00 <fsm_manual+0x284>)
 8000a04:	6013      	str	r3, [r2, #0]
				max_Green = prev_max_Green;
 8000a06:	4b7b      	ldr	r3, [pc, #492]	; (8000bf4 <fsm_manual+0x278>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a7e      	ldr	r2, [pc, #504]	; (8000c04 <fsm_manual+0x288>)
 8000a0c:	6013      	str	r3, [r2, #0]
				max_Yellow = prev_max_Yellow;
 8000a0e:	4b7a      	ldr	r3, [pc, #488]	; (8000bf8 <fsm_manual+0x27c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a7d      	ldr	r2, [pc, #500]	; (8000c08 <fsm_manual+0x28c>)
 8000a14:	6013      	str	r3, [r2, #0]
			}
			Reset();
 8000a16:	f7ff fc99 	bl	800034c <Reset>
			mode = 0;
 8000a1a:	4b74      	ldr	r3, [pc, #464]	; (8000bec <fsm_manual+0x270>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_flag[3] == 1){
 8000a20:	4b7a      	ldr	r3, [pc, #488]	; (8000c0c <fsm_manual+0x290>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d108      	bne.n	8000a3a <fsm_manual+0xbe>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4879      	ldr	r0, [pc, #484]	; (8000c10 <fsm_manual+0x294>)
 8000a2c:	f001 f957 	bl	8001cde <HAL_GPIO_TogglePin>
		setTimer(3, 1000);
 8000a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 fc6f 	bl	8001318 <setTimer>
	}
	if(mode != 0 && mode != 6){
 8000a3a:	4b6c      	ldr	r3, [pc, #432]	; (8000bec <fsm_manual+0x270>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d016      	beq.n	8000a70 <fsm_manual+0xf4>
 8000a42:	4b6a      	ldr	r3, [pc, #424]	; (8000bec <fsm_manual+0x270>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d012      	beq.n	8000a70 <fsm_manual+0xf4>
		lcd_goto_XY(1, 0);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f000 f9b5 	bl	8000dbc <lcd_goto_XY>
		char buffer[20];
		sprintf(buffer, "Mode: %d", mode + 1);
 8000a52:	4b66      	ldr	r3, [pc, #408]	; (8000bec <fsm_manual+0x270>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	496d      	ldr	r1, [pc, #436]	; (8000c14 <fsm_manual+0x298>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fe10 	bl	8003684 <siprintf>
		lcd_send_string(buffer);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f98b 	bl	8000d84 <lcd_send_string>
	if(mode != 0 && mode != 6){
 8000a6e:	e010      	b.n	8000a92 <fsm_manual+0x116>
	}else if(mode == 6){
 8000a70:	4b5e      	ldr	r3, [pc, #376]	; (8000bec <fsm_manual+0x270>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d10c      	bne.n	8000a92 <fsm_manual+0x116>
		lcd_goto_XY(1, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f000 f99e 	bl	8000dbc <lcd_goto_XY>
		char buffer[20];
		sprintf(buffer, "Mode manual");
 8000a80:	463b      	mov	r3, r7
 8000a82:	4965      	ldr	r1, [pc, #404]	; (8000c18 <fsm_manual+0x29c>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 fdfd 	bl	8003684 <siprintf>
		lcd_send_string(buffer);
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f979 	bl	8000d84 <lcd_send_string>
	}
	switch(mode){
 8000a92:	4b56      	ldr	r3, [pc, #344]	; (8000bec <fsm_manual+0x270>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	f200 8085 	bhi.w	8000ba6 <fsm_manual+0x22a>
 8000a9c:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <fsm_manual+0x128>)
 8000a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa2:	bf00      	nop
 8000aa4:	08000ab5 	.word	0x08000ab5
 8000aa8:	08000acd 	.word	0x08000acd
 8000aac:	08000b15 	.word	0x08000b15
 8000ab0:	08000b5d 	.word	0x08000b5d
	case 0:
	  if(timer_flag[0] == 1){
 8000ab4:	4b55      	ldr	r3, [pc, #340]	; (8000c0c <fsm_manual+0x290>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d173      	bne.n	8000ba4 <fsm_manual+0x228>
		  case1();
 8000abc:	f7ff fcae 	bl	800041c <case1>
		  setTimer(0, 1000);
 8000ac0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 fc27 	bl	8001318 <setTimer>
	  }
	  break;
 8000aca:	e06b      	b.n	8000ba4 <fsm_manual+0x228>
	case 1:
		if(test_1 == 1){
 8000acc:	4b48      	ldr	r3, [pc, #288]	; (8000bf0 <fsm_manual+0x274>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d106      	bne.n	8000ae2 <fsm_manual+0x166>
			temp = max_Red;
 8000ad4:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <fsm_manual+0x284>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a50      	ldr	r2, [pc, #320]	; (8000c1c <fsm_manual+0x2a0>)
 8000ada:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 8000adc:	4b44      	ldr	r3, [pc, #272]	; (8000bf0 <fsm_manual+0x274>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp,
 8000ae2:	4b42      	ldr	r3, [pc, #264]	; (8000bec <fsm_manual+0x270>)
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <fsm_manual+0x2a0>)
 8000ae8:	6819      	ldr	r1, [r3, #0]
 8000aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aee:	9305      	str	r3, [sp, #20]
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <fsm_manual+0x2a4>)
 8000af2:	9304      	str	r3, [sp, #16]
 8000af4:	2310      	movs	r3, #16
 8000af6:	9303      	str	r3, [sp, #12]
 8000af8:	4b49      	ldr	r3, [pc, #292]	; (8000c20 <fsm_manual+0x2a4>)
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	2320      	movs	r3, #32
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	4b47      	ldr	r3, [pc, #284]	; (8000c20 <fsm_manual+0x2a4>)
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2308      	movs	r3, #8
 8000b06:	4a46      	ldr	r2, [pc, #280]	; (8000c20 <fsm_manual+0x2a4>)
 8000b08:	f7ff fe5e 	bl	80007c8 <case2>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a43      	ldr	r2, [pc, #268]	; (8000c1c <fsm_manual+0x2a0>)
 8000b10:	6013      	str	r3, [r2, #0]
			a_GPIO_Port, a_Pin,b_GPIO_Port, b_Pin,
			c_GPIO_Port, c_Pin,d_GPIO_Port, d_Pin
		);
		break;
 8000b12:	e048      	b.n	8000ba6 <fsm_manual+0x22a>
	case 2:
		if(test_1 == 1){
 8000b14:	4b36      	ldr	r3, [pc, #216]	; (8000bf0 <fsm_manual+0x274>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d106      	bne.n	8000b2a <fsm_manual+0x1ae>
			temp = max_Yellow;
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <fsm_manual+0x28c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a3e      	ldr	r2, [pc, #248]	; (8000c1c <fsm_manual+0x2a0>)
 8000b22:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 8000b24:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <fsm_manual+0x274>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp,
 8000b2a:	4b30      	ldr	r3, [pc, #192]	; (8000bec <fsm_manual+0x270>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <fsm_manual+0x2a0>)
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b36:	9305      	str	r3, [sp, #20]
 8000b38:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <fsm_manual+0x2a4>)
 8000b3a:	9304      	str	r3, [sp, #16]
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	9303      	str	r3, [sp, #12]
 8000b40:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <fsm_manual+0x2a4>)
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	2320      	movs	r3, #32
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <fsm_manual+0x2a4>)
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	4a34      	ldr	r2, [pc, #208]	; (8000c20 <fsm_manual+0x2a4>)
 8000b50:	f7ff fe3a 	bl	80007c8 <case2>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <fsm_manual+0x2a0>)
 8000b58:	6013      	str	r3, [r2, #0]
			a_GPIO_Port, a_Pin,b_GPIO_Port, b_Pin,
			c_GPIO_Port, c_Pin,d_GPIO_Port, d_Pin
		);
		break;
 8000b5a:	e024      	b.n	8000ba6 <fsm_manual+0x22a>
	case 3:
		if(test_1 == 1){
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <fsm_manual+0x274>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d106      	bne.n	8000b72 <fsm_manual+0x1f6>
			temp = max_Green;
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <fsm_manual+0x288>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a2c      	ldr	r2, [pc, #176]	; (8000c1c <fsm_manual+0x2a0>)
 8000b6a:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <fsm_manual+0x274>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp,
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <fsm_manual+0x270>)
 8000b74:	6818      	ldr	r0, [r3, #0]
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <fsm_manual+0x2a0>)
 8000b78:	6819      	ldr	r1, [r3, #0]
 8000b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7e:	9305      	str	r3, [sp, #20]
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <fsm_manual+0x2a4>)
 8000b82:	9304      	str	r3, [sp, #16]
 8000b84:	2310      	movs	r3, #16
 8000b86:	9303      	str	r3, [sp, #12]
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <fsm_manual+0x2a4>)
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	2320      	movs	r3, #32
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <fsm_manual+0x2a4>)
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2308      	movs	r3, #8
 8000b96:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <fsm_manual+0x2a4>)
 8000b98:	f7ff fe16 	bl	80007c8 <case2>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <fsm_manual+0x2a0>)
 8000ba0:	6013      	str	r3, [r2, #0]
			a_GPIO_Port, a_Pin,b_GPIO_Port, b_Pin,
			c_GPIO_Port, c_Pin,d_GPIO_Port, d_Pin
		);
		break;
 8000ba2:	e000      	b.n	8000ba6 <fsm_manual+0x22a>
	  break;
 8000ba4:	bf00      	nop
	}
	if(PRESSED_STATE_0 == 1){
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <fsm_manual+0x2a8>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d109      	bne.n	8000bc2 <fsm_manual+0x246>
		lcd_clear_display();
 8000bae:	f000 f8fe 	bl	8000dae <lcd_clear_display>
		case3();
 8000bb2:	f7ff fd75 	bl	80006a0 <case3>
		mode = 5;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <fsm_manual+0x270>)
 8000bb8:	2205      	movs	r2, #5
 8000bba:	601a      	str	r2, [r3, #0]
		PRESSED_STATE_0 = 0;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <fsm_manual+0x2a8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
	}
	if(mode == 5){
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <fsm_manual+0x270>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b05      	cmp	r3, #5
 8000bc8:	d10a      	bne.n	8000be0 <fsm_manual+0x264>
		if(button_flag[1] == 1){
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <fsm_manual+0x26c>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d106      	bne.n	8000be0 <fsm_manual+0x264>
			lcd_clear_display();
 8000bd2:	f000 f8ec 	bl	8000dae <lcd_clear_display>
			case3();
 8000bd6:	f7ff fd63 	bl	80006a0 <case3>
			button_flag[1] = 0;
 8000bda:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <fsm_manual+0x26c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000124 	.word	0x20000124
 8000bec:	2000013c 	.word	0x2000013c
 8000bf0:	20000138 	.word	0x20000138
 8000bf4:	20000094 	.word	0x20000094
 8000bf8:	20000090 	.word	0x20000090
 8000bfc:	2000008c 	.word	0x2000008c
 8000c00:	20000080 	.word	0x20000080
 8000c04:	20000088 	.word	0x20000088
 8000c08:	20000084 	.word	0x20000084
 8000c0c:	2000017c 	.word	0x2000017c
 8000c10:	40010800 	.word	0x40010800
 8000c14:	08003fcc 	.word	0x08003fcc
 8000c18:	08003fd8 	.word	0x08003fd8
 8000c1c:	200001b0 	.word	0x200001b0
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	20000134 	.word	0x20000134

08000c28 <setup_Led7SEG>:

#include "fsm_setting.h"

int mode = 0, en0 = 1, en1 = 0, en2 = 1, en3 = 0;

void setup_Led7SEG(){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1){
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <setup_Led7SEG+0x38>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d113      	bne.n	8000c5c <setup_Led7SEG+0x34>
		switch(en0){
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <setup_Led7SEG+0x3c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <setup_Led7SEG+0x1a>
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d004      	beq.n	8000c4a <setup_Led7SEG+0x22>
 8000c40:	e007      	b.n	8000c52 <setup_Led7SEG+0x2a>
		case 0:
			en0 = 1;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <setup_Led7SEG+0x3c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
			break;
 8000c48:	e003      	b.n	8000c52 <setup_Led7SEG+0x2a>
		case 1:
			en0 = 0;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <setup_Led7SEG+0x3c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
			break;
 8000c50:	bf00      	nop
		}
		setTimer(2, 500);
 8000c52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c56:	2002      	movs	r0, #2
 8000c58:	f000 fb5e 	bl	8001318 <setTimer>
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000017c 	.word	0x2000017c
 8000c64:	20000050 	.word	0x20000050

08000c68 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f023 030f 	bic.w	r3, r3, #15
 8000c78:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	f043 030c 	orr.w	r3, r3, #12
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	f043 030c 	orr.w	r3, r3, #12
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ca8:	f107 0208 	add.w	r2, r7, #8
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	2142      	movs	r1, #66	; 0x42
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <lcd_send_cmd+0x5c>)
 8000cb6:	f001 f96f 	bl	8001f98 <HAL_I2C_Master_Transmit>
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200001dc 	.word	0x200001dc

08000cc8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f023 030f 	bic.w	r3, r3, #15
 8000cd8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	f043 030d 	orr.w	r3, r3, #13
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	f043 0309 	orr.w	r3, r3, #9
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	f043 030d 	orr.w	r3, r3, #13
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cfe:	7bbb      	ldrb	r3, [r7, #14]
 8000d00:	f043 0309 	orr.w	r3, r3, #9
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d08:	f107 0208 	add.w	r2, r7, #8
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2304      	movs	r3, #4
 8000d12:	2142      	movs	r1, #66	; 0x42
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <lcd_send_data+0x5c>)
 8000d16:	f001 f93f 	bl	8001f98 <HAL_I2C_Master_Transmit>
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001dc 	.word	0x200001dc

08000d28 <lcd_init>:

void lcd_init (void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000d2c:	2033      	movs	r0, #51	; 0x33
 8000d2e:	f7ff ff9b 	bl	8000c68 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000d32:	2032      	movs	r0, #50	; 0x32
 8000d34:	f7ff ff98 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000d38:	2032      	movs	r0, #50	; 0x32
 8000d3a:	f000 fceb 	bl	8001714 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000d3e:	2028      	movs	r0, #40	; 0x28
 8000d40:	f7ff ff92 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000d44:	2032      	movs	r0, #50	; 0x32
 8000d46:	f000 fce5 	bl	8001714 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff ff8c 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000d50:	2032      	movs	r0, #50	; 0x32
 8000d52:	f000 fcdf 	bl	8001714 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000d56:	2006      	movs	r0, #6
 8000d58:	f7ff ff86 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000d5c:	2032      	movs	r0, #50	; 0x32
 8000d5e:	f000 fcd9 	bl	8001714 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000d62:	200c      	movs	r0, #12
 8000d64:	f7ff ff80 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000d68:	2032      	movs	r0, #50	; 0x32
 8000d6a:	f000 fcd3 	bl	8001714 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f7ff ff7a 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000d74:	2032      	movs	r0, #50	; 0x32
 8000d76:	f000 fccd 	bl	8001714 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000d7a:	2080      	movs	r0, #128	; 0x80
 8000d7c:	f7ff ff74 	bl	8000c68 <lcd_send_cmd>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d8c:	e006      	b.n	8000d9c <lcd_send_string+0x18>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff96 	bl	8000cc8 <lcd_send_data>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1f4      	bne.n	8000d8e <lcd_send_string+0xa>
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000db2:	2001      	movs	r0, #1
 8000db4:	f7ff ff58 	bl	8000c68 <lcd_send_cmd>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d108      	bne.n	8000dde <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	337f      	adds	r3, #127	; 0x7f
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e008      	b.n	8000df0 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3340      	adds	r3, #64	; 0x40
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff38 	bl	8000c68 <lcd_send_cmd>
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <LED_RED_1>:
 */

#include "led_traffic.h"


void LED_RED_1(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2108      	movs	r1, #8
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <LED_RED_1+0x1c>)
 8000e0a:	f000 ff50 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2120      	movs	r1, #32
 8000e12:	4802      	ldr	r0, [pc, #8]	; (8000e1c <LED_RED_1+0x1c>)
 8000e14:	f000 ff4b 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40010c00 	.word	0x40010c00

08000e20 <LED_GREEN_1>:

void LED_GREEN_1(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2108      	movs	r1, #8
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <LED_GREEN_1+0x1c>)
 8000e2a:	f000 ff40 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2120      	movs	r1, #32
 8000e32:	4802      	ldr	r0, [pc, #8]	; (8000e3c <LED_GREEN_1+0x1c>)
 8000e34:	f000 ff3b 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40010c00 	.word	0x40010c00

08000e40 <LED_YELLOW_1>:

void LED_YELLOW_1(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2108      	movs	r1, #8
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <LED_YELLOW_1+0x1c>)
 8000e4a:	f000 ff30 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2120      	movs	r1, #32
 8000e52:	4802      	ldr	r0, [pc, #8]	; (8000e5c <LED_YELLOW_1+0x1c>)
 8000e54:	f000 ff2b 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40010c00 	.word	0x40010c00

08000e60 <LED_RED_2>:

void LED_RED_2(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2110      	movs	r1, #16
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <LED_RED_2+0x20>)
 8000e6a:	f000 ff20 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <LED_RED_2+0x20>)
 8000e76:	f000 ff1a 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010c00 	.word	0x40010c00

08000e84 <LED_GREEN_2>:

void LED_GREEN_2(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <LED_GREEN_2+0x20>)
 8000e8e:	f000 ff0e 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <LED_GREEN_2+0x20>)
 8000e9a:	f000 ff08 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40010c00 	.word	0x40010c00

08000ea8 <LED_YELLOW_2>:

void LED_YELLOW_2(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2110      	movs	r1, #16
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <LED_YELLOW_2+0x20>)
 8000eb2:	f000 fefc 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <LED_YELLOW_2+0x20>)
 8000ebe:	f000 fef6 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <LED_RED_3>:

void LED_RED_3(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <LED_RED_3+0x20>)
 8000ed8:	f000 fee9 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee2:	4802      	ldr	r0, [pc, #8]	; (8000eec <LED_RED_3+0x20>)
 8000ee4:	f000 fee3 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40010800 	.word	0x40010800

08000ef0 <LED_GREEN_3>:

void LED_GREEN_3(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <LED_GREEN_3+0x20>)
 8000efc:	f000 fed7 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f06:	4802      	ldr	r0, [pc, #8]	; (8000f10 <LED_GREEN_3+0x20>)
 8000f08:	f000 fed1 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40010800 	.word	0x40010800

08000f14 <LED_YELLOW_3>:

void LED_YELLOW_3(void){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <LED_YELLOW_3+0x20>)
 8000f20:	f000 fec5 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2a:	4802      	ldr	r0, [pc, #8]	; (8000f34 <LED_YELLOW_3+0x20>)
 8000f2c:	f000 febf 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010800 	.word	0x40010800

08000f38 <LED_RED_4>:

void LED_RED_4(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <LED_RED_4+0x1c>)
 8000f42:	f000 feb4 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_GPIO_Port, h_Pin, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2140      	movs	r1, #64	; 0x40
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <LED_RED_4+0x20>)
 8000f4c:	f000 feaf 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40011000 	.word	0x40011000
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <LED_GREEN_4>:

void LED_GREEN_4(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <LED_GREEN_4+0x1c>)
 8000f66:	f000 fea2 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_GPIO_Port, h_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <LED_GREEN_4+0x20>)
 8000f70:	f000 fe9d 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40011000 	.word	0x40011000
 8000f7c:	40010c00 	.word	0x40010c00

08000f80 <LED_YELLOW_4>:

void LED_YELLOW_4(void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <LED_YELLOW_4+0x1c>)
 8000f8a:	f000 fe90 	bl	8001cae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_GPIO_Port, h_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <LED_YELLOW_4+0x20>)
 8000f94:	f000 fe8b 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40011000 	.word	0x40011000
 8000fa0:	40010c00 	.word	0x40010c00

08000fa4 <off_LED>:


void off_LED(void){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2108      	movs	r1, #8
 8000fac:	4815      	ldr	r0, [pc, #84]	; (8001004 <off_LED+0x60>)
 8000fae:	f000 fe7e 	bl	8001cae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	4813      	ldr	r0, [pc, #76]	; (8001004 <off_LED+0x60>)
 8000fb8:	f000 fe79 	bl	8001cae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	4810      	ldr	r0, [pc, #64]	; (8001004 <off_LED+0x60>)
 8000fc2:	f000 fe74 	bl	8001cae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <off_LED+0x60>)
 8000fce:	f000 fe6e 	bl	8001cae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <off_LED+0x64>)
 8000fda:	f000 fe68 	bl	8001cae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <off_LED+0x64>)
 8000fe6:	f000 fe62 	bl	8001cae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <off_LED+0x68>)
 8000ff0:	f000 fe5d 	bl	8001cae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(h_GPIO_Port, h_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2140      	movs	r1, #64	; 0x40
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <off_LED+0x60>)
 8000ffa:	f000 fe58 	bl	8001cae <HAL_GPIO_WritePin>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010c00 	.word	0x40010c00
 8001008:	40010800 	.word	0x40010800
 800100c:	40011000 	.word	0x40011000

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f000 fb1c 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f820 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 f8da 	bl	80011d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001020:	f000 f88c 	bl	800113c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001024:	f000 f85c 	bl	80010e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001028:	f7ff fe7e 	bl	8000d28 <lcd_init>
  HAL_TIM_Base_Start_IT(&htim2);
 800102c:	480a      	ldr	r0, [pc, #40]	; (8001058 <main+0x48>)
 800102e:	f001 ff55 	bl	8002edc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(0, 1);
 8001032:	2101      	movs	r1, #1
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f96f 	bl	8001318 <setTimer>
  setTimer(1, 1);
 800103a:	2101      	movs	r1, #1
 800103c:	2001      	movs	r0, #1
 800103e:	f000 f96b 	bl	8001318 <setTimer>
  setTimer(2, 1);
 8001042:	2101      	movs	r1, #1
 8001044:	2002      	movs	r0, #2
 8001046:	f000 f967 	bl	8001318 <setTimer>
  setTimer(3, 1);
 800104a:	2101      	movs	r1, #1
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f963 	bl	8001318 <setTimer>
  while (1)
  {
	  fsm_manual();
 8001052:	f7ff fc93 	bl	800097c <fsm_manual>
 8001056:	e7fc      	b.n	8001052 <main+0x42>
 8001058:	20000230 	.word	0x20000230

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b090      	sub	sp, #64	; 0x40
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0318 	add.w	r3, r7, #24
 8001066:	2228      	movs	r2, #40	; 0x28
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fb02 	bl	8003674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001082:	2301      	movs	r3, #1
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001086:	2310      	movs	r3, #16
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001092:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fad3 	bl	8002648 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010a8:	f000 f930 	bl	800130c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2302      	movs	r3, #2
 80010b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2102      	movs	r1, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fd3e 	bl	8002b48 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010d2:	f000 f91b 	bl	800130c <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3740      	adds	r7, #64	; 0x40
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C1_Init+0x50>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <MX_I2C1_Init+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2C1_Init+0x50>)
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <MX_I2C1_Init+0x58>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_I2C1_Init+0x50>)
 80010fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001102:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_I2C1_Init+0x50>)
 800111e:	f000 fdf7 	bl	8001d10 <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001128:	f000 f8f0 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001dc 	.word	0x200001dc
 8001134:	40005400 	.word	0x40005400
 8001138:	000186a0 	.word	0x000186a0

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_TIM2_Init+0x94>)
 800115a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_TIM2_Init+0x94>)
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_TIM2_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_TIM2_Init+0x94>)
 800116e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_TIM2_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_TIM2_Init+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001180:	4813      	ldr	r0, [pc, #76]	; (80011d0 <MX_TIM2_Init+0x94>)
 8001182:	f001 fe5b 	bl	8002e3c <HAL_TIM_Base_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800118c:	f000 f8be 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <MX_TIM2_Init+0x94>)
 800119e:	f001 ffdf 	bl	8003160 <HAL_TIM_ConfigClockSource>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011a8:	f000 f8b0 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_TIM2_Init+0x94>)
 80011ba:	f002 f9c1 	bl	8003540 <HAL_TIMEx_MasterConfigSynchronization>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011c4:	f000 f8a2 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000230 	.word	0x20000230

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <MX_GPIO_Init+0x110>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a3d      	ldr	r2, [pc, #244]	; (80012e4 <MX_GPIO_Init+0x110>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <MX_GPIO_Init+0x110>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <MX_GPIO_Init+0x110>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a37      	ldr	r2, [pc, #220]	; (80012e4 <MX_GPIO_Init+0x110>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <MX_GPIO_Init+0x110>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <MX_GPIO_Init+0x110>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <MX_GPIO_Init+0x110>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <MX_GPIO_Init+0x110>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|e_Pin|f_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001236:	482c      	ldr	r0, [pc, #176]	; (80012e8 <MX_GPIO_Init+0x114>)
 8001238:	f000 fd39 	bl	8001cae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, d_Pin|a_Pin|c_Pin|b_Pin
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 8001242:	482a      	ldr	r0, [pc, #168]	; (80012ec <MX_GPIO_Init+0x118>)
 8001244:	f000 fd33 	bl	8001cae <HAL_GPIO_WritePin>
                          |h_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	4828      	ldr	r0, [pc, #160]	; (80012f0 <MX_GPIO_Init+0x11c>)
 800124e:	f000 fd2e 	bl	8001cae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001252:	2313      	movs	r3, #19
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4619      	mov	r1, r3
 8001264:	4820      	ldr	r0, [pc, #128]	; (80012e8 <MX_GPIO_Init+0x114>)
 8001266:	f000 fb87 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin e_Pin f_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|e_Pin|f_Pin;
 800126a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800126e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2302      	movs	r3, #2
 800127a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	4819      	ldr	r0, [pc, #100]	; (80012e8 <MX_GPIO_Init+0x114>)
 8001284:	f000 fb78 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button4_Pin */
  GPIO_InitStruct.Pin = Button4_Pin;
 8001288:	2301      	movs	r3, #1
 800128a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button4_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	4814      	ldr	r0, [pc, #80]	; (80012ec <MX_GPIO_Init+0x118>)
 800129c:	f000 fb6c 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : d_Pin a_Pin c_Pin b_Pin
                           h_Pin PB7 */
  GPIO_InitStruct.Pin = d_Pin|a_Pin|c_Pin|b_Pin
 80012a0:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 80012a4:	613b      	str	r3, [r7, #16]
                          |h_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <MX_GPIO_Init+0x118>)
 80012ba:	f000 fb5d 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pin : g_Pin */
  GPIO_InitStruct.Pin = g_Pin;
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(g_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4619      	mov	r1, r3
 80012d4:	4806      	ldr	r0, [pc, #24]	; (80012f0 <MX_GPIO_Init+0x11c>)
 80012d6:	f000 fb4f 	bl	8001978 <HAL_GPIO_Init>

}
 80012da:	bf00      	nop
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010800 	.word	0x40010800
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40011000 	.word	0x40011000

080012f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	timerRun();
 80012fc:	f000 f84c 	bl	8001398 <timerRun>
	getKeyInput();
 8001300:	f7fe ff4e 	bl	80001a0 <getKeyInput>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001314:	e7fe      	b.n	8001314 <Error_Handler+0x8>
	...

08001318 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};
int TICK = 10;
void setTimer(int i, int duration){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	timer_flag[i] = 0;
 8001322:	4a07      	ldr	r2, [pc, #28]	; (8001340 <setTimer+0x28>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2100      	movs	r1, #0
 8001328:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[i] = duration ;
 800132c:	4905      	ldr	r1, [pc, #20]	; (8001344 <setTimer+0x2c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	2000017c 	.word	0x2000017c
 8001344:	20000154 	.word	0x20000154

08001348 <timer_run>:

void timer_run(int i){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	if(timer_counter[i] > 0){
 8001350:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <timer_run+0x48>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001358:	2b00      	cmp	r3, #0
 800135a:	dd13      	ble.n	8001384 <timer_run+0x3c>
		timer_counter[i]--;
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <timer_run+0x48>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	1e5a      	subs	r2, r3, #1
 8001366:	490a      	ldr	r1, [pc, #40]	; (8001390 <timer_run+0x48>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0) timer_flag[i] = 1;
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <timer_run+0x48>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	2b00      	cmp	r3, #0
 8001378:	dc04      	bgt.n	8001384 <timer_run+0x3c>
 800137a:	4a06      	ldr	r2, [pc, #24]	; (8001394 <timer_run+0x4c>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2101      	movs	r1, #1
 8001380:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000154 	.word	0x20000154
 8001394:	2000017c 	.word	0x2000017c

08001398 <timerRun>:

void timerRun(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	timer_run(0);
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ffd3 	bl	8001348 <timer_run>
	timer_run(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff ffd0 	bl	8001348 <timer_run>
	timer_run(2);
 80013a8:	2002      	movs	r0, #2
 80013aa:	f7ff ffcd 	bl	8001348 <timer_run>
	timer_run(3);
 80013ae:	2003      	movs	r0, #3
 80013b0:	f7ff ffca 	bl	8001348 <timer_run>
	timer_run(4);
 80013b4:	2004      	movs	r0, #4
 80013b6:	f7ff ffc7 	bl	8001348 <timer_run>
	timer_run(5);
 80013ba:	2005      	movs	r0, #5
 80013bc:	f7ff ffc4 	bl	8001348 <timer_run>
	timer_run(6);
 80013c0:	2006      	movs	r0, #6
 80013c2:	f7ff ffc1 	bl	8001348 <timer_run>
	timer_run(7);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f7ff ffbe 	bl	8001348 <timer_run>
	timer_run(8);
 80013cc:	2008      	movs	r0, #8
 80013ce:	f7ff ffbb 	bl	8001348 <timer_run>
	timer_run(9);
 80013d2:	2009      	movs	r0, #9
 80013d4:	f7ff ffb8 	bl	8001348 <timer_run>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_MspInit+0x5c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_MspInit+0x5c>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_MspInit+0x5c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_MspInit+0x5c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_MspInit+0x5c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_MspInit+0x5c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_MspInit+0x60>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_MspInit+0x60>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000

08001440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_I2C_MspInit+0x90>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d132      	bne.n	80014c6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_I2C_MspInit+0x94>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <HAL_I2C_MspInit+0x94>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_I2C_MspInit+0x94>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001478:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147e:	2312      	movs	r3, #18
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4812      	ldr	r0, [pc, #72]	; (80014d8 <HAL_I2C_MspInit+0x98>)
 800148e:	f000 fa73 	bl	8001978 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_I2C_MspInit+0x9c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <HAL_I2C_MspInit+0x9c>)
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_I2C_MspInit+0x94>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_I2C_MspInit+0x94>)
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_I2C_MspInit+0x94>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010c00 	.word	0x40010c00
 80014dc:	40010000 	.word	0x40010000

080014e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d113      	bne.n	800151a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_TIM_Base_MspInit+0x44>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_TIM_Base_MspInit+0x44>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_TIM_Base_MspInit+0x44>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	201c      	movs	r0, #28
 8001510:	f000 f9fb 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001514:	201c      	movs	r0, #28
 8001516:	f000 fa14 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156e:	f000 f8b5 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM2_IRQHandler+0x10>)
 800157e:	f001 fcff 	bl	8002f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000230 	.word	0x20000230

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f002 f830 	bl	8003620 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20005000 	.word	0x20005000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	200001a4 	.word	0x200001a4
 80015f4:	20000290 	.word	0x20000290

080015f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001604:	f7ff fff8 	bl	80015f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800160a:	490c      	ldr	r1, [pc, #48]	; (800163c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800160c:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <LoopFillZerobss+0x16>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001620:	4c09      	ldr	r4, [pc, #36]	; (8001648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f001 fffd 	bl	800362c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001632:	f7ff fced 	bl	8001010 <main>
  bx lr
 8001636:	4770      	bx	lr
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001640:	0800404c 	.word	0x0800404c
  ldr r2, =_sbss
 8001644:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001648:	2000028c 	.word	0x2000028c

0800164c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_2_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x28>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x28>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f947 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff feb6 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f95f 	bl	800195e <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f927 	bl	800190a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000098 	.word	0x20000098
 80016d4:	200000a0 	.word	0x200000a0
 80016d8:	2000009c 	.word	0x2000009c

080016dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x1c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x20>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_IncTick+0x20>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	200000a0 	.word	0x200000a0
 80016fc:	20000278 	.word	0x20000278

08001700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_GetTick+0x10>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	20000278 	.word	0x20000278

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fff0 	bl	8001700 <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffe0 	bl	8001700 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200000a0 	.word	0x200000a0

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4906      	ldr	r1, [pc, #24]	; (80017f4 <__NVIC_EnableIRQ+0x34>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff90 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff2d 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff42 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff90 	bl	800184c <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5f 	bl	80017f8 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff35 	bl	80017c0 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b08b      	sub	sp, #44	; 0x2c
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	e169      	b.n	8001c60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800198c:	2201      	movs	r2, #1
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f040 8158 	bne.w	8001c5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4a9a      	ldr	r2, [pc, #616]	; (8001c18 <HAL_GPIO_Init+0x2a0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d05e      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019b4:	4a98      	ldr	r2, [pc, #608]	; (8001c18 <HAL_GPIO_Init+0x2a0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d875      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019ba:	4a98      	ldr	r2, [pc, #608]	; (8001c1c <HAL_GPIO_Init+0x2a4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d058      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019c0:	4a96      	ldr	r2, [pc, #600]	; (8001c1c <HAL_GPIO_Init+0x2a4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d86f      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019c6:	4a96      	ldr	r2, [pc, #600]	; (8001c20 <HAL_GPIO_Init+0x2a8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d052      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019cc:	4a94      	ldr	r2, [pc, #592]	; (8001c20 <HAL_GPIO_Init+0x2a8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d869      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019d2:	4a94      	ldr	r2, [pc, #592]	; (8001c24 <HAL_GPIO_Init+0x2ac>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d04c      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019d8:	4a92      	ldr	r2, [pc, #584]	; (8001c24 <HAL_GPIO_Init+0x2ac>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d863      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019de:	4a92      	ldr	r2, [pc, #584]	; (8001c28 <HAL_GPIO_Init+0x2b0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d046      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019e4:	4a90      	ldr	r2, [pc, #576]	; (8001c28 <HAL_GPIO_Init+0x2b0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d85d      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d82a      	bhi.n	8001a44 <HAL_GPIO_Init+0xcc>
 80019ee:	2b12      	cmp	r3, #18
 80019f0:	d859      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019f2:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <HAL_GPIO_Init+0x80>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a73 	.word	0x08001a73
 80019fc:	08001a4d 	.word	0x08001a4d
 8001a00:	08001a5f 	.word	0x08001a5f
 8001a04:	08001aa1 	.word	0x08001aa1
 8001a08:	08001aa7 	.word	0x08001aa7
 8001a0c:	08001aa7 	.word	0x08001aa7
 8001a10:	08001aa7 	.word	0x08001aa7
 8001a14:	08001aa7 	.word	0x08001aa7
 8001a18:	08001aa7 	.word	0x08001aa7
 8001a1c:	08001aa7 	.word	0x08001aa7
 8001a20:	08001aa7 	.word	0x08001aa7
 8001a24:	08001aa7 	.word	0x08001aa7
 8001a28:	08001aa7 	.word	0x08001aa7
 8001a2c:	08001aa7 	.word	0x08001aa7
 8001a30:	08001aa7 	.word	0x08001aa7
 8001a34:	08001aa7 	.word	0x08001aa7
 8001a38:	08001aa7 	.word	0x08001aa7
 8001a3c:	08001a55 	.word	0x08001a55
 8001a40:	08001a69 	.word	0x08001a69
 8001a44:	4a79      	ldr	r2, [pc, #484]	; (8001c2c <HAL_GPIO_Init+0x2b4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a4a:	e02c      	b.n	8001aa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e029      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e024      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	3308      	adds	r3, #8
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e01f      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	330c      	adds	r3, #12
 8001a6e:	623b      	str	r3, [r7, #32]
          break;
 8001a70:	e01a      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	623b      	str	r3, [r7, #32]
          break;
 8001a7e:	e013      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	611a      	str	r2, [r3, #16]
          break;
 8001a92:	e009      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a94:	2308      	movs	r3, #8
 8001a96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	615a      	str	r2, [r3, #20]
          break;
 8001a9e:	e003      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          break;
 8001aa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2bff      	cmp	r3, #255	; 0xff
 8001aac:	d801      	bhi.n	8001ab2 <HAL_GPIO_Init+0x13a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	e001      	b.n	8001ab6 <HAL_GPIO_Init+0x13e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	d802      	bhi.n	8001ac4 <HAL_GPIO_Init+0x14c>
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	e002      	b.n	8001aca <HAL_GPIO_Init+0x152>
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	3b08      	subs	r3, #8
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	401a      	ands	r2, r3
 8001adc:	6a39      	ldr	r1, [r7, #32]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80b1 	beq.w	8001c5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af8:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <HAL_GPIO_Init+0x2b8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a4c      	ldr	r2, [pc, #304]	; (8001c30 <HAL_GPIO_Init+0x2b8>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <HAL_GPIO_Init+0x2b8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b10:	4a48      	ldr	r2, [pc, #288]	; (8001c34 <HAL_GPIO_Init+0x2bc>)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a40      	ldr	r2, [pc, #256]	; (8001c38 <HAL_GPIO_Init+0x2c0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d013      	beq.n	8001b64 <HAL_GPIO_Init+0x1ec>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a3f      	ldr	r2, [pc, #252]	; (8001c3c <HAL_GPIO_Init+0x2c4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00d      	beq.n	8001b60 <HAL_GPIO_Init+0x1e8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a3e      	ldr	r2, [pc, #248]	; (8001c40 <HAL_GPIO_Init+0x2c8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d007      	beq.n	8001b5c <HAL_GPIO_Init+0x1e4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3d      	ldr	r2, [pc, #244]	; (8001c44 <HAL_GPIO_Init+0x2cc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d101      	bne.n	8001b58 <HAL_GPIO_Init+0x1e0>
 8001b54:	2303      	movs	r3, #3
 8001b56:	e006      	b.n	8001b66 <HAL_GPIO_Init+0x1ee>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e004      	b.n	8001b66 <HAL_GPIO_Init+0x1ee>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e002      	b.n	8001b66 <HAL_GPIO_Init+0x1ee>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_GPIO_Init+0x1ee>
 8001b64:	2300      	movs	r3, #0
 8001b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b68:	f002 0203 	and.w	r2, r2, #3
 8001b6c:	0092      	lsls	r2, r2, #2
 8001b6e:	4093      	lsls	r3, r2
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b76:	492f      	ldr	r1, [pc, #188]	; (8001c34 <HAL_GPIO_Init+0x2bc>)
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b90:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	492c      	ldr	r1, [pc, #176]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4928      	ldr	r1, [pc, #160]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	4922      	ldr	r1, [pc, #136]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60cb      	str	r3, [r1, #12]
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	491e      	ldr	r1, [pc, #120]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4918      	ldr	r1, [pc, #96]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4914      	ldr	r1, [pc, #80]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d021      	beq.n	8001c4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	490e      	ldr	r1, [pc, #56]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
 8001c14:	e021      	b.n	8001c5a <HAL_GPIO_Init+0x2e2>
 8001c16:	bf00      	nop
 8001c18:	10320000 	.word	0x10320000
 8001c1c:	10310000 	.word	0x10310000
 8001c20:	10220000 	.word	0x10220000
 8001c24:	10210000 	.word	0x10210000
 8001c28:	10120000 	.word	0x10120000
 8001c2c:	10110000 	.word	0x10110000
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010000 	.word	0x40010000
 8001c38:	40010800 	.word	0x40010800
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40011000 	.word	0x40011000
 8001c44:	40011400 	.word	0x40011400
 8001c48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_GPIO_Init+0x304>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	4909      	ldr	r1, [pc, #36]	; (8001c7c <HAL_GPIO_Init+0x304>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f47f ae8e 	bne.w	800198c <HAL_GPIO_Init+0x14>
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	372c      	adds	r7, #44	; 0x2c
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	40010400 	.word	0x40010400

08001c80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e001      	b.n	8001ca2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cbe:	787b      	ldrb	r3, [r7, #1]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc4:	887a      	ldrh	r2, [r7, #2]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cca:	e003      	b.n	8001cd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	041a      	lsls	r2, r3, #16
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	611a      	str	r2, [r3, #16]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf0:	887a      	ldrh	r2, [r7, #2]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	041a      	lsls	r2, r3, #16
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	400b      	ands	r3, r1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	611a      	str	r2, [r3, #16]
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e12b      	b.n	8001f7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fb82 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2224      	movs	r2, #36	; 0x24
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d74:	f001 f830 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8001d78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a81      	ldr	r2, [pc, #516]	; (8001f84 <HAL_I2C_Init+0x274>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d807      	bhi.n	8001d94 <HAL_I2C_Init+0x84>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4a80      	ldr	r2, [pc, #512]	; (8001f88 <HAL_I2C_Init+0x278>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	bf94      	ite	ls
 8001d8c:	2301      	movls	r3, #1
 8001d8e:	2300      	movhi	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	e006      	b.n	8001da2 <HAL_I2C_Init+0x92>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a7d      	ldr	r2, [pc, #500]	; (8001f8c <HAL_I2C_Init+0x27c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	bf94      	ite	ls
 8001d9c:	2301      	movls	r3, #1
 8001d9e:	2300      	movhi	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0e7      	b.n	8001f7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4a78      	ldr	r2, [pc, #480]	; (8001f90 <HAL_I2C_Init+0x280>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0c9b      	lsrs	r3, r3, #18
 8001db4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4a6a      	ldr	r2, [pc, #424]	; (8001f84 <HAL_I2C_Init+0x274>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d802      	bhi.n	8001de4 <HAL_I2C_Init+0xd4>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	e009      	b.n	8001df8 <HAL_I2C_Init+0xe8>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_I2C_Init+0x284>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	3301      	adds	r3, #1
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	495c      	ldr	r1, [pc, #368]	; (8001f84 <HAL_I2C_Init+0x274>)
 8001e14:	428b      	cmp	r3, r1
 8001e16:	d819      	bhi.n	8001e4c <HAL_I2C_Init+0x13c>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e59      	subs	r1, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e26:	1c59      	adds	r1, r3, #1
 8001e28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e2c:	400b      	ands	r3, r1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_I2C_Init+0x138>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1e59      	subs	r1, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e46:	e051      	b.n	8001eec <HAL_I2C_Init+0x1dc>
 8001e48:	2304      	movs	r3, #4
 8001e4a:	e04f      	b.n	8001eec <HAL_I2C_Init+0x1dc>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d111      	bne.n	8001e78 <HAL_I2C_Init+0x168>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	440b      	add	r3, r1
 8001e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	e012      	b.n	8001e9e <HAL_I2C_Init+0x18e>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1e58      	subs	r0, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	0099      	lsls	r1, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_Init+0x196>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e022      	b.n	8001eec <HAL_I2C_Init+0x1dc>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10e      	bne.n	8001ecc <HAL_I2C_Init+0x1bc>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1e58      	subs	r0, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6859      	ldr	r1, [r3, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	440b      	add	r3, r1
 8001ebc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eca:	e00f      	b.n	8001eec <HAL_I2C_Init+0x1dc>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	0099      	lsls	r1, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	6809      	ldr	r1, [r1, #0]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6911      	ldr	r1, [r2, #16]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68d2      	ldr	r2, [r2, #12]
 8001f26:	4311      	orrs	r1, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	000186a0 	.word	0x000186a0
 8001f88:	001e847f 	.word	0x001e847f
 8001f8c:	003d08ff 	.word	0x003d08ff
 8001f90:	431bde83 	.word	0x431bde83
 8001f94:	10624dd3 	.word	0x10624dd3

08001f98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	817b      	strh	r3, [r7, #10]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff fba8 	bl	8001700 <HAL_GetTick>
 8001fb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	f040 80e0 	bne.w	8002180 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2319      	movs	r3, #25
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4970      	ldr	r1, [pc, #448]	; (800218c <HAL_I2C_Master_Transmit+0x1f4>)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f964 	bl	8002298 <I2C_WaitOnFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e0d3      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2C_Master_Transmit+0x50>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e0cc      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d007      	beq.n	800200e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800201c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2221      	movs	r2, #33	; 0x21
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2210      	movs	r2, #16
 800202a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	893a      	ldrh	r2, [r7, #8]
 800203e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4a50      	ldr	r2, [pc, #320]	; (8002190 <HAL_I2C_Master_Transmit+0x1f8>)
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002050:	8979      	ldrh	r1, [r7, #10]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	6a3a      	ldr	r2, [r7, #32]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f89c 	bl	8002194 <I2C_MasterRequestWrite>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e08d      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800207c:	e066      	b.n	800214c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	6a39      	ldr	r1, [r7, #32]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fa22 	bl	80024cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00d      	beq.n	80020aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2b04      	cmp	r3, #4
 8002094:	d107      	bne.n	80020a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06b      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d11b      	bne.n	8002120 <HAL_I2C_Master_Transmit+0x188>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d017      	beq.n	8002120 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	6a39      	ldr	r1, [r7, #32]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fa19 	bl	800255c <I2C_WaitOnBTFFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00d      	beq.n	800214c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	2b04      	cmp	r3, #4
 8002136:	d107      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002146:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e01a      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d194      	bne.n	800207e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	e000      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002180:	2302      	movs	r3, #2
  }
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	00100002 	.word	0x00100002
 8002190:	ffff0000 	.word	0xffff0000

08002194 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	460b      	mov	r3, r1
 80021a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d006      	beq.n	80021be <I2C_MasterRequestWrite+0x2a>
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d003      	beq.n	80021be <I2C_MasterRequestWrite+0x2a>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021bc:	d108      	bne.n	80021d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e00b      	b.n	80021e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	2b12      	cmp	r3, #18
 80021d6:	d107      	bne.n	80021e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f84f 	bl	8002298 <I2C_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220e:	d103      	bne.n	8002218 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002216:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e035      	b.n	8002288 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002224:	d108      	bne.n	8002238 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002226:	897b      	ldrh	r3, [r7, #10]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002234:	611a      	str	r2, [r3, #16]
 8002236:	e01b      	b.n	8002270 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002238:	897b      	ldrh	r3, [r7, #10]
 800223a:	11db      	asrs	r3, r3, #7
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0306 	and.w	r3, r3, #6
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f063 030f 	orn	r3, r3, #15
 8002248:	b2da      	uxtb	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	490e      	ldr	r1, [pc, #56]	; (8002290 <I2C_MasterRequestWrite+0xfc>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f898 	bl	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e010      	b.n	8002288 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <I2C_MasterRequestWrite+0x100>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f888 	bl	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	00010008 	.word	0x00010008
 8002294:	00010002 	.word	0x00010002

08002298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a8:	e048      	b.n	800233c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d044      	beq.n	800233c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b2:	f7ff fa25 	bl	8001700 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d302      	bcc.n	80022c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d139      	bne.n	800233c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	0c1b      	lsrs	r3, r3, #16
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10d      	bne.n	80022ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	43da      	mvns	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4013      	ands	r3, r2
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	e00c      	b.n	8002308 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	43da      	mvns	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4013      	ands	r3, r2
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	429a      	cmp	r2, r3
 800230c:	d116      	bne.n	800233c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f043 0220 	orr.w	r2, r3, #32
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e023      	b.n	8002384 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	0c1b      	lsrs	r3, r3, #16
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10d      	bne.n	8002362 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	43da      	mvns	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4013      	ands	r3, r2
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	e00c      	b.n	800237c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	43da      	mvns	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4013      	ands	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	429a      	cmp	r2, r3
 8002380:	d093      	beq.n	80022aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800239a:	e071      	b.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023aa:	d123      	bne.n	80023f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f043 0204 	orr.w	r2, r3, #4
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e067      	b.n	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d041      	beq.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fc:	f7ff f980 	bl	8001700 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	d302      	bcc.n	8002412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d136      	bne.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d10c      	bne.n	8002436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4013      	ands	r3, r2
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	e00b      	b.n	800244e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	43da      	mvns	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4013      	ands	r3, r2
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d016      	beq.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e021      	b.n	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	0c1b      	lsrs	r3, r3, #16
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d10c      	bne.n	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	43da      	mvns	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4013      	ands	r3, r2
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e00b      	b.n	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4013      	ands	r3, r2
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f47f af6d 	bne.w	800239c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024d8:	e034      	b.n	8002544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f886 	bl	80025ec <I2C_IsAcknowledgeFailed>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e034      	b.n	8002554 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d028      	beq.n	8002544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f2:	f7ff f905 	bl	8001700 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d302      	bcc.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d11d      	bne.n	8002544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	2b80      	cmp	r3, #128	; 0x80
 8002514:	d016      	beq.n	8002544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f043 0220 	orr.w	r2, r3, #32
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e007      	b.n	8002554 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	2b80      	cmp	r3, #128	; 0x80
 8002550:	d1c3      	bne.n	80024da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002568:	e034      	b.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f83e 	bl	80025ec <I2C_IsAcknowledgeFailed>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e034      	b.n	80025e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d028      	beq.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002582:	f7ff f8bd 	bl	8001700 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11d      	bne.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d016      	beq.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f043 0220 	orr.w	r2, r3, #32
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e007      	b.n	80025e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d1c3      	bne.n	800256a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002602:	d11b      	bne.n	800263c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800260c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f043 0204 	orr.w	r2, r3, #4
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e26c      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8087 	beq.w	8002776 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002668:	4b92      	ldr	r3, [pc, #584]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b04      	cmp	r3, #4
 8002672:	d00c      	beq.n	800268e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002674:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b08      	cmp	r3, #8
 800267e:	d112      	bne.n	80026a6 <HAL_RCC_OscConfig+0x5e>
 8002680:	4b8c      	ldr	r3, [pc, #560]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268c:	d10b      	bne.n	80026a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268e:	4b89      	ldr	r3, [pc, #548]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d06c      	beq.n	8002774 <HAL_RCC_OscConfig+0x12c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d168      	bne.n	8002774 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e246      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x76>
 80026b0:	4b80      	ldr	r3, [pc, #512]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a7f      	ldr	r2, [pc, #508]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e02e      	b.n	800271c <HAL_RCC_OscConfig+0xd4>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x98>
 80026c6:	4b7b      	ldr	r3, [pc, #492]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7a      	ldr	r2, [pc, #488]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b78      	ldr	r3, [pc, #480]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a77      	ldr	r2, [pc, #476]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e01d      	b.n	800271c <HAL_RCC_OscConfig+0xd4>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0xbc>
 80026ea:	4b72      	ldr	r3, [pc, #456]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a71      	ldr	r2, [pc, #452]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b6f      	ldr	r3, [pc, #444]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6e      	ldr	r2, [pc, #440]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0xd4>
 8002704:	4b6b      	ldr	r3, [pc, #428]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a6a      	ldr	r2, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b68      	ldr	r3, [pc, #416]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a67      	ldr	r2, [pc, #412]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe ffec 	bl	8001700 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272c:	f7fe ffe8 	bl	8001700 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e1fa      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0xe4>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe ffd8 	bl	8001700 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002754:	f7fe ffd4 	bl	8001700 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1e6      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x10c>
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d063      	beq.n	800284a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002782:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d11c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x18c>
 800279a:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x176>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1ba      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4939      	ldr	r1, [pc, #228]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	e03a      	b.n	800284a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_RCC_OscConfig+0x270>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe ff8d 	bl	8001700 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7fe ff89 	bl	8001700 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e19b      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4927      	ldr	r1, [pc, #156]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e015      	b.n	800284a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_RCC_OscConfig+0x270>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe ff6c 	bl	8001700 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282c:	f7fe ff68 	bl	8001700 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e17a      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d03a      	beq.n	80028cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d019      	beq.n	8002892 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_RCC_OscConfig+0x274>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe ff4c 	bl	8001700 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7fe ff48 	bl	8001700 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e15a      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800288a:	2001      	movs	r0, #1
 800288c:	f000 fab8 	bl	8002e00 <RCC_Delay>
 8002890:	e01c      	b.n	80028cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCC_OscConfig+0x274>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7fe ff32 	bl	8001700 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289e:	e00f      	b.n	80028c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe ff2e 	bl	8001700 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d908      	bls.n	80028c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e140      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	42420000 	.word	0x42420000
 80028bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b9e      	ldr	r3, [pc, #632]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e9      	bne.n	80028a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a6 	beq.w	8002a26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028de:	4b97      	ldr	r3, [pc, #604]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10d      	bne.n	8002906 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	4b94      	ldr	r3, [pc, #592]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a93      	ldr	r2, [pc, #588]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f4:	61d3      	str	r3, [r2, #28]
 80028f6:	4b91      	ldr	r3, [pc, #580]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002902:	2301      	movs	r3, #1
 8002904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	4b8e      	ldr	r3, [pc, #568]	; (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d118      	bne.n	8002944 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002912:	4b8b      	ldr	r3, [pc, #556]	; (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a8a      	ldr	r2, [pc, #552]	; (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291e:	f7fe feef 	bl	8001700 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002926:	f7fe feeb 	bl	8001700 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0fd      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	4b81      	ldr	r3, [pc, #516]	; (8002b40 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x312>
 800294c:	4b7b      	ldr	r3, [pc, #492]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4a7a      	ldr	r2, [pc, #488]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6213      	str	r3, [r2, #32]
 8002958:	e02d      	b.n	80029b6 <HAL_RCC_OscConfig+0x36e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x334>
 8002962:	4b76      	ldr	r3, [pc, #472]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a75      	ldr	r2, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	6213      	str	r3, [r2, #32]
 800296e:	4b73      	ldr	r3, [pc, #460]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a72      	ldr	r2, [pc, #456]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	e01c      	b.n	80029b6 <HAL_RCC_OscConfig+0x36e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d10c      	bne.n	800299e <HAL_RCC_OscConfig+0x356>
 8002984:	4b6d      	ldr	r3, [pc, #436]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4a6c      	ldr	r2, [pc, #432]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	6213      	str	r3, [r2, #32]
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a69      	ldr	r2, [pc, #420]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6213      	str	r3, [r2, #32]
 800299c:	e00b      	b.n	80029b6 <HAL_RCC_OscConfig+0x36e>
 800299e:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a66      	ldr	r2, [pc, #408]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6213      	str	r3, [r2, #32]
 80029aa:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a63      	ldr	r2, [pc, #396]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	f023 0304 	bic.w	r3, r3, #4
 80029b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d015      	beq.n	80029ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7fe fe9f 	bl	8001700 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe fe9b 	bl	8001700 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e0ab      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	4b57      	ldr	r3, [pc, #348]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ee      	beq.n	80029c6 <HAL_RCC_OscConfig+0x37e>
 80029e8:	e014      	b.n	8002a14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ea:	f7fe fe89 	bl	8001700 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe fe85 	bl	8001700 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e095      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	4b4c      	ldr	r3, [pc, #304]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ee      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d105      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b48      	ldr	r3, [pc, #288]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4a47      	ldr	r2, [pc, #284]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8081 	beq.w	8002b32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a30:	4b42      	ldr	r3, [pc, #264]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d061      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d146      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a44:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_RCC_OscConfig+0x4fc>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fe59 	bl	8001700 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe fe55 	bl	8001700 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e067      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d108      	bne.n	8002a8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	492d      	ldr	r1, [pc, #180]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a19      	ldr	r1, [r3, #32]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	4927      	ldr	r1, [pc, #156]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_OscConfig+0x4fc>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fe29 	bl	8001700 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7fe fe25 	bl	8001700 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e037      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x46a>
 8002ad0:	e02f      	b.n	8002b32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_RCC_OscConfig+0x4fc>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fe12 	bl	8001700 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fe0e 	bl	8001700 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e020      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x498>
 8002afe:	e018      	b.n	8002b32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e013      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40007000 	.word	0x40007000
 8002b44:	42420060 	.word	0x42420060

08002b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0d0      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	4965      	ldr	r1, [pc, #404]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d040      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d115      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e073      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06b      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4936      	ldr	r1, [pc, #216]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7fe fd62 	bl	8001700 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe fd5e 	bl	8001700 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e053      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d210      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	4922      	ldr	r1, [pc, #136]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f821 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1cc>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x1d0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fcc0 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08003fe4 	.word	0x08003fe4
 8002d14:	20000098 	.word	0x20000098
 8002d18:	2000009c 	.word	0x2000009c

08002d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d36:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x30>
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x36>
 8002d4a:	e027      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d4e:	613b      	str	r3, [r7, #16]
      break;
 8002d50:	e027      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0c9b      	lsrs	r3, r3, #18
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
 8002d5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d010      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0c5b      	lsrs	r3, r3, #17
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7e:	fb02 f203 	mul.w	r2, r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e004      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	613b      	str	r3, [r7, #16]
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d9e:	613b      	str	r3, [r7, #16]
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	693b      	ldr	r3, [r7, #16]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	08003ffc 	.word	0x08003ffc
 8002dbc:	0800400c 	.word	0x0800400c
 8002dc0:	003d0900 	.word	0x003d0900

08002dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b02      	ldr	r3, [pc, #8]	; (8002dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	20000098 	.word	0x20000098

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ddc:	f7ff fff2 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4903      	ldr	r1, [pc, #12]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	08003ff4 	.word	0x08003ff4

08002e00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <RCC_Delay+0x34>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <RCC_Delay+0x38>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0a5b      	lsrs	r3, r3, #9
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e1c:	bf00      	nop
  }
  while (Delay --);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1e5a      	subs	r2, r3, #1
 8002e22:	60fa      	str	r2, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f9      	bne.n	8002e1c <RCC_Delay+0x1c>
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	20000098 	.word	0x20000098
 8002e38:	10624dd3 	.word	0x10624dd3

08002e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e041      	b.n	8002ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe fb3c 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f000 fa5c 	bl	8003338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d001      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e03a      	b.n	8002f6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <HAL_TIM_Base_Start_IT+0x98>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00e      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x58>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1e:	d009      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x58>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x58>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <HAL_TIM_Base_Start_IT+0xa0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d111      	bne.n	8002f58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d010      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f56:	e007      	b.n	8002f68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800

08002f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d020      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01b      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0202 	mvn.w	r2, #2
 8002fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f998 	bl	8003300 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f98b 	bl	80032ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f99a 	bl	8003312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d020      	beq.n	8003030 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0204 	mvn.w	r2, #4
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2202      	movs	r2, #2
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f972 	bl	8003300 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f965 	bl	80032ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f974 	bl	8003312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d020      	beq.n	800307c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0208 	mvn.w	r2, #8
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2204      	movs	r2, #4
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f94c 	bl	8003300 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f93f 	bl	80032ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f94e 	bl	8003312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d020      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01b      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0210 	mvn.w	r2, #16
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2208      	movs	r2, #8
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f926 	bl	8003300 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f919 	bl	80032ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f928 	bl	8003312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0201 	mvn.w	r2, #1
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe f904 	bl	80012f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa7f 	bl	800360e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00c      	beq.n	8003134 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8f8 	bl	8003324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00c      	beq.n	8003158 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0220 	mvn.w	r2, #32
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fa52 	bl	80035fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIM_ConfigClockSource+0x1c>
 8003178:	2302      	movs	r3, #2
 800317a:	e0b4      	b.n	80032e6 <HAL_TIM_ConfigClockSource+0x186>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800319a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b4:	d03e      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0xd4>
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ba:	f200 8087 	bhi.w	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c2:	f000 8086 	beq.w	80032d2 <HAL_TIM_ConfigClockSource+0x172>
 80031c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ca:	d87f      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b70      	cmp	r3, #112	; 0x70
 80031ce:	d01a      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0xa6>
 80031d0:	2b70      	cmp	r3, #112	; 0x70
 80031d2:	d87b      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b60      	cmp	r3, #96	; 0x60
 80031d6:	d050      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x11a>
 80031d8:	2b60      	cmp	r3, #96	; 0x60
 80031da:	d877      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b50      	cmp	r3, #80	; 0x50
 80031de:	d03c      	beq.n	800325a <HAL_TIM_ConfigClockSource+0xfa>
 80031e0:	2b50      	cmp	r3, #80	; 0x50
 80031e2:	d873      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d058      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x13a>
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d86f      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b30      	cmp	r3, #48	; 0x30
 80031ee:	d064      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x15a>
 80031f0:	2b30      	cmp	r3, #48	; 0x30
 80031f2:	d86b      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d060      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x15a>
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d867      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d05c      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x15a>
 8003200:	2b10      	cmp	r3, #16
 8003202:	d05a      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x15a>
 8003204:	e062      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f000 f974 	bl	8003502 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	609a      	str	r2, [r3, #8]
      break;
 8003232:	e04f      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f000 f95d 	bl	8003502 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003256:	609a      	str	r2, [r3, #8]
      break;
 8003258:	e03c      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	461a      	mov	r2, r3
 8003268:	f000 f8d4 	bl	8003414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2150      	movs	r1, #80	; 0x50
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f92b 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 8003278:	e02c      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	461a      	mov	r2, r3
 8003288:	f000 f8f2 	bl	8003470 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2160      	movs	r1, #96	; 0x60
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f91b 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 8003298:	e01c      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	461a      	mov	r2, r3
 80032a8:	f000 f8b4 	bl	8003414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2140      	movs	r1, #64	; 0x40
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f90b 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 80032b8:	e00c      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4619      	mov	r1, r3
 80032c4:	4610      	mov	r0, r2
 80032c6:	f000 f902 	bl	80034ce <TIM_ITRx_SetConfig>
      break;
 80032ca:	e003      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
      break;
 80032d0:	e000      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
	...

08003338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a2f      	ldr	r2, [pc, #188]	; (8003408 <TIM_Base_SetConfig+0xd0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <TIM_Base_SetConfig+0x30>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003356:	d007      	beq.n	8003368 <TIM_Base_SetConfig+0x30>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a2c      	ldr	r2, [pc, #176]	; (800340c <TIM_Base_SetConfig+0xd4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_Base_SetConfig+0x30>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <TIM_Base_SetConfig+0xd8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d108      	bne.n	800337a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a22      	ldr	r2, [pc, #136]	; (8003408 <TIM_Base_SetConfig+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00b      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003388:	d007      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1f      	ldr	r2, [pc, #124]	; (800340c <TIM_Base_SetConfig+0xd4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <TIM_Base_SetConfig+0xd8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d108      	bne.n	80033ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <TIM_Base_SetConfig+0xd0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f023 0201 	bic.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
  }
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800

08003414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0201 	bic.w	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800343e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 030a 	bic.w	r3, r3, #10
 8003450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f023 0210 	bic.w	r2, r3, #16
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800349a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	031b      	lsls	r3, r3, #12
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	bf00      	nop
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f043 0307 	orr.w	r3, r3, #7
 80034f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003502:	b480      	push	{r7}
 8003504:	b087      	sub	sp, #28
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800351c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	431a      	orrs	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4313      	orrs	r3, r2
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003554:	2302      	movs	r3, #2
 8003556:	e046      	b.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a4:	d009      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a10      	ldr	r2, [pc, #64]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10c      	bne.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800

080035fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr

0800360e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <__errno>:
 8003620:	4b01      	ldr	r3, [pc, #4]	; (8003628 <__errno+0x8>)
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	200000a4 	.word	0x200000a4

0800362c <__libc_init_array>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	2600      	movs	r6, #0
 8003630:	4d0c      	ldr	r5, [pc, #48]	; (8003664 <__libc_init_array+0x38>)
 8003632:	4c0d      	ldr	r4, [pc, #52]	; (8003668 <__libc_init_array+0x3c>)
 8003634:	1b64      	subs	r4, r4, r5
 8003636:	10a4      	asrs	r4, r4, #2
 8003638:	42a6      	cmp	r6, r4
 800363a:	d109      	bne.n	8003650 <__libc_init_array+0x24>
 800363c:	f000 fc5c 	bl	8003ef8 <_init>
 8003640:	2600      	movs	r6, #0
 8003642:	4d0a      	ldr	r5, [pc, #40]	; (800366c <__libc_init_array+0x40>)
 8003644:	4c0a      	ldr	r4, [pc, #40]	; (8003670 <__libc_init_array+0x44>)
 8003646:	1b64      	subs	r4, r4, r5
 8003648:	10a4      	asrs	r4, r4, #2
 800364a:	42a6      	cmp	r6, r4
 800364c:	d105      	bne.n	800365a <__libc_init_array+0x2e>
 800364e:	bd70      	pop	{r4, r5, r6, pc}
 8003650:	f855 3b04 	ldr.w	r3, [r5], #4
 8003654:	4798      	blx	r3
 8003656:	3601      	adds	r6, #1
 8003658:	e7ee      	b.n	8003638 <__libc_init_array+0xc>
 800365a:	f855 3b04 	ldr.w	r3, [r5], #4
 800365e:	4798      	blx	r3
 8003660:	3601      	adds	r6, #1
 8003662:	e7f2      	b.n	800364a <__libc_init_array+0x1e>
 8003664:	08004044 	.word	0x08004044
 8003668:	08004044 	.word	0x08004044
 800366c:	08004044 	.word	0x08004044
 8003670:	08004048 	.word	0x08004048

08003674 <memset>:
 8003674:	4603      	mov	r3, r0
 8003676:	4402      	add	r2, r0
 8003678:	4293      	cmp	r3, r2
 800367a:	d100      	bne.n	800367e <memset+0xa>
 800367c:	4770      	bx	lr
 800367e:	f803 1b01 	strb.w	r1, [r3], #1
 8003682:	e7f9      	b.n	8003678 <memset+0x4>

08003684 <siprintf>:
 8003684:	b40e      	push	{r1, r2, r3}
 8003686:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800368a:	b500      	push	{lr}
 800368c:	b09c      	sub	sp, #112	; 0x70
 800368e:	ab1d      	add	r3, sp, #116	; 0x74
 8003690:	9002      	str	r0, [sp, #8]
 8003692:	9006      	str	r0, [sp, #24]
 8003694:	9107      	str	r1, [sp, #28]
 8003696:	9104      	str	r1, [sp, #16]
 8003698:	4808      	ldr	r0, [pc, #32]	; (80036bc <siprintf+0x38>)
 800369a:	4909      	ldr	r1, [pc, #36]	; (80036c0 <siprintf+0x3c>)
 800369c:	f853 2b04 	ldr.w	r2, [r3], #4
 80036a0:	9105      	str	r1, [sp, #20]
 80036a2:	6800      	ldr	r0, [r0, #0]
 80036a4:	a902      	add	r1, sp, #8
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	f000 f868 	bl	800377c <_svfiprintf_r>
 80036ac:	2200      	movs	r2, #0
 80036ae:	9b02      	ldr	r3, [sp, #8]
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	b01c      	add	sp, #112	; 0x70
 80036b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036b8:	b003      	add	sp, #12
 80036ba:	4770      	bx	lr
 80036bc:	200000a4 	.word	0x200000a4
 80036c0:	ffff0208 	.word	0xffff0208

080036c4 <__ssputs_r>:
 80036c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c8:	688e      	ldr	r6, [r1, #8]
 80036ca:	4682      	mov	sl, r0
 80036cc:	429e      	cmp	r6, r3
 80036ce:	460c      	mov	r4, r1
 80036d0:	4690      	mov	r8, r2
 80036d2:	461f      	mov	r7, r3
 80036d4:	d838      	bhi.n	8003748 <__ssputs_r+0x84>
 80036d6:	898a      	ldrh	r2, [r1, #12]
 80036d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036dc:	d032      	beq.n	8003744 <__ssputs_r+0x80>
 80036de:	6825      	ldr	r5, [r4, #0]
 80036e0:	6909      	ldr	r1, [r1, #16]
 80036e2:	3301      	adds	r3, #1
 80036e4:	eba5 0901 	sub.w	r9, r5, r1
 80036e8:	6965      	ldr	r5, [r4, #20]
 80036ea:	444b      	add	r3, r9
 80036ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036f4:	106d      	asrs	r5, r5, #1
 80036f6:	429d      	cmp	r5, r3
 80036f8:	bf38      	it	cc
 80036fa:	461d      	movcc	r5, r3
 80036fc:	0553      	lsls	r3, r2, #21
 80036fe:	d531      	bpl.n	8003764 <__ssputs_r+0xa0>
 8003700:	4629      	mov	r1, r5
 8003702:	f000 fb53 	bl	8003dac <_malloc_r>
 8003706:	4606      	mov	r6, r0
 8003708:	b950      	cbnz	r0, 8003720 <__ssputs_r+0x5c>
 800370a:	230c      	movs	r3, #12
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	f8ca 3000 	str.w	r3, [sl]
 8003714:	89a3      	ldrh	r3, [r4, #12]
 8003716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800371a:	81a3      	strh	r3, [r4, #12]
 800371c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003720:	464a      	mov	r2, r9
 8003722:	6921      	ldr	r1, [r4, #16]
 8003724:	f000 face 	bl	8003cc4 <memcpy>
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800372e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	6126      	str	r6, [r4, #16]
 8003736:	444e      	add	r6, r9
 8003738:	6026      	str	r6, [r4, #0]
 800373a:	463e      	mov	r6, r7
 800373c:	6165      	str	r5, [r4, #20]
 800373e:	eba5 0509 	sub.w	r5, r5, r9
 8003742:	60a5      	str	r5, [r4, #8]
 8003744:	42be      	cmp	r6, r7
 8003746:	d900      	bls.n	800374a <__ssputs_r+0x86>
 8003748:	463e      	mov	r6, r7
 800374a:	4632      	mov	r2, r6
 800374c:	4641      	mov	r1, r8
 800374e:	6820      	ldr	r0, [r4, #0]
 8003750:	f000 fac6 	bl	8003ce0 <memmove>
 8003754:	68a3      	ldr	r3, [r4, #8]
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	1b9b      	subs	r3, r3, r6
 800375a:	4432      	add	r2, r6
 800375c:	2000      	movs	r0, #0
 800375e:	60a3      	str	r3, [r4, #8]
 8003760:	6022      	str	r2, [r4, #0]
 8003762:	e7db      	b.n	800371c <__ssputs_r+0x58>
 8003764:	462a      	mov	r2, r5
 8003766:	f000 fb7b 	bl	8003e60 <_realloc_r>
 800376a:	4606      	mov	r6, r0
 800376c:	2800      	cmp	r0, #0
 800376e:	d1e1      	bne.n	8003734 <__ssputs_r+0x70>
 8003770:	4650      	mov	r0, sl
 8003772:	6921      	ldr	r1, [r4, #16]
 8003774:	f000 face 	bl	8003d14 <_free_r>
 8003778:	e7c7      	b.n	800370a <__ssputs_r+0x46>
	...

0800377c <_svfiprintf_r>:
 800377c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003780:	4698      	mov	r8, r3
 8003782:	898b      	ldrh	r3, [r1, #12]
 8003784:	4607      	mov	r7, r0
 8003786:	061b      	lsls	r3, r3, #24
 8003788:	460d      	mov	r5, r1
 800378a:	4614      	mov	r4, r2
 800378c:	b09d      	sub	sp, #116	; 0x74
 800378e:	d50e      	bpl.n	80037ae <_svfiprintf_r+0x32>
 8003790:	690b      	ldr	r3, [r1, #16]
 8003792:	b963      	cbnz	r3, 80037ae <_svfiprintf_r+0x32>
 8003794:	2140      	movs	r1, #64	; 0x40
 8003796:	f000 fb09 	bl	8003dac <_malloc_r>
 800379a:	6028      	str	r0, [r5, #0]
 800379c:	6128      	str	r0, [r5, #16]
 800379e:	b920      	cbnz	r0, 80037aa <_svfiprintf_r+0x2e>
 80037a0:	230c      	movs	r3, #12
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	e0d1      	b.n	800394e <_svfiprintf_r+0x1d2>
 80037aa:	2340      	movs	r3, #64	; 0x40
 80037ac:	616b      	str	r3, [r5, #20]
 80037ae:	2300      	movs	r3, #0
 80037b0:	9309      	str	r3, [sp, #36]	; 0x24
 80037b2:	2320      	movs	r3, #32
 80037b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037b8:	2330      	movs	r3, #48	; 0x30
 80037ba:	f04f 0901 	mov.w	r9, #1
 80037be:	f8cd 800c 	str.w	r8, [sp, #12]
 80037c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003968 <_svfiprintf_r+0x1ec>
 80037c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037ca:	4623      	mov	r3, r4
 80037cc:	469a      	mov	sl, r3
 80037ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037d2:	b10a      	cbz	r2, 80037d8 <_svfiprintf_r+0x5c>
 80037d4:	2a25      	cmp	r2, #37	; 0x25
 80037d6:	d1f9      	bne.n	80037cc <_svfiprintf_r+0x50>
 80037d8:	ebba 0b04 	subs.w	fp, sl, r4
 80037dc:	d00b      	beq.n	80037f6 <_svfiprintf_r+0x7a>
 80037de:	465b      	mov	r3, fp
 80037e0:	4622      	mov	r2, r4
 80037e2:	4629      	mov	r1, r5
 80037e4:	4638      	mov	r0, r7
 80037e6:	f7ff ff6d 	bl	80036c4 <__ssputs_r>
 80037ea:	3001      	adds	r0, #1
 80037ec:	f000 80aa 	beq.w	8003944 <_svfiprintf_r+0x1c8>
 80037f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037f2:	445a      	add	r2, fp
 80037f4:	9209      	str	r2, [sp, #36]	; 0x24
 80037f6:	f89a 3000 	ldrb.w	r3, [sl]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80a2 	beq.w	8003944 <_svfiprintf_r+0x1c8>
 8003800:	2300      	movs	r3, #0
 8003802:	f04f 32ff 	mov.w	r2, #4294967295
 8003806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800380a:	f10a 0a01 	add.w	sl, sl, #1
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	9307      	str	r3, [sp, #28]
 8003812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003816:	931a      	str	r3, [sp, #104]	; 0x68
 8003818:	4654      	mov	r4, sl
 800381a:	2205      	movs	r2, #5
 800381c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003820:	4851      	ldr	r0, [pc, #324]	; (8003968 <_svfiprintf_r+0x1ec>)
 8003822:	f000 fa41 	bl	8003ca8 <memchr>
 8003826:	9a04      	ldr	r2, [sp, #16]
 8003828:	b9d8      	cbnz	r0, 8003862 <_svfiprintf_r+0xe6>
 800382a:	06d0      	lsls	r0, r2, #27
 800382c:	bf44      	itt	mi
 800382e:	2320      	movmi	r3, #32
 8003830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003834:	0711      	lsls	r1, r2, #28
 8003836:	bf44      	itt	mi
 8003838:	232b      	movmi	r3, #43	; 0x2b
 800383a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800383e:	f89a 3000 	ldrb.w	r3, [sl]
 8003842:	2b2a      	cmp	r3, #42	; 0x2a
 8003844:	d015      	beq.n	8003872 <_svfiprintf_r+0xf6>
 8003846:	4654      	mov	r4, sl
 8003848:	2000      	movs	r0, #0
 800384a:	f04f 0c0a 	mov.w	ip, #10
 800384e:	9a07      	ldr	r2, [sp, #28]
 8003850:	4621      	mov	r1, r4
 8003852:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003856:	3b30      	subs	r3, #48	; 0x30
 8003858:	2b09      	cmp	r3, #9
 800385a:	d94e      	bls.n	80038fa <_svfiprintf_r+0x17e>
 800385c:	b1b0      	cbz	r0, 800388c <_svfiprintf_r+0x110>
 800385e:	9207      	str	r2, [sp, #28]
 8003860:	e014      	b.n	800388c <_svfiprintf_r+0x110>
 8003862:	eba0 0308 	sub.w	r3, r0, r8
 8003866:	fa09 f303 	lsl.w	r3, r9, r3
 800386a:	4313      	orrs	r3, r2
 800386c:	46a2      	mov	sl, r4
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	e7d2      	b.n	8003818 <_svfiprintf_r+0x9c>
 8003872:	9b03      	ldr	r3, [sp, #12]
 8003874:	1d19      	adds	r1, r3, #4
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	9103      	str	r1, [sp, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	bfbb      	ittet	lt
 800387e:	425b      	neglt	r3, r3
 8003880:	f042 0202 	orrlt.w	r2, r2, #2
 8003884:	9307      	strge	r3, [sp, #28]
 8003886:	9307      	strlt	r3, [sp, #28]
 8003888:	bfb8      	it	lt
 800388a:	9204      	strlt	r2, [sp, #16]
 800388c:	7823      	ldrb	r3, [r4, #0]
 800388e:	2b2e      	cmp	r3, #46	; 0x2e
 8003890:	d10c      	bne.n	80038ac <_svfiprintf_r+0x130>
 8003892:	7863      	ldrb	r3, [r4, #1]
 8003894:	2b2a      	cmp	r3, #42	; 0x2a
 8003896:	d135      	bne.n	8003904 <_svfiprintf_r+0x188>
 8003898:	9b03      	ldr	r3, [sp, #12]
 800389a:	3402      	adds	r4, #2
 800389c:	1d1a      	adds	r2, r3, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	9203      	str	r2, [sp, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bfb8      	it	lt
 80038a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80038aa:	9305      	str	r3, [sp, #20]
 80038ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003978 <_svfiprintf_r+0x1fc>
 80038b0:	2203      	movs	r2, #3
 80038b2:	4650      	mov	r0, sl
 80038b4:	7821      	ldrb	r1, [r4, #0]
 80038b6:	f000 f9f7 	bl	8003ca8 <memchr>
 80038ba:	b140      	cbz	r0, 80038ce <_svfiprintf_r+0x152>
 80038bc:	2340      	movs	r3, #64	; 0x40
 80038be:	eba0 000a 	sub.w	r0, r0, sl
 80038c2:	fa03 f000 	lsl.w	r0, r3, r0
 80038c6:	9b04      	ldr	r3, [sp, #16]
 80038c8:	3401      	adds	r4, #1
 80038ca:	4303      	orrs	r3, r0
 80038cc:	9304      	str	r3, [sp, #16]
 80038ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d2:	2206      	movs	r2, #6
 80038d4:	4825      	ldr	r0, [pc, #148]	; (800396c <_svfiprintf_r+0x1f0>)
 80038d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038da:	f000 f9e5 	bl	8003ca8 <memchr>
 80038de:	2800      	cmp	r0, #0
 80038e0:	d038      	beq.n	8003954 <_svfiprintf_r+0x1d8>
 80038e2:	4b23      	ldr	r3, [pc, #140]	; (8003970 <_svfiprintf_r+0x1f4>)
 80038e4:	bb1b      	cbnz	r3, 800392e <_svfiprintf_r+0x1b2>
 80038e6:	9b03      	ldr	r3, [sp, #12]
 80038e8:	3307      	adds	r3, #7
 80038ea:	f023 0307 	bic.w	r3, r3, #7
 80038ee:	3308      	adds	r3, #8
 80038f0:	9303      	str	r3, [sp, #12]
 80038f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f4:	4433      	add	r3, r6
 80038f6:	9309      	str	r3, [sp, #36]	; 0x24
 80038f8:	e767      	b.n	80037ca <_svfiprintf_r+0x4e>
 80038fa:	460c      	mov	r4, r1
 80038fc:	2001      	movs	r0, #1
 80038fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003902:	e7a5      	b.n	8003850 <_svfiprintf_r+0xd4>
 8003904:	2300      	movs	r3, #0
 8003906:	f04f 0c0a 	mov.w	ip, #10
 800390a:	4619      	mov	r1, r3
 800390c:	3401      	adds	r4, #1
 800390e:	9305      	str	r3, [sp, #20]
 8003910:	4620      	mov	r0, r4
 8003912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003916:	3a30      	subs	r2, #48	; 0x30
 8003918:	2a09      	cmp	r2, #9
 800391a:	d903      	bls.n	8003924 <_svfiprintf_r+0x1a8>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0c5      	beq.n	80038ac <_svfiprintf_r+0x130>
 8003920:	9105      	str	r1, [sp, #20]
 8003922:	e7c3      	b.n	80038ac <_svfiprintf_r+0x130>
 8003924:	4604      	mov	r4, r0
 8003926:	2301      	movs	r3, #1
 8003928:	fb0c 2101 	mla	r1, ip, r1, r2
 800392c:	e7f0      	b.n	8003910 <_svfiprintf_r+0x194>
 800392e:	ab03      	add	r3, sp, #12
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	462a      	mov	r2, r5
 8003934:	4638      	mov	r0, r7
 8003936:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <_svfiprintf_r+0x1f8>)
 8003938:	a904      	add	r1, sp, #16
 800393a:	f3af 8000 	nop.w
 800393e:	1c42      	adds	r2, r0, #1
 8003940:	4606      	mov	r6, r0
 8003942:	d1d6      	bne.n	80038f2 <_svfiprintf_r+0x176>
 8003944:	89ab      	ldrh	r3, [r5, #12]
 8003946:	065b      	lsls	r3, r3, #25
 8003948:	f53f af2c 	bmi.w	80037a4 <_svfiprintf_r+0x28>
 800394c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800394e:	b01d      	add	sp, #116	; 0x74
 8003950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003954:	ab03      	add	r3, sp, #12
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	462a      	mov	r2, r5
 800395a:	4638      	mov	r0, r7
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <_svfiprintf_r+0x1f8>)
 800395e:	a904      	add	r1, sp, #16
 8003960:	f000 f87c 	bl	8003a5c <_printf_i>
 8003964:	e7eb      	b.n	800393e <_svfiprintf_r+0x1c2>
 8003966:	bf00      	nop
 8003968:	0800400e 	.word	0x0800400e
 800396c:	08004018 	.word	0x08004018
 8003970:	00000000 	.word	0x00000000
 8003974:	080036c5 	.word	0x080036c5
 8003978:	08004014 	.word	0x08004014

0800397c <_printf_common>:
 800397c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003980:	4616      	mov	r6, r2
 8003982:	4699      	mov	r9, r3
 8003984:	688a      	ldr	r2, [r1, #8]
 8003986:	690b      	ldr	r3, [r1, #16]
 8003988:	4607      	mov	r7, r0
 800398a:	4293      	cmp	r3, r2
 800398c:	bfb8      	it	lt
 800398e:	4613      	movlt	r3, r2
 8003990:	6033      	str	r3, [r6, #0]
 8003992:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003996:	460c      	mov	r4, r1
 8003998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800399c:	b10a      	cbz	r2, 80039a2 <_printf_common+0x26>
 800399e:	3301      	adds	r3, #1
 80039a0:	6033      	str	r3, [r6, #0]
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	0699      	lsls	r1, r3, #26
 80039a6:	bf42      	ittt	mi
 80039a8:	6833      	ldrmi	r3, [r6, #0]
 80039aa:	3302      	addmi	r3, #2
 80039ac:	6033      	strmi	r3, [r6, #0]
 80039ae:	6825      	ldr	r5, [r4, #0]
 80039b0:	f015 0506 	ands.w	r5, r5, #6
 80039b4:	d106      	bne.n	80039c4 <_printf_common+0x48>
 80039b6:	f104 0a19 	add.w	sl, r4, #25
 80039ba:	68e3      	ldr	r3, [r4, #12]
 80039bc:	6832      	ldr	r2, [r6, #0]
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	dc28      	bgt.n	8003a16 <_printf_common+0x9a>
 80039c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039c8:	1e13      	subs	r3, r2, #0
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	bf18      	it	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	0692      	lsls	r2, r2, #26
 80039d2:	d42d      	bmi.n	8003a30 <_printf_common+0xb4>
 80039d4:	4649      	mov	r1, r9
 80039d6:	4638      	mov	r0, r7
 80039d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039dc:	47c0      	blx	r8
 80039de:	3001      	adds	r0, #1
 80039e0:	d020      	beq.n	8003a24 <_printf_common+0xa8>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	68e5      	ldr	r5, [r4, #12]
 80039e6:	f003 0306 	and.w	r3, r3, #6
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	bf18      	it	ne
 80039ee:	2500      	movne	r5, #0
 80039f0:	6832      	ldr	r2, [r6, #0]
 80039f2:	f04f 0600 	mov.w	r6, #0
 80039f6:	68a3      	ldr	r3, [r4, #8]
 80039f8:	bf08      	it	eq
 80039fa:	1aad      	subeq	r5, r5, r2
 80039fc:	6922      	ldr	r2, [r4, #16]
 80039fe:	bf08      	it	eq
 8003a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a04:	4293      	cmp	r3, r2
 8003a06:	bfc4      	itt	gt
 8003a08:	1a9b      	subgt	r3, r3, r2
 8003a0a:	18ed      	addgt	r5, r5, r3
 8003a0c:	341a      	adds	r4, #26
 8003a0e:	42b5      	cmp	r5, r6
 8003a10:	d11a      	bne.n	8003a48 <_printf_common+0xcc>
 8003a12:	2000      	movs	r0, #0
 8003a14:	e008      	b.n	8003a28 <_printf_common+0xac>
 8003a16:	2301      	movs	r3, #1
 8003a18:	4652      	mov	r2, sl
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	47c0      	blx	r8
 8003a20:	3001      	adds	r0, #1
 8003a22:	d103      	bne.n	8003a2c <_printf_common+0xb0>
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a2c:	3501      	adds	r5, #1
 8003a2e:	e7c4      	b.n	80039ba <_printf_common+0x3e>
 8003a30:	2030      	movs	r0, #48	; 0x30
 8003a32:	18e1      	adds	r1, r4, r3
 8003a34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a3e:	4422      	add	r2, r4
 8003a40:	3302      	adds	r3, #2
 8003a42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a46:	e7c5      	b.n	80039d4 <_printf_common+0x58>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	4622      	mov	r2, r4
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	4638      	mov	r0, r7
 8003a50:	47c0      	blx	r8
 8003a52:	3001      	adds	r0, #1
 8003a54:	d0e6      	beq.n	8003a24 <_printf_common+0xa8>
 8003a56:	3601      	adds	r6, #1
 8003a58:	e7d9      	b.n	8003a0e <_printf_common+0x92>
	...

08003a5c <_printf_i>:
 8003a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a60:	460c      	mov	r4, r1
 8003a62:	7e27      	ldrb	r7, [r4, #24]
 8003a64:	4691      	mov	r9, r2
 8003a66:	2f78      	cmp	r7, #120	; 0x78
 8003a68:	4680      	mov	r8, r0
 8003a6a:	469a      	mov	sl, r3
 8003a6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a72:	d807      	bhi.n	8003a84 <_printf_i+0x28>
 8003a74:	2f62      	cmp	r7, #98	; 0x62
 8003a76:	d80a      	bhi.n	8003a8e <_printf_i+0x32>
 8003a78:	2f00      	cmp	r7, #0
 8003a7a:	f000 80d9 	beq.w	8003c30 <_printf_i+0x1d4>
 8003a7e:	2f58      	cmp	r7, #88	; 0x58
 8003a80:	f000 80a4 	beq.w	8003bcc <_printf_i+0x170>
 8003a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a8c:	e03a      	b.n	8003b04 <_printf_i+0xa8>
 8003a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a92:	2b15      	cmp	r3, #21
 8003a94:	d8f6      	bhi.n	8003a84 <_printf_i+0x28>
 8003a96:	a001      	add	r0, pc, #4	; (adr r0, 8003a9c <_printf_i+0x40>)
 8003a98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a9c:	08003af5 	.word	0x08003af5
 8003aa0:	08003b09 	.word	0x08003b09
 8003aa4:	08003a85 	.word	0x08003a85
 8003aa8:	08003a85 	.word	0x08003a85
 8003aac:	08003a85 	.word	0x08003a85
 8003ab0:	08003a85 	.word	0x08003a85
 8003ab4:	08003b09 	.word	0x08003b09
 8003ab8:	08003a85 	.word	0x08003a85
 8003abc:	08003a85 	.word	0x08003a85
 8003ac0:	08003a85 	.word	0x08003a85
 8003ac4:	08003a85 	.word	0x08003a85
 8003ac8:	08003c17 	.word	0x08003c17
 8003acc:	08003b39 	.word	0x08003b39
 8003ad0:	08003bf9 	.word	0x08003bf9
 8003ad4:	08003a85 	.word	0x08003a85
 8003ad8:	08003a85 	.word	0x08003a85
 8003adc:	08003c39 	.word	0x08003c39
 8003ae0:	08003a85 	.word	0x08003a85
 8003ae4:	08003b39 	.word	0x08003b39
 8003ae8:	08003a85 	.word	0x08003a85
 8003aec:	08003a85 	.word	0x08003a85
 8003af0:	08003c01 	.word	0x08003c01
 8003af4:	680b      	ldr	r3, [r1, #0]
 8003af6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003afa:	1d1a      	adds	r2, r3, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	600a      	str	r2, [r1, #0]
 8003b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0a4      	b.n	8003c52 <_printf_i+0x1f6>
 8003b08:	6825      	ldr	r5, [r4, #0]
 8003b0a:	6808      	ldr	r0, [r1, #0]
 8003b0c:	062e      	lsls	r6, r5, #24
 8003b0e:	f100 0304 	add.w	r3, r0, #4
 8003b12:	d50a      	bpl.n	8003b2a <_printf_i+0xce>
 8003b14:	6805      	ldr	r5, [r0, #0]
 8003b16:	600b      	str	r3, [r1, #0]
 8003b18:	2d00      	cmp	r5, #0
 8003b1a:	da03      	bge.n	8003b24 <_printf_i+0xc8>
 8003b1c:	232d      	movs	r3, #45	; 0x2d
 8003b1e:	426d      	negs	r5, r5
 8003b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b24:	230a      	movs	r3, #10
 8003b26:	485e      	ldr	r0, [pc, #376]	; (8003ca0 <_printf_i+0x244>)
 8003b28:	e019      	b.n	8003b5e <_printf_i+0x102>
 8003b2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b2e:	6805      	ldr	r5, [r0, #0]
 8003b30:	600b      	str	r3, [r1, #0]
 8003b32:	bf18      	it	ne
 8003b34:	b22d      	sxthne	r5, r5
 8003b36:	e7ef      	b.n	8003b18 <_printf_i+0xbc>
 8003b38:	680b      	ldr	r3, [r1, #0]
 8003b3a:	6825      	ldr	r5, [r4, #0]
 8003b3c:	1d18      	adds	r0, r3, #4
 8003b3e:	6008      	str	r0, [r1, #0]
 8003b40:	0628      	lsls	r0, r5, #24
 8003b42:	d501      	bpl.n	8003b48 <_printf_i+0xec>
 8003b44:	681d      	ldr	r5, [r3, #0]
 8003b46:	e002      	b.n	8003b4e <_printf_i+0xf2>
 8003b48:	0669      	lsls	r1, r5, #25
 8003b4a:	d5fb      	bpl.n	8003b44 <_printf_i+0xe8>
 8003b4c:	881d      	ldrh	r5, [r3, #0]
 8003b4e:	2f6f      	cmp	r7, #111	; 0x6f
 8003b50:	bf0c      	ite	eq
 8003b52:	2308      	moveq	r3, #8
 8003b54:	230a      	movne	r3, #10
 8003b56:	4852      	ldr	r0, [pc, #328]	; (8003ca0 <_printf_i+0x244>)
 8003b58:	2100      	movs	r1, #0
 8003b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b5e:	6866      	ldr	r6, [r4, #4]
 8003b60:	2e00      	cmp	r6, #0
 8003b62:	bfa8      	it	ge
 8003b64:	6821      	ldrge	r1, [r4, #0]
 8003b66:	60a6      	str	r6, [r4, #8]
 8003b68:	bfa4      	itt	ge
 8003b6a:	f021 0104 	bicge.w	r1, r1, #4
 8003b6e:	6021      	strge	r1, [r4, #0]
 8003b70:	b90d      	cbnz	r5, 8003b76 <_printf_i+0x11a>
 8003b72:	2e00      	cmp	r6, #0
 8003b74:	d04d      	beq.n	8003c12 <_printf_i+0x1b6>
 8003b76:	4616      	mov	r6, r2
 8003b78:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b7c:	fb03 5711 	mls	r7, r3, r1, r5
 8003b80:	5dc7      	ldrb	r7, [r0, r7]
 8003b82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b86:	462f      	mov	r7, r5
 8003b88:	42bb      	cmp	r3, r7
 8003b8a:	460d      	mov	r5, r1
 8003b8c:	d9f4      	bls.n	8003b78 <_printf_i+0x11c>
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d10b      	bne.n	8003baa <_printf_i+0x14e>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	07df      	lsls	r7, r3, #31
 8003b96:	d508      	bpl.n	8003baa <_printf_i+0x14e>
 8003b98:	6923      	ldr	r3, [r4, #16]
 8003b9a:	6861      	ldr	r1, [r4, #4]
 8003b9c:	4299      	cmp	r1, r3
 8003b9e:	bfde      	ittt	le
 8003ba0:	2330      	movle	r3, #48	; 0x30
 8003ba2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ba6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003baa:	1b92      	subs	r2, r2, r6
 8003bac:	6122      	str	r2, [r4, #16]
 8003bae:	464b      	mov	r3, r9
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	f8cd a000 	str.w	sl, [sp]
 8003bb8:	aa03      	add	r2, sp, #12
 8003bba:	f7ff fedf 	bl	800397c <_printf_common>
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	d14c      	bne.n	8003c5c <_printf_i+0x200>
 8003bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc6:	b004      	add	sp, #16
 8003bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bcc:	4834      	ldr	r0, [pc, #208]	; (8003ca0 <_printf_i+0x244>)
 8003bce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bd2:	680e      	ldr	r6, [r1, #0]
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003bda:	061f      	lsls	r7, r3, #24
 8003bdc:	600e      	str	r6, [r1, #0]
 8003bde:	d514      	bpl.n	8003c0a <_printf_i+0x1ae>
 8003be0:	07d9      	lsls	r1, r3, #31
 8003be2:	bf44      	itt	mi
 8003be4:	f043 0320 	orrmi.w	r3, r3, #32
 8003be8:	6023      	strmi	r3, [r4, #0]
 8003bea:	b91d      	cbnz	r5, 8003bf4 <_printf_i+0x198>
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	f023 0320 	bic.w	r3, r3, #32
 8003bf2:	6023      	str	r3, [r4, #0]
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	e7af      	b.n	8003b58 <_printf_i+0xfc>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	f043 0320 	orr.w	r3, r3, #32
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	2378      	movs	r3, #120	; 0x78
 8003c02:	4828      	ldr	r0, [pc, #160]	; (8003ca4 <_printf_i+0x248>)
 8003c04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c08:	e7e3      	b.n	8003bd2 <_printf_i+0x176>
 8003c0a:	065e      	lsls	r6, r3, #25
 8003c0c:	bf48      	it	mi
 8003c0e:	b2ad      	uxthmi	r5, r5
 8003c10:	e7e6      	b.n	8003be0 <_printf_i+0x184>
 8003c12:	4616      	mov	r6, r2
 8003c14:	e7bb      	b.n	8003b8e <_printf_i+0x132>
 8003c16:	680b      	ldr	r3, [r1, #0]
 8003c18:	6826      	ldr	r6, [r4, #0]
 8003c1a:	1d1d      	adds	r5, r3, #4
 8003c1c:	6960      	ldr	r0, [r4, #20]
 8003c1e:	600d      	str	r5, [r1, #0]
 8003c20:	0635      	lsls	r5, r6, #24
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	d501      	bpl.n	8003c2a <_printf_i+0x1ce>
 8003c26:	6018      	str	r0, [r3, #0]
 8003c28:	e002      	b.n	8003c30 <_printf_i+0x1d4>
 8003c2a:	0671      	lsls	r1, r6, #25
 8003c2c:	d5fb      	bpl.n	8003c26 <_printf_i+0x1ca>
 8003c2e:	8018      	strh	r0, [r3, #0]
 8003c30:	2300      	movs	r3, #0
 8003c32:	4616      	mov	r6, r2
 8003c34:	6123      	str	r3, [r4, #16]
 8003c36:	e7ba      	b.n	8003bae <_printf_i+0x152>
 8003c38:	680b      	ldr	r3, [r1, #0]
 8003c3a:	1d1a      	adds	r2, r3, #4
 8003c3c:	600a      	str	r2, [r1, #0]
 8003c3e:	681e      	ldr	r6, [r3, #0]
 8003c40:	2100      	movs	r1, #0
 8003c42:	4630      	mov	r0, r6
 8003c44:	6862      	ldr	r2, [r4, #4]
 8003c46:	f000 f82f 	bl	8003ca8 <memchr>
 8003c4a:	b108      	cbz	r0, 8003c50 <_printf_i+0x1f4>
 8003c4c:	1b80      	subs	r0, r0, r6
 8003c4e:	6060      	str	r0, [r4, #4]
 8003c50:	6863      	ldr	r3, [r4, #4]
 8003c52:	6123      	str	r3, [r4, #16]
 8003c54:	2300      	movs	r3, #0
 8003c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c5a:	e7a8      	b.n	8003bae <_printf_i+0x152>
 8003c5c:	4632      	mov	r2, r6
 8003c5e:	4649      	mov	r1, r9
 8003c60:	4640      	mov	r0, r8
 8003c62:	6923      	ldr	r3, [r4, #16]
 8003c64:	47d0      	blx	sl
 8003c66:	3001      	adds	r0, #1
 8003c68:	d0ab      	beq.n	8003bc2 <_printf_i+0x166>
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	079b      	lsls	r3, r3, #30
 8003c6e:	d413      	bmi.n	8003c98 <_printf_i+0x23c>
 8003c70:	68e0      	ldr	r0, [r4, #12]
 8003c72:	9b03      	ldr	r3, [sp, #12]
 8003c74:	4298      	cmp	r0, r3
 8003c76:	bfb8      	it	lt
 8003c78:	4618      	movlt	r0, r3
 8003c7a:	e7a4      	b.n	8003bc6 <_printf_i+0x16a>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	4632      	mov	r2, r6
 8003c80:	4649      	mov	r1, r9
 8003c82:	4640      	mov	r0, r8
 8003c84:	47d0      	blx	sl
 8003c86:	3001      	adds	r0, #1
 8003c88:	d09b      	beq.n	8003bc2 <_printf_i+0x166>
 8003c8a:	3501      	adds	r5, #1
 8003c8c:	68e3      	ldr	r3, [r4, #12]
 8003c8e:	9903      	ldr	r1, [sp, #12]
 8003c90:	1a5b      	subs	r3, r3, r1
 8003c92:	42ab      	cmp	r3, r5
 8003c94:	dcf2      	bgt.n	8003c7c <_printf_i+0x220>
 8003c96:	e7eb      	b.n	8003c70 <_printf_i+0x214>
 8003c98:	2500      	movs	r5, #0
 8003c9a:	f104 0619 	add.w	r6, r4, #25
 8003c9e:	e7f5      	b.n	8003c8c <_printf_i+0x230>
 8003ca0:	0800401f 	.word	0x0800401f
 8003ca4:	08004030 	.word	0x08004030

08003ca8 <memchr>:
 8003ca8:	4603      	mov	r3, r0
 8003caa:	b510      	push	{r4, lr}
 8003cac:	b2c9      	uxtb	r1, r1
 8003cae:	4402      	add	r2, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	d101      	bne.n	8003cba <memchr+0x12>
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	e003      	b.n	8003cc2 <memchr+0x1a>
 8003cba:	7804      	ldrb	r4, [r0, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	428c      	cmp	r4, r1
 8003cc0:	d1f6      	bne.n	8003cb0 <memchr+0x8>
 8003cc2:	bd10      	pop	{r4, pc}

08003cc4 <memcpy>:
 8003cc4:	440a      	add	r2, r1
 8003cc6:	4291      	cmp	r1, r2
 8003cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ccc:	d100      	bne.n	8003cd0 <memcpy+0xc>
 8003cce:	4770      	bx	lr
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cd6:	4291      	cmp	r1, r2
 8003cd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cdc:	d1f9      	bne.n	8003cd2 <memcpy+0xe>
 8003cde:	bd10      	pop	{r4, pc}

08003ce0 <memmove>:
 8003ce0:	4288      	cmp	r0, r1
 8003ce2:	b510      	push	{r4, lr}
 8003ce4:	eb01 0402 	add.w	r4, r1, r2
 8003ce8:	d902      	bls.n	8003cf0 <memmove+0x10>
 8003cea:	4284      	cmp	r4, r0
 8003cec:	4623      	mov	r3, r4
 8003cee:	d807      	bhi.n	8003d00 <memmove+0x20>
 8003cf0:	1e43      	subs	r3, r0, #1
 8003cf2:	42a1      	cmp	r1, r4
 8003cf4:	d008      	beq.n	8003d08 <memmove+0x28>
 8003cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cfe:	e7f8      	b.n	8003cf2 <memmove+0x12>
 8003d00:	4601      	mov	r1, r0
 8003d02:	4402      	add	r2, r0
 8003d04:	428a      	cmp	r2, r1
 8003d06:	d100      	bne.n	8003d0a <memmove+0x2a>
 8003d08:	bd10      	pop	{r4, pc}
 8003d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d12:	e7f7      	b.n	8003d04 <memmove+0x24>

08003d14 <_free_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4605      	mov	r5, r0
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	d043      	beq.n	8003da4 <_free_r+0x90>
 8003d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d20:	1f0c      	subs	r4, r1, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bfb8      	it	lt
 8003d26:	18e4      	addlt	r4, r4, r3
 8003d28:	f000 f8d0 	bl	8003ecc <__malloc_lock>
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <_free_r+0x94>)
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	4610      	mov	r0, r2
 8003d32:	b933      	cbnz	r3, 8003d42 <_free_r+0x2e>
 8003d34:	6063      	str	r3, [r4, #4]
 8003d36:	6014      	str	r4, [r2, #0]
 8003d38:	4628      	mov	r0, r5
 8003d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d3e:	f000 b8cb 	b.w	8003ed8 <__malloc_unlock>
 8003d42:	42a3      	cmp	r3, r4
 8003d44:	d90a      	bls.n	8003d5c <_free_r+0x48>
 8003d46:	6821      	ldr	r1, [r4, #0]
 8003d48:	1862      	adds	r2, r4, r1
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	bf01      	itttt	eq
 8003d4e:	681a      	ldreq	r2, [r3, #0]
 8003d50:	685b      	ldreq	r3, [r3, #4]
 8003d52:	1852      	addeq	r2, r2, r1
 8003d54:	6022      	streq	r2, [r4, #0]
 8003d56:	6063      	str	r3, [r4, #4]
 8003d58:	6004      	str	r4, [r0, #0]
 8003d5a:	e7ed      	b.n	8003d38 <_free_r+0x24>
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	b10b      	cbz	r3, 8003d66 <_free_r+0x52>
 8003d62:	42a3      	cmp	r3, r4
 8003d64:	d9fa      	bls.n	8003d5c <_free_r+0x48>
 8003d66:	6811      	ldr	r1, [r2, #0]
 8003d68:	1850      	adds	r0, r2, r1
 8003d6a:	42a0      	cmp	r0, r4
 8003d6c:	d10b      	bne.n	8003d86 <_free_r+0x72>
 8003d6e:	6820      	ldr	r0, [r4, #0]
 8003d70:	4401      	add	r1, r0
 8003d72:	1850      	adds	r0, r2, r1
 8003d74:	4283      	cmp	r3, r0
 8003d76:	6011      	str	r1, [r2, #0]
 8003d78:	d1de      	bne.n	8003d38 <_free_r+0x24>
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4401      	add	r1, r0
 8003d80:	6011      	str	r1, [r2, #0]
 8003d82:	6053      	str	r3, [r2, #4]
 8003d84:	e7d8      	b.n	8003d38 <_free_r+0x24>
 8003d86:	d902      	bls.n	8003d8e <_free_r+0x7a>
 8003d88:	230c      	movs	r3, #12
 8003d8a:	602b      	str	r3, [r5, #0]
 8003d8c:	e7d4      	b.n	8003d38 <_free_r+0x24>
 8003d8e:	6820      	ldr	r0, [r4, #0]
 8003d90:	1821      	adds	r1, r4, r0
 8003d92:	428b      	cmp	r3, r1
 8003d94:	bf01      	itttt	eq
 8003d96:	6819      	ldreq	r1, [r3, #0]
 8003d98:	685b      	ldreq	r3, [r3, #4]
 8003d9a:	1809      	addeq	r1, r1, r0
 8003d9c:	6021      	streq	r1, [r4, #0]
 8003d9e:	6063      	str	r3, [r4, #4]
 8003da0:	6054      	str	r4, [r2, #4]
 8003da2:	e7c9      	b.n	8003d38 <_free_r+0x24>
 8003da4:	bd38      	pop	{r3, r4, r5, pc}
 8003da6:	bf00      	nop
 8003da8:	200001a8 	.word	0x200001a8

08003dac <_malloc_r>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	1ccd      	adds	r5, r1, #3
 8003db0:	f025 0503 	bic.w	r5, r5, #3
 8003db4:	3508      	adds	r5, #8
 8003db6:	2d0c      	cmp	r5, #12
 8003db8:	bf38      	it	cc
 8003dba:	250c      	movcc	r5, #12
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	db01      	blt.n	8003dc6 <_malloc_r+0x1a>
 8003dc2:	42a9      	cmp	r1, r5
 8003dc4:	d903      	bls.n	8003dce <_malloc_r+0x22>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	6033      	str	r3, [r6, #0]
 8003dca:	2000      	movs	r0, #0
 8003dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dce:	f000 f87d 	bl	8003ecc <__malloc_lock>
 8003dd2:	4921      	ldr	r1, [pc, #132]	; (8003e58 <_malloc_r+0xac>)
 8003dd4:	680a      	ldr	r2, [r1, #0]
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	b99c      	cbnz	r4, 8003e02 <_malloc_r+0x56>
 8003dda:	4f20      	ldr	r7, [pc, #128]	; (8003e5c <_malloc_r+0xb0>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	b923      	cbnz	r3, 8003dea <_malloc_r+0x3e>
 8003de0:	4621      	mov	r1, r4
 8003de2:	4630      	mov	r0, r6
 8003de4:	f000 f862 	bl	8003eac <_sbrk_r>
 8003de8:	6038      	str	r0, [r7, #0]
 8003dea:	4629      	mov	r1, r5
 8003dec:	4630      	mov	r0, r6
 8003dee:	f000 f85d 	bl	8003eac <_sbrk_r>
 8003df2:	1c43      	adds	r3, r0, #1
 8003df4:	d123      	bne.n	8003e3e <_malloc_r+0x92>
 8003df6:	230c      	movs	r3, #12
 8003df8:	4630      	mov	r0, r6
 8003dfa:	6033      	str	r3, [r6, #0]
 8003dfc:	f000 f86c 	bl	8003ed8 <__malloc_unlock>
 8003e00:	e7e3      	b.n	8003dca <_malloc_r+0x1e>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	1b5b      	subs	r3, r3, r5
 8003e06:	d417      	bmi.n	8003e38 <_malloc_r+0x8c>
 8003e08:	2b0b      	cmp	r3, #11
 8003e0a:	d903      	bls.n	8003e14 <_malloc_r+0x68>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	441c      	add	r4, r3
 8003e10:	6025      	str	r5, [r4, #0]
 8003e12:	e004      	b.n	8003e1e <_malloc_r+0x72>
 8003e14:	6863      	ldr	r3, [r4, #4]
 8003e16:	42a2      	cmp	r2, r4
 8003e18:	bf0c      	ite	eq
 8003e1a:	600b      	streq	r3, [r1, #0]
 8003e1c:	6053      	strne	r3, [r2, #4]
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f000 f85a 	bl	8003ed8 <__malloc_unlock>
 8003e24:	f104 000b 	add.w	r0, r4, #11
 8003e28:	1d23      	adds	r3, r4, #4
 8003e2a:	f020 0007 	bic.w	r0, r0, #7
 8003e2e:	1ac2      	subs	r2, r0, r3
 8003e30:	d0cc      	beq.n	8003dcc <_malloc_r+0x20>
 8003e32:	1a1b      	subs	r3, r3, r0
 8003e34:	50a3      	str	r3, [r4, r2]
 8003e36:	e7c9      	b.n	8003dcc <_malloc_r+0x20>
 8003e38:	4622      	mov	r2, r4
 8003e3a:	6864      	ldr	r4, [r4, #4]
 8003e3c:	e7cc      	b.n	8003dd8 <_malloc_r+0x2c>
 8003e3e:	1cc4      	adds	r4, r0, #3
 8003e40:	f024 0403 	bic.w	r4, r4, #3
 8003e44:	42a0      	cmp	r0, r4
 8003e46:	d0e3      	beq.n	8003e10 <_malloc_r+0x64>
 8003e48:	1a21      	subs	r1, r4, r0
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f000 f82e 	bl	8003eac <_sbrk_r>
 8003e50:	3001      	adds	r0, #1
 8003e52:	d1dd      	bne.n	8003e10 <_malloc_r+0x64>
 8003e54:	e7cf      	b.n	8003df6 <_malloc_r+0x4a>
 8003e56:	bf00      	nop
 8003e58:	200001a8 	.word	0x200001a8
 8003e5c:	200001ac 	.word	0x200001ac

08003e60 <_realloc_r>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	4607      	mov	r7, r0
 8003e64:	4614      	mov	r4, r2
 8003e66:	460e      	mov	r6, r1
 8003e68:	b921      	cbnz	r1, 8003e74 <_realloc_r+0x14>
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e70:	f7ff bf9c 	b.w	8003dac <_malloc_r>
 8003e74:	b922      	cbnz	r2, 8003e80 <_realloc_r+0x20>
 8003e76:	f7ff ff4d 	bl	8003d14 <_free_r>
 8003e7a:	4625      	mov	r5, r4
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e80:	f000 f830 	bl	8003ee4 <_malloc_usable_size_r>
 8003e84:	42a0      	cmp	r0, r4
 8003e86:	d20f      	bcs.n	8003ea8 <_realloc_r+0x48>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f7ff ff8e 	bl	8003dac <_malloc_r>
 8003e90:	4605      	mov	r5, r0
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d0f2      	beq.n	8003e7c <_realloc_r+0x1c>
 8003e96:	4631      	mov	r1, r6
 8003e98:	4622      	mov	r2, r4
 8003e9a:	f7ff ff13 	bl	8003cc4 <memcpy>
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f7ff ff37 	bl	8003d14 <_free_r>
 8003ea6:	e7e9      	b.n	8003e7c <_realloc_r+0x1c>
 8003ea8:	4635      	mov	r5, r6
 8003eaa:	e7e7      	b.n	8003e7c <_realloc_r+0x1c>

08003eac <_sbrk_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	2300      	movs	r3, #0
 8003eb0:	4d05      	ldr	r5, [pc, #20]	; (8003ec8 <_sbrk_r+0x1c>)
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	602b      	str	r3, [r5, #0]
 8003eb8:	f7fd fb68 	bl	800158c <_sbrk>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d102      	bne.n	8003ec6 <_sbrk_r+0x1a>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	b103      	cbz	r3, 8003ec6 <_sbrk_r+0x1a>
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	2000027c 	.word	0x2000027c

08003ecc <__malloc_lock>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	; (8003ed4 <__malloc_lock+0x8>)
 8003ece:	f000 b811 	b.w	8003ef4 <__retarget_lock_acquire_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	20000284 	.word	0x20000284

08003ed8 <__malloc_unlock>:
 8003ed8:	4801      	ldr	r0, [pc, #4]	; (8003ee0 <__malloc_unlock+0x8>)
 8003eda:	f000 b80c 	b.w	8003ef6 <__retarget_lock_release_recursive>
 8003ede:	bf00      	nop
 8003ee0:	20000284 	.word	0x20000284

08003ee4 <_malloc_usable_size_r>:
 8003ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee8:	1f18      	subs	r0, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bfbc      	itt	lt
 8003eee:	580b      	ldrlt	r3, [r1, r0]
 8003ef0:	18c0      	addlt	r0, r0, r3
 8003ef2:	4770      	bx	lr

08003ef4 <__retarget_lock_acquire_recursive>:
 8003ef4:	4770      	bx	lr

08003ef6 <__retarget_lock_release_recursive>:
 8003ef6:	4770      	bx	lr

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr
